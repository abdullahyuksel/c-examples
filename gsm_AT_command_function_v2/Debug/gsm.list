
gsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003650  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003784  08003784  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800378c  0800378c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800378c  0800378c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000074  08003808  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08003808  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cdd  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a48  00000000  00000000  00029d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0002b7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  0002bf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000719d  00000000  00000000  0002c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00002504  00000000  00000000  000337ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00035cb1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001bec  00000000  00000000  00035d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036f8 	.word	0x080036f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080036f8 	.word	0x080036f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <powerModem>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char end[2]="OK";
void powerModem()
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_POWER_GPIO_Port, GSM_POWER_Pin, GPIO_PIN_RESET);
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <powerModem+0x38>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	0019      	movs	r1, r3
 80004c6:	f000 ff47 	bl	8001358 <HAL_GPIO_WritePin>
 	HAL_Delay(2000);
 80004ca:	23fa      	movs	r3, #250	; 0xfa
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 fc42 	bl	8000d58 <HAL_Delay>
	HAL_GPIO_WritePin(GSM_POWER_GPIO_Port, GSM_POWER_Pin, GPIO_PIN_SET);
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4805      	ldr	r0, [pc, #20]	; (80004f0 <powerModem+0x38>)
 80004da:	2201      	movs	r2, #1
 80004dc:	0019      	movs	r1, r3
 80004de:	f000 ff3b 	bl	8001358 <HAL_GPIO_WritePin>
 	HAL_Delay(5000);
 80004e2:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <powerModem+0x3c>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fc37 	bl	8000d58 <HAL_Delay>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	50000400 	.word	0x50000400
 80004f4:	00001388 	.word	0x00001388

080004f8 <quectell_ATcommand_data>:
  char len;
  char result[10];
}gsm_t;

gsm_t quectell_ATcommand_data(char *request, uint8_t try)
{
 80004f8:	b5b0      	push	{r4, r5, r7, lr}
 80004fa:	b0cc      	sub	sp, #304	; 0x130
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	4b7c      	ldr	r3, [pc, #496]	; (80006f4 <quectell_ATcommand_data+0x1fc>)
 8000504:	2198      	movs	r1, #152	; 0x98
 8000506:	0049      	lsls	r1, r1, #1
 8000508:	185b      	adds	r3, r3, r1
 800050a:	19db      	adds	r3, r3, r7
 800050c:	701a      	strb	r2, [r3, #0]
	struct gsm Paket={"\0"};
 800050e:	4b7a      	ldr	r3, [pc, #488]	; (80006f8 <quectell_ATcommand_data+0x200>)
 8000510:	185b      	adds	r3, r3, r1
 8000512:	19db      	adds	r3, r3, r7
 8000514:	0018      	movs	r0, r3
 8000516:	2385      	movs	r3, #133	; 0x85
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f003 f80a 	bl	8003536 <memset>
    char *receive = malloc(200);
 8000522:	20c8      	movs	r0, #200	; 0xc8
 8000524:	f002 fff4 	bl	8003510 <malloc>
 8000528:	0003      	movs	r3, r0
 800052a:	2294      	movs	r2, #148	; 0x94
 800052c:	0052      	lsls	r2, r2, #1
 800052e:	18ba      	adds	r2, r7, r2
 8000530:	6013      	str	r3, [r2, #0]
    char *sendreceive = malloc(200);
 8000532:	20c8      	movs	r0, #200	; 0xc8
 8000534:	f002 ffec 	bl	8003510 <malloc>
 8000538:	0003      	movs	r3, r0
 800053a:	2292      	movs	r2, #146	; 0x92
 800053c:	0052      	lsls	r2, r2, #1
 800053e:	18ba      	adds	r2, r7, r2
 8000540:	6013      	str	r3, [r2, #0]
    int request_len = 1;
 8000542:	2301      	movs	r3, #1
 8000544:	2290      	movs	r2, #144	; 0x90
 8000546:	0052      	lsls	r2, r2, #1
 8000548:	18ba      	adds	r2, r7, r2
 800054a:	6013      	str	r3, [r2, #0]

	while(try)
 800054c:	e0ba      	b.n	80006c4 <quectell_ATcommand_data+0x1cc>
	{
		try--;
 800054e:	4b69      	ldr	r3, [pc, #420]	; (80006f4 <quectell_ATcommand_data+0x1fc>)
 8000550:	2198      	movs	r1, #152	; 0x98
 8000552:	0049      	lsls	r1, r1, #1
 8000554:	185b      	adds	r3, r3, r1
 8000556:	19db      	adds	r3, r3, r7
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	4b66      	ldr	r3, [pc, #408]	; (80006f4 <quectell_ATcommand_data+0x1fc>)
 800055c:	185b      	adds	r3, r3, r1
 800055e:	19db      	adds	r3, r3, r7
 8000560:	3a01      	subs	r2, #1
 8000562:	701a      	strb	r2, [r3, #0]
		request_len = strlen(request);
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	0018      	movs	r0, r3
 8000568:	f7ff fdce 	bl	8000108 <strlen>
 800056c:	0003      	movs	r3, r0
 800056e:	2490      	movs	r4, #144	; 0x90
 8000570:	0064      	lsls	r4, r4, #1
 8000572:	193a      	adds	r2, r7, r4
 8000574:	6013      	str	r3, [r2, #0]
		HAL_Delay(100);
 8000576:	2064      	movs	r0, #100	; 0x64
 8000578:	f000 fbee 	bl	8000d58 <HAL_Delay>
		HAL_UART_Transmit(&huart1,(uint8_t*) request, request_len, 250);  // HAL_MAX_DELAY);
 800057c:	193b      	adds	r3, r7, r4
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b29a      	uxth	r2, r3
 8000582:	68b9      	ldr	r1, [r7, #8]
 8000584:	485d      	ldr	r0, [pc, #372]	; (80006fc <quectell_ATcommand_data+0x204>)
 8000586:	23fa      	movs	r3, #250	; 0xfa
 8000588:	f001 fe1c 	bl	80021c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1,(uint8_t*) receive, 200, 1000);  // HAL_MAX_DELAY);
 800058c:	23fa      	movs	r3, #250	; 0xfa
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	2494      	movs	r4, #148	; 0x94
 8000592:	0064      	lsls	r4, r4, #1
 8000594:	193a      	adds	r2, r7, r4
 8000596:	6811      	ldr	r1, [r2, #0]
 8000598:	4858      	ldr	r0, [pc, #352]	; (80006fc <quectell_ATcommand_data+0x204>)
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	f001 feba 	bl	8002314 <HAL_UART_Receive>
		HAL_Delay(300);
 80005a0:	2396      	movs	r3, #150	; 0x96
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fbd7 	bl	8000d58 <HAL_Delay>

		int receive_length = strlen(receive);
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	0018      	movs	r0, r3
 80005b0:	f7ff fdaa 	bl	8000108 <strlen>
 80005b4:	0003      	movs	r3, r0
 80005b6:	2296      	movs	r2, #150	; 0x96
 80005b8:	0052      	lsls	r2, r2, #1
 80005ba:	18ba      	adds	r2, r7, r2
 80005bc:	6013      	str	r3, [r2, #0]

		while(receive_length)
 80005be:	e07a      	b.n	80006b6 <quectell_ATcommand_data+0x1be>
		{
			if((receive[receive_length-7]=='\r')
 80005c0:	2496      	movs	r4, #150	; 0x96
 80005c2:	0064      	lsls	r4, r4, #1
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3b07      	subs	r3, #7
 80005ca:	2194      	movs	r1, #148	; 0x94
 80005cc:	0049      	lsls	r1, r1, #1
 80005ce:	187a      	adds	r2, r7, r1
 80005d0:	6812      	ldr	r2, [r2, #0]
 80005d2:	18d3      	adds	r3, r2, r3
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b0d      	cmp	r3, #13
 80005d8:	d166      	bne.n	80006a8 <quectell_ATcommand_data+0x1b0>
				&& (receive[receive_length-6]=='\n')
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3b06      	subs	r3, #6
 80005e0:	187a      	adds	r2, r7, r1
 80005e2:	6812      	ldr	r2, [r2, #0]
 80005e4:	18d3      	adds	r3, r2, r3
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b0a      	cmp	r3, #10
 80005ea:	d15d      	bne.n	80006a8 <quectell_ATcommand_data+0x1b0>
				&& (receive[receive_length-5]=='\r')
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3b05      	subs	r3, #5
 80005f2:	187a      	adds	r2, r7, r1
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	18d3      	adds	r3, r2, r3
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b0d      	cmp	r3, #13
 80005fc:	d154      	bne.n	80006a8 <quectell_ATcommand_data+0x1b0>
				&& (receive[receive_length-4]=='\n')
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3b04      	subs	r3, #4
 8000604:	187a      	adds	r2, r7, r1
 8000606:	6812      	ldr	r2, [r2, #0]
 8000608:	18d3      	adds	r3, r2, r3
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b0a      	cmp	r3, #10
 800060e:	d14b      	bne.n	80006a8 <quectell_ATcommand_data+0x1b0>
				&& (receive[receive_length-3]=='O')
 8000610:	193b      	adds	r3, r7, r4
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3b03      	subs	r3, #3
 8000616:	187a      	adds	r2, r7, r1
 8000618:	6812      	ldr	r2, [r2, #0]
 800061a:	18d3      	adds	r3, r2, r3
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b4f      	cmp	r3, #79	; 0x4f
 8000620:	d142      	bne.n	80006a8 <quectell_ATcommand_data+0x1b0>
				&& (receive[receive_length-2]=='K')
 8000622:	193b      	adds	r3, r7, r4
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	3b02      	subs	r3, #2
 8000628:	187a      	adds	r2, r7, r1
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	18d3      	adds	r3, r2, r3
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b4b      	cmp	r3, #75	; 0x4b
 8000632:	d139      	bne.n	80006a8 <quectell_ATcommand_data+0x1b0>
				&& (receive[receive_length-1]=='\r')
 8000634:	193b      	adds	r3, r7, r4
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3b01      	subs	r3, #1
 800063a:	187a      	adds	r2, r7, r1
 800063c:	6812      	ldr	r2, [r2, #0]
 800063e:	18d3      	adds	r3, r2, r3
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b0d      	cmp	r3, #13
 8000644:	d130      	bne.n	80006a8 <quectell_ATcommand_data+0x1b0>
				&& (receive[receive_length]=='\n')
 8000646:	193b      	adds	r3, r7, r4
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	187a      	adds	r2, r7, r1
 800064c:	6812      	ldr	r2, [r2, #0]
 800064e:	18d3      	adds	r3, r2, r3
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b0a      	cmp	r3, #10
 8000654:	d128      	bne.n	80006a8 <quectell_ATcommand_data+0x1b0>
				)
			{
				strncpy(&Paket.data[0],&receive[0],receive_length-8);
 8000656:	193b      	adds	r3, r7, r4
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3b08      	subs	r3, #8
 800065c:	001a      	movs	r2, r3
 800065e:	187b      	adds	r3, r7, r1
 8000660:	6819      	ldr	r1, [r3, #0]
 8000662:	2514      	movs	r5, #20
 8000664:	197b      	adds	r3, r7, r5
 8000666:	0018      	movs	r0, r3
 8000668:	f003 f820 	bl	80036ac <strncpy>
//				Paket.data[receive_length-8]='\0';
				Paket.len=receive_length-8;
 800066c:	0020      	movs	r0, r4
 800066e:	183b      	adds	r3, r7, r0
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	3b08      	subs	r3, #8
 8000676:	b2d9      	uxtb	r1, r3
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <quectell_ATcommand_data+0x200>)
 800067a:	2498      	movs	r4, #152	; 0x98
 800067c:	0064      	lsls	r4, r4, #1
 800067e:	191b      	adds	r3, r3, r4
 8000680:	19db      	adds	r3, r3, r7
 8000682:	22ff      	movs	r2, #255	; 0xff
 8000684:	5499      	strb	r1, [r3, r2]
				receive_length=0;
 8000686:	2300      	movs	r3, #0
 8000688:	183a      	adds	r2, r7, r0
 800068a:	6013      	str	r3, [r2, #0]
				strcpy(&Paket.result[0],end);
 800068c:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <quectell_ATcommand_data+0x208>)
 800068e:	197b      	adds	r3, r7, r5
 8000690:	3301      	adds	r3, #1
 8000692:	33ff      	adds	r3, #255	; 0xff
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f003 f800 	bl	800369c <strcpy>
				try=0;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <quectell_ATcommand_data+0x1fc>)
 800069e:	191b      	adds	r3, r3, r4
 80006a0:	19db      	adds	r3, r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
 80006a6:	e006      	b.n	80006b6 <quectell_ATcommand_data+0x1be>
			}
			else receive_length--;
 80006a8:	2296      	movs	r2, #150	; 0x96
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	18bb      	adds	r3, r7, r2
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	18ba      	adds	r2, r7, r2
 80006b4:	6013      	str	r3, [r2, #0]
		while(receive_length)
 80006b6:	2396      	movs	r3, #150	; 0x96
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d000      	beq.n	80006c4 <quectell_ATcommand_data+0x1cc>
 80006c2:	e77d      	b.n	80005c0 <quectell_ATcommand_data+0xc8>
	while(try)
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <quectell_ATcommand_data+0x1fc>)
 80006c6:	2198      	movs	r1, #152	; 0x98
 80006c8:	0049      	lsls	r1, r1, #1
 80006ca:	185b      	adds	r3, r3, r1
 80006cc:	19db      	adds	r3, r3, r7
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d000      	beq.n	80006d6 <quectell_ATcommand_data+0x1de>
 80006d4:	e73b      	b.n	800054e <quectell_ATcommand_data+0x56>
		}
	}

	return Paket;
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <quectell_ATcommand_data+0x200>)
 80006da:	185b      	adds	r3, r3, r1
 80006dc:	19db      	adds	r3, r3, r7
 80006de:	0010      	movs	r0, r2
 80006e0:	0019      	movs	r1, r3
 80006e2:	2385      	movs	r3, #133	; 0x85
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	001a      	movs	r2, r3
 80006e8:	f002 ff1c 	bl	8003524 <memcpy>
}
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b04c      	add	sp, #304	; 0x130
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	fffffed7 	.word	0xfffffed7
 80006f8:	fffffee4 	.word	0xfffffee4
 80006fc:	20000090 	.word	0x20000090
 8000700:	20000000 	.word	0x20000000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b5b0      	push	{r4, r5, r7, lr}
 8000706:	4c2e      	ldr	r4, [pc, #184]	; (80007c0 <main+0xbc>)
 8000708:	44a5      	add	sp, r4
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 fab4 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f862 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f000 f938 	bl	8000988 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000718:	f000 f8d4 	bl	80008c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800071c:	f000 f904 	bl	8000928 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  gsm_t runPaket;
  powerModem();
 8000720:	f7ff feca 	bl	80004b8 <powerModem>
  char first[4]="ATI\n\r";
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <main+0xc0>)
 8000726:	218a      	movs	r1, #138	; 0x8a
 8000728:	0089      	lsls	r1, r1, #2
 800072a:	185b      	adds	r3, r3, r1
 800072c:	19db      	adds	r3, r3, r7
 800072e:	4a26      	ldr	r2, [pc, #152]	; (80007c8 <main+0xc4>)
 8000730:	601a      	str	r2, [r3, #0]
  char imei[8]="AT+GSN\n\r";
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <main+0xc8>)
 8000734:	185b      	adds	r3, r3, r1
 8000736:	19db      	adds	r3, r3, r7
 8000738:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <main+0xcc>)
 800073a:	ca03      	ldmia	r2!, {r0, r1}
 800073c:	c303      	stmia	r3!, {r0, r1}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  runPaket= quectell_ATcommand_data(first,2);
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <main+0xd0>)
 8000740:	258a      	movs	r5, #138	; 0x8a
 8000742:	00ad      	lsls	r5, r5, #2
 8000744:	195b      	adds	r3, r3, r5
 8000746:	19dc      	adds	r4, r3, r7
 8000748:	003b      	movs	r3, r7
 800074a:	228c      	movs	r2, #140	; 0x8c
 800074c:	0052      	lsls	r2, r2, #1
 800074e:	18b9      	adds	r1, r7, r2
 8000750:	2202      	movs	r2, #2
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff fed0 	bl	80004f8 <quectell_ATcommand_data>
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <main+0xbc>)
 800075a:	195b      	adds	r3, r3, r5
 800075c:	19db      	adds	r3, r3, r7
 800075e:	0020      	movs	r0, r4
 8000760:	0019      	movs	r1, r3
 8000762:	2385      	movs	r3, #133	; 0x85
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	001a      	movs	r2, r3
 8000768:	f002 fedc 	bl	8003524 <memcpy>

	  HAL_Delay(2000);
 800076c:	23fa      	movs	r3, #250	; 0xfa
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	0018      	movs	r0, r3
 8000772:	f000 faf1 	bl	8000d58 <HAL_Delay>

	  memset(&runPaket, '\0', sizeof(runPaket));
 8000776:	2385      	movs	r3, #133	; 0x85
 8000778:	005a      	lsls	r2, r3, #1
 800077a:	238e      	movs	r3, #142	; 0x8e
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	2100      	movs	r1, #0
 8000782:	0018      	movs	r0, r3
 8000784:	f002 fed7 	bl	8003536 <memset>
	  runPaket= quectell_ATcommand_data(imei,2);
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <main+0xd0>)
 800078a:	195b      	adds	r3, r3, r5
 800078c:	19dc      	adds	r4, r3, r7
 800078e:	003b      	movs	r3, r7
 8000790:	2288      	movs	r2, #136	; 0x88
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	18b9      	adds	r1, r7, r2
 8000796:	2202      	movs	r2, #2
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff fead 	bl	80004f8 <quectell_ATcommand_data>
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <main+0xbc>)
 80007a0:	195b      	adds	r3, r3, r5
 80007a2:	19db      	adds	r3, r3, r7
 80007a4:	0020      	movs	r0, r4
 80007a6:	0019      	movs	r1, r3
 80007a8:	2385      	movs	r3, #133	; 0x85
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	001a      	movs	r2, r3
 80007ae:	f002 feb9 	bl	8003524 <memcpy>


	  HAL_Delay(2000);
 80007b2:	23fa      	movs	r3, #250	; 0xfa
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 face 	bl	8000d58 <HAL_Delay>
	  runPaket= quectell_ATcommand_data(first,2);
 80007bc:	e7bf      	b.n	800073e <main+0x3a>
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	fffffdd8 	.word	0xfffffdd8
 80007c4:	fffffef0 	.word	0xfffffef0
 80007c8:	0a495441 	.word	0x0a495441
 80007cc:	fffffee8 	.word	0xfffffee8
 80007d0:	08003710 	.word	0x08003710
 80007d4:	fffffef4 	.word	0xfffffef4

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b09b      	sub	sp, #108	; 0x6c
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	2434      	movs	r4, #52	; 0x34
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	0018      	movs	r0, r3
 80007e4:	2334      	movs	r3, #52	; 0x34
 80007e6:	001a      	movs	r2, r3
 80007e8:	2100      	movs	r1, #0
 80007ea:	f002 fea4 	bl	8003536 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ee:	2320      	movs	r3, #32
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	0018      	movs	r0, r3
 80007f4:	2314      	movs	r3, #20
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f002 fe9c 	bl	8003536 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	0018      	movs	r0, r3
 8000802:	231c      	movs	r3, #28
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f002 fe95 	bl	8003536 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <SystemClock_Config+0xe4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a2b      	ldr	r2, [pc, #172]	; (80008c0 <SystemClock_Config+0xe8>)
 8000812:	401a      	ands	r2, r3
 8000814:	4b29      	ldr	r3, [pc, #164]	; (80008bc <SystemClock_Config+0xe4>)
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	0109      	lsls	r1, r1, #4
 800081a:	430a      	orrs	r2, r1
 800081c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081e:	0021      	movs	r1, r4
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2202      	movs	r2, #2
 8000824:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2201      	movs	r2, #1
 800082a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2210      	movs	r2, #16
 8000830:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2202      	movs	r2, #2
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	02d2      	lsls	r2, r2, #11
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	03d2      	lsls	r2, r2, #15
 800084c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	187b      	adds	r3, r7, r1
 8000850:	0018      	movs	r0, r3
 8000852:	f000 fd9f 	bl	8001394 <HAL_RCC_OscConfig>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800085a:	f000 f8eb 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	2120      	movs	r1, #32
 8000860:	187b      	adds	r3, r7, r1
 8000862:	220f      	movs	r2, #15
 8000864:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2203      	movs	r2, #3
 800086a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2101      	movs	r1, #1
 8000882:	0018      	movs	r0, r3
 8000884:	f001 f8f0 	bl	8001a68 <HAL_RCC_ClockConfig>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800088c:	f000 f8d2 	bl	8000a34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2203      	movs	r2, #3
 8000894:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 fb03 	bl	8001eb0 <HAL_RCCEx_PeriphCLKConfig>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80008ae:	f000 f8c1 	bl	8000a34 <Error_Handler>
  }
}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b01b      	add	sp, #108	; 0x6c
 80008b8:	bd90      	pop	{r4, r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40007000 	.word	0x40007000
 80008c0:	ffffe7ff 	.word	0xffffe7ff

080008c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_USART1_UART_Init+0x5c>)
 80008ca:	4a16      	ldr	r2, [pc, #88]	; (8000924 <MX_USART1_UART_Init+0x60>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USART1_UART_Init+0x5c>)
 80008d0:	22e1      	movs	r2, #225	; 0xe1
 80008d2:	0252      	lsls	r2, r2, #9
 80008d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_USART1_UART_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART1_UART_Init+0x5c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USART1_UART_Init+0x5c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <MX_USART1_UART_Init+0x5c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART1_UART_Init+0x5c>)
 80008f0:	22c0      	movs	r2, #192	; 0xc0
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_USART1_UART_Init+0x5c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART1_UART_Init+0x5c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_USART1_UART_Init+0x5c>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <MX_USART1_UART_Init+0x5c>)
 800090a:	0018      	movs	r0, r3
 800090c:	f001 fc06 	bl	800211c <HAL_UART_Init>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000914:	f000 f88e 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	20000090 	.word	0x20000090
 8000924:	40013800 	.word	0x40013800

08000928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <MX_USART2_UART_Init+0x5c>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000934:	22e1      	movs	r2, #225	; 0xe1
 8000936:	0252      	lsls	r2, r2, #9
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800096c:	0018      	movs	r0, r3
 800096e:	f001 fbd5 	bl	800211c <HAL_UART_Init>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 f85d 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000114 	.word	0x20000114
 8000984:	40004400 	.word	0x40004400

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	240c      	movs	r4, #12
 8000990:	193b      	adds	r3, r7, r4
 8000992:	0018      	movs	r0, r3
 8000994:	2314      	movs	r3, #20
 8000996:	001a      	movs	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	f002 fdcc 	bl	8003536 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_GPIO_Init+0xa4>)
 80009a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_GPIO_Init+0xa4>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_GPIO_Init+0xa4>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_GPIO_Init+0xa4>)
 80009b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_GPIO_Init+0xa4>)
 80009bc:	2102      	movs	r1, #2
 80009be:	430a      	orrs	r2, r1
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_GPIO_Init+0xa4>)
 80009c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c6:	2202      	movs	r2, #2
 80009c8:	4013      	ands	r3, r2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_POWER_GPIO_Port, GSM_POWER_Pin, GPIO_PIN_RESET);
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4817      	ldr	r0, [pc, #92]	; (8000a30 <MX_GPIO_Init+0xa8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	0019      	movs	r1, r3
 80009d8:	f000 fcbe 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RFTX_MON_Pin SIM_DOOR_Pin */
  GPIO_InitStruct.Pin = RFTX_MON_Pin|SIM_DOOR_Pin;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2282      	movs	r2, #130	; 0x82
 80009e0:	0092      	lsls	r2, r2, #2
 80009e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	2200      	movs	r2, #0
 80009e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <MX_GPIO_Init+0xa8>)
 80009f4:	0019      	movs	r1, r3
 80009f6:	0010      	movs	r0, r2
 80009f8:	f000 fb38 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_POWER_Pin */
  GPIO_InitStruct.Pin = GSM_POWER_Pin;
 80009fc:	0021      	movs	r1, r4
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	0052      	lsls	r2, r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2201      	movs	r2, #1
 8000a0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GSM_POWER_GPIO_Port, &GPIO_InitStruct);
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <MX_GPIO_Init+0xa8>)
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	0010      	movs	r0, r2
 8000a20:	f000 fb24 	bl	800106c <HAL_GPIO_Init>

}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b009      	add	sp, #36	; 0x24
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	50000400 	.word	0x50000400

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_MspInit+0x24>)
 8000a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x24>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <HAL_MspInit+0x24>)
 8000a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_MspInit+0x24>)
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	0549      	lsls	r1, r1, #21
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40021000 	.word	0x40021000

08000a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b08b      	sub	sp, #44	; 0x2c
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	2414      	movs	r4, #20
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	0018      	movs	r0, r3
 8000a76:	2314      	movs	r3, #20
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f002 fd5b 	bl	8003536 <memset>
  if(huart->Instance==USART1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a34      	ldr	r2, [pc, #208]	; (8000b58 <HAL_UART_MspInit+0xf0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12b      	bne.n	8000ae2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a8a:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <HAL_UART_MspInit+0xf4>)
 8000a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a8e:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <HAL_UART_MspInit+0xf4>)
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	01c9      	lsls	r1, r1, #7
 8000a94:	430a      	orrs	r2, r1
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <HAL_UART_MspInit+0xf4>)
 8000a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_UART_MspInit+0xf4>)
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <HAL_UART_MspInit+0xf4>)
 8000aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	22f0      	movs	r2, #240	; 0xf0
 8000ab4:	0152      	lsls	r2, r2, #5
 8000ab6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	0021      	movs	r1, r4
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2202      	movs	r2, #2
 8000abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2204      	movs	r2, #4
 8000ad0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	187a      	adds	r2, r7, r1
 8000ad4:	23a0      	movs	r3, #160	; 0xa0
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 fac6 	bl	800106c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae0:	e036      	b.n	8000b50 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	; (8000b60 <HAL_UART_MspInit+0xf8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d131      	bne.n	8000b50 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_UART_MspInit+0xf4>)
 8000aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_UART_MspInit+0xf4>)
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	0289      	lsls	r1, r1, #10
 8000af6:	430a      	orrs	r2, r1
 8000af8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_UART_MspInit+0xf4>)
 8000afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0xf4>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	430a      	orrs	r2, r1
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_UART_MspInit+0xf4>)
 8000b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b12:	2114      	movs	r1, #20
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2203      	movs	r2, #3
 8000b2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2204      	movs	r2, #4
 8000b30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	187a      	adds	r2, r7, r1
 8000b34:	23a0      	movs	r3, #160	; 0xa0
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	0011      	movs	r1, r2
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 fa96 	bl	800106c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	201c      	movs	r0, #28
 8000b46:	f000 f9d7 	bl	8000ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b4a:	201c      	movs	r0, #28
 8000b4c:	f000 f9e9 	bl	8000f22 <HAL_NVIC_EnableIRQ>
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b00b      	add	sp, #44	; 0x2c
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	40013800 	.word	0x40013800
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40004400 	.word	0x40004400

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 f8ca 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <USART2_IRQHandler+0x14>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f001 fca8 	bl	80024f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	20000114 	.word	0x20000114

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f002 fc6e 	bl	80034bc <__errno>
 8000be0:	0003      	movs	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	425b      	negs	r3, r3
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	18d2      	adds	r2, r2, r3
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b006      	add	sp, #24
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20002000 	.word	0x20002000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	20000198 	.word	0x20000198
 8000c14:	200001b0 	.word	0x200001b0

08000c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490e      	ldr	r1, [pc, #56]	; (8000c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0b      	ldr	r4, [pc, #44]	; (8000c70 <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c4e:	f7ff ffe3 	bl	8000c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f002 fc39 	bl	80034c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fd55 	bl	8000704 <main>

08000c5a <LoopForever>:

LoopForever:
    b LoopForever
 8000c5a:	e7fe      	b.n	8000c5a <LoopForever>
   ldr   r0, =_estack
 8000c5c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c68:	08003794 	.word	0x08003794
  ldr r2, =_sbss
 8000c6c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c70:	200001b0 	.word	0x200001b0

08000c74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_COMP_IRQHandler>
	...

08000c78 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x3c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Init+0x3c>)
 8000c8a:	2140      	movs	r1, #64	; 0x40
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f811 	bl	8000cb8 <HAL_InitTick>
 8000c96:	1e03      	subs	r3, r0, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e001      	b.n	8000ca6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca2:	f7ff fecd 	bl	8000a40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cc2:	681c      	ldr	r4, [r3, #0]
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <HAL_InitTick+0x60>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	0019      	movs	r1, r3
 8000cca:	23fa      	movs	r3, #250	; 0xfa
 8000ccc:	0098      	lsls	r0, r3, #2
 8000cce:	f7ff fa23 	bl	8000118 <__udivsi3>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	0020      	movs	r0, r4
 8000cd8:	f7ff fa1e 	bl	8000118 <__udivsi3>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 f92f 	bl	8000f42 <HAL_SYSTICK_Config>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e00f      	b.n	8000d0c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d80b      	bhi.n	8000d0a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 f8fc 	bl	8000ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_InitTick+0x64>)
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b003      	add	sp, #12
 8000d12:	bd90      	pop	{r4, r7, pc}
 8000d14:	20000004 	.word	0x20000004
 8000d18:	2000000c 	.word	0x2000000c
 8000d1c:	20000008 	.word	0x20000008

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_IncTick+0x1c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	001a      	movs	r2, r3
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_IncTick+0x20>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	18d2      	adds	r2, r2, r3
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_IncTick+0x20>)
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	2000000c 	.word	0x2000000c
 8000d40:	2000019c 	.word	0x2000019c

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <HAL_GetTick+0x10>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	2000019c 	.word	0x2000019c

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff fff0 	bl	8000d44 <HAL_GetTick>
 8000d64:	0003      	movs	r3, r0
 8000d66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	001a      	movs	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	189b      	adds	r3, r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	f7ff ffe0 	bl	8000d44 <HAL_GetTick>
 8000d84:	0002      	movs	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	2000000c 	.word	0x2000000c

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	0002      	movs	r2, r0
 8000da8:	1dfb      	adds	r3, r7, #7
 8000daa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b7f      	cmp	r3, #127	; 0x7f
 8000db2:	d809      	bhi.n	8000dc8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	001a      	movs	r2, r3
 8000dba:	231f      	movs	r3, #31
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_EnableIRQ+0x30>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	000a      	movs	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
  }
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	0002      	movs	r2, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b7f      	cmp	r3, #127	; 0x7f
 8000de8:	d828      	bhi.n	8000e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dea:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <__NVIC_SetPriority+0xd4>)
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	33c0      	adds	r3, #192	; 0xc0
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	589b      	ldr	r3, [r3, r2]
 8000dfa:	1dfa      	adds	r2, r7, #7
 8000dfc:	7812      	ldrb	r2, [r2, #0]
 8000dfe:	0011      	movs	r1, r2
 8000e00:	2203      	movs	r2, #3
 8000e02:	400a      	ands	r2, r1
 8000e04:	00d2      	lsls	r2, r2, #3
 8000e06:	21ff      	movs	r1, #255	; 0xff
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	43d2      	mvns	r2, r2
 8000e0e:	401a      	ands	r2, r3
 8000e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	019b      	lsls	r3, r3, #6
 8000e16:	22ff      	movs	r2, #255	; 0xff
 8000e18:	401a      	ands	r2, r3
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	0018      	movs	r0, r3
 8000e20:	2303      	movs	r3, #3
 8000e22:	4003      	ands	r3, r0
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e28:	481f      	ldr	r0, [pc, #124]	; (8000ea8 <__NVIC_SetPriority+0xd4>)
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	430a      	orrs	r2, r1
 8000e34:	33c0      	adds	r3, #192	; 0xc0
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e3a:	e031      	b.n	8000ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <__NVIC_SetPriority+0xd8>)
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0019      	movs	r1, r3
 8000e44:	230f      	movs	r3, #15
 8000e46:	400b      	ands	r3, r1
 8000e48:	3b08      	subs	r3, #8
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3306      	adds	r3, #6
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	18d3      	adds	r3, r2, r3
 8000e52:	3304      	adds	r3, #4
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	1dfa      	adds	r2, r7, #7
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	400a      	ands	r2, r1
 8000e60:	00d2      	lsls	r2, r2, #3
 8000e62:	21ff      	movs	r1, #255	; 0xff
 8000e64:	4091      	lsls	r1, r2
 8000e66:	000a      	movs	r2, r1
 8000e68:	43d2      	mvns	r2, r2
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	22ff      	movs	r2, #255	; 0xff
 8000e74:	401a      	ands	r2, r3
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	4003      	ands	r3, r0
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <__NVIC_SetPriority+0xd8>)
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	001c      	movs	r4, r3
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	4023      	ands	r3, r4
 8000e90:	3b08      	subs	r3, #8
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	430a      	orrs	r2, r1
 8000e96:	3306      	adds	r3, #6
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	18c3      	adds	r3, r0, r3
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b003      	add	sp, #12
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	1e5a      	subs	r2, r3, #1
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	045b      	lsls	r3, r3, #17
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d301      	bcc.n	8000ec8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e010      	b.n	8000eea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <SysTick_Config+0x44>)
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	3a01      	subs	r2, #1
 8000ece:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	425b      	negs	r3, r3
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff ff7c 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x44>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x44>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	210f      	movs	r1, #15
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	1c02      	adds	r2, r0, #0
 8000f08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	0011      	movs	r1, r2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b004      	add	sp, #16
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	0002      	movs	r2, r0
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff ff33 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff ffaf 	bl	8000eb0 <SysTick_Config>
 8000f52:	0003      	movs	r3, r0
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f64:	230f      	movs	r3, #15
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2225      	movs	r2, #37	; 0x25
 8000f70:	5c9b      	ldrb	r3, [r3, r2]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d008      	beq.n	8000f8a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2224      	movs	r2, #36	; 0x24
 8000f82:	2100      	movs	r1, #0
 8000f84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e024      	b.n	8000fd4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	210e      	movs	r1, #14
 8000f96:	438a      	bics	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	438a      	bics	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	221c      	movs	r2, #28
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4091      	lsls	r1, r2
 8000fba:	000a      	movs	r2, r1
 8000fbc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2225      	movs	r2, #37	; 0x25
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2224      	movs	r2, #36	; 0x24
 8000fca:	2100      	movs	r1, #0
 8000fcc:	5499      	strb	r1, [r3, r2]

    return status;
 8000fce:	230f      	movs	r3, #15
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b004      	add	sp, #16
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe4:	210f      	movs	r1, #15
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2225      	movs	r2, #37	; 0x25
 8000ff0:	5c9b      	ldrb	r3, [r3, r2]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d006      	beq.n	8001006 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e02a      	b.n	800105c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	210e      	movs	r1, #14
 8001012:	438a      	bics	r2, r1
 8001014:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	438a      	bics	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	221c      	movs	r2, #28
 800102c:	401a      	ands	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	2101      	movs	r1, #1
 8001034:	4091      	lsls	r1, r2
 8001036:	000a      	movs	r2, r1
 8001038:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2225      	movs	r2, #37	; 0x25
 800103e:	2101      	movs	r1, #1
 8001040:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2224      	movs	r2, #36	; 0x24
 8001046:	2100      	movs	r1, #0
 8001048:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	0010      	movs	r0, r2
 800105a:	4798      	blx	r3
    }
  }
  return status;
 800105c:	230f      	movs	r3, #15
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	781b      	ldrb	r3, [r3, #0]
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b004      	add	sp, #16
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001082:	e14f      	b.n	8001324 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4091      	lsls	r1, r2
 800108e:	000a      	movs	r2, r1
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d100      	bne.n	800109c <HAL_GPIO_Init+0x30>
 800109a:	e140      	b.n	800131e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d005      	beq.n	80010b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d130      	bne.n	8001116 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	409a      	lsls	r2, r3
 80010c2:	0013      	movs	r3, r2
 80010c4:	43da      	mvns	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	409a      	lsls	r2, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ea:	2201      	movs	r2, #1
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	2201      	movs	r2, #1
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	4013      	ands	r3, r2
 800111e:	2b03      	cmp	r3, #3
 8001120:	d017      	beq.n	8001152 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2203      	movs	r2, #3
 8001158:	4013      	ands	r3, r2
 800115a:	2b02      	cmp	r3, #2
 800115c:	d123      	bne.n	80011a6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	58d3      	ldr	r3, [r2, r3]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2207      	movs	r2, #7
 8001170:	4013      	ands	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2107      	movs	r1, #7
 800118a:	400b      	ands	r3, r1
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	6939      	ldr	r1, [r7, #16]
 80011a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2203      	movs	r2, #3
 80011c4:	401a      	ands	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	23c0      	movs	r3, #192	; 0xc0
 80011e0:	029b      	lsls	r3, r3, #10
 80011e2:	4013      	ands	r3, r2
 80011e4:	d100      	bne.n	80011e8 <HAL_GPIO_Init+0x17c>
 80011e6:	e09a      	b.n	800131e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e8:	4b54      	ldr	r3, [pc, #336]	; (800133c <HAL_GPIO_Init+0x2d0>)
 80011ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ec:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_GPIO_Init+0x2d0>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f4:	4a52      	ldr	r2, [pc, #328]	; (8001340 <HAL_GPIO_Init+0x2d4>)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	589b      	ldr	r3, [r3, r2]
 8001200:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2203      	movs	r2, #3
 8001206:	4013      	ands	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	409a      	lsls	r2, r3
 800120e:	0013      	movs	r3, r2
 8001210:	43da      	mvns	r2, r3
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	23a0      	movs	r3, #160	; 0xa0
 800121c:	05db      	lsls	r3, r3, #23
 800121e:	429a      	cmp	r2, r3
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x1ea>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a47      	ldr	r2, [pc, #284]	; (8001344 <HAL_GPIO_Init+0x2d8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x1e6>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a46      	ldr	r2, [pc, #280]	; (8001348 <HAL_GPIO_Init+0x2dc>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x1e2>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a45      	ldr	r2, [pc, #276]	; (800134c <HAL_GPIO_Init+0x2e0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x1de>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a44      	ldr	r2, [pc, #272]	; (8001350 <HAL_GPIO_Init+0x2e4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x1da>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x1ec>
 8001246:	2306      	movs	r3, #6
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x1ec>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x1ec>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x1ec>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x1ec>
 8001256:	2300      	movs	r3, #0
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	2103      	movs	r1, #3
 800125c:	400a      	ands	r2, r1
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	; (8001340 <HAL_GPIO_Init+0x2d4>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001276:	4b37      	ldr	r3, [pc, #220]	; (8001354 <HAL_GPIO_Init+0x2e8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43da      	mvns	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	025b      	lsls	r3, r3, #9
 800128e:	4013      	ands	r3, r2
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <HAL_GPIO_Init+0x2e8>)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012a0:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <HAL_GPIO_Init+0x2e8>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43da      	mvns	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	029b      	lsls	r3, r3, #10
 80012b8:	4013      	ands	r3, r2
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012c4:	4b23      	ldr	r3, [pc, #140]	; (8001354 <HAL_GPIO_Init+0x2e8>)
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_GPIO_Init+0x2e8>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43da      	mvns	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	035b      	lsls	r3, r3, #13
 80012e2:	4013      	ands	r3, r2
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_GPIO_Init+0x2e8>)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_GPIO_Init+0x2e8>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43da      	mvns	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	039b      	lsls	r3, r3, #14
 800130c:	4013      	ands	r3, r2
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_GPIO_Init+0x2e8>)
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	40da      	lsrs	r2, r3
 800132c:	1e13      	subs	r3, r2, #0
 800132e:	d000      	beq.n	8001332 <HAL_GPIO_Init+0x2c6>
 8001330:	e6a8      	b.n	8001084 <HAL_GPIO_Init+0x18>
  }
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b006      	add	sp, #24
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000
 8001344:	50000400 	.word	0x50000400
 8001348:	50000800 	.word	0x50000800
 800134c:	50000c00 	.word	0x50000c00
 8001350:	50001c00 	.word	0x50001c00
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	0008      	movs	r0, r1
 8001362:	0011      	movs	r1, r2
 8001364:	1cbb      	adds	r3, r7, #2
 8001366:	1c02      	adds	r2, r0, #0
 8001368:	801a      	strh	r2, [r3, #0]
 800136a:	1c7b      	adds	r3, r7, #1
 800136c:	1c0a      	adds	r2, r1, #0
 800136e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001370:	1c7b      	adds	r3, r7, #1
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d004      	beq.n	8001382 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001378:	1cbb      	adds	r3, r7, #2
 800137a:	881a      	ldrh	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001382:	1cbb      	adds	r3, r7, #2
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	f000 fb5a 	bl	8001a5c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a8:	4bce      	ldr	r3, [pc, #824]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	220c      	movs	r2, #12
 80013ae:	4013      	ands	r3, r2
 80013b0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b2:	4bcc      	ldr	r3, [pc, #816]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	025b      	lsls	r3, r3, #9
 80013ba:	4013      	ands	r3, r2
 80013bc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4013      	ands	r3, r2
 80013c6:	d100      	bne.n	80013ca <HAL_RCC_OscConfig+0x36>
 80013c8:	e07c      	b.n	80014c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d007      	beq.n	80013e0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	2b0c      	cmp	r3, #12
 80013d4:	d111      	bne.n	80013fa <HAL_RCC_OscConfig+0x66>
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	025b      	lsls	r3, r3, #9
 80013dc:	429a      	cmp	r2, r3
 80013de:	d10c      	bne.n	80013fa <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4bc0      	ldr	r3, [pc, #768]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	029b      	lsls	r3, r3, #10
 80013e8:	4013      	ands	r3, r2
 80013ea:	d100      	bne.n	80013ee <HAL_RCC_OscConfig+0x5a>
 80013ec:	e069      	b.n	80014c2 <HAL_RCC_OscConfig+0x12e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d165      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e330      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	025b      	lsls	r3, r3, #9
 8001402:	429a      	cmp	r2, r3
 8001404:	d107      	bne.n	8001416 <HAL_RCC_OscConfig+0x82>
 8001406:	4bb7      	ldr	r3, [pc, #732]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4bb6      	ldr	r3, [pc, #728]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0249      	lsls	r1, r1, #9
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e027      	b.n	8001466 <HAL_RCC_OscConfig+0xd2>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	23a0      	movs	r3, #160	; 0xa0
 800141c:	02db      	lsls	r3, r3, #11
 800141e:	429a      	cmp	r2, r3
 8001420:	d10e      	bne.n	8001440 <HAL_RCC_OscConfig+0xac>
 8001422:	4bb0      	ldr	r3, [pc, #704]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4baf      	ldr	r3, [pc, #700]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	02c9      	lsls	r1, r1, #11
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	4bac      	ldr	r3, [pc, #688]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4bab      	ldr	r3, [pc, #684]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	0249      	lsls	r1, r1, #9
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e012      	b.n	8001466 <HAL_RCC_OscConfig+0xd2>
 8001440:	4ba8      	ldr	r3, [pc, #672]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4ba7      	ldr	r3, [pc, #668]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001446:	49a8      	ldr	r1, [pc, #672]	; (80016e8 <HAL_RCC_OscConfig+0x354>)
 8001448:	400a      	ands	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	4ba5      	ldr	r3, [pc, #660]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	025b      	lsls	r3, r3, #9
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4ba2      	ldr	r3, [pc, #648]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4ba1      	ldr	r3, [pc, #644]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001460:	49a2      	ldr	r1, [pc, #648]	; (80016ec <HAL_RCC_OscConfig+0x358>)
 8001462:	400a      	ands	r2, r1
 8001464:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d014      	beq.n	8001498 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fc69 	bl	8000d44 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fc64 	bl	8000d44 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e2e8      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800148a:	4b96      	ldr	r3, [pc, #600]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	029b      	lsls	r3, r3, #10
 8001492:	4013      	ands	r3, r2
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0xe4>
 8001496:	e015      	b.n	80014c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fc54 	bl	8000d44 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a2:	f7ff fc4f 	bl	8000d44 <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b64      	cmp	r3, #100	; 0x64
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e2d3      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014b4:	4b8b      	ldr	r3, [pc, #556]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	029b      	lsls	r3, r3, #10
 80014bc:	4013      	ands	r3, r2
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x10e>
 80014c0:	e000      	b.n	80014c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d100      	bne.n	80014d0 <HAL_RCC_OscConfig+0x13c>
 80014ce:	e08b      	b.n	80015e8 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	2b0c      	cmp	r3, #12
 80014e0:	d13e      	bne.n	8001560 <HAL_RCC_OscConfig+0x1cc>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d13b      	bne.n	8001560 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014e8:	4b7e      	ldr	r3, [pc, #504]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2204      	movs	r2, #4
 80014ee:	4013      	ands	r3, r2
 80014f0:	d004      	beq.n	80014fc <HAL_RCC_OscConfig+0x168>
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e2af      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b79      	ldr	r3, [pc, #484]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4a7b      	ldr	r2, [pc, #492]	; (80016f0 <HAL_RCC_OscConfig+0x35c>)
 8001502:	4013      	ands	r3, r2
 8001504:	0019      	movs	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	021a      	lsls	r2, r3, #8
 800150c:	4b75      	ldr	r3, [pc, #468]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800150e:	430a      	orrs	r2, r1
 8001510:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001512:	4b74      	ldr	r3, [pc, #464]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2209      	movs	r2, #9
 8001518:	4393      	bics	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	4b71      	ldr	r3, [pc, #452]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001524:	f000 fbe8 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8001528:	0001      	movs	r1, r0
 800152a:	4b6e      	ldr	r3, [pc, #440]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	220f      	movs	r2, #15
 8001532:	4013      	ands	r3, r2
 8001534:	4a6f      	ldr	r2, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x360>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	000a      	movs	r2, r1
 800153a:	40da      	lsrs	r2, r3
 800153c:	4b6e      	ldr	r3, [pc, #440]	; (80016f8 <HAL_RCC_OscConfig+0x364>)
 800153e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001540:	4b6e      	ldr	r3, [pc, #440]	; (80016fc <HAL_RCC_OscConfig+0x368>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2513      	movs	r5, #19
 8001546:	197c      	adds	r4, r7, r5
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff fbb5 	bl	8000cb8 <HAL_InitTick>
 800154e:	0003      	movs	r3, r0
 8001550:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001552:	197b      	adds	r3, r7, r5
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d046      	beq.n	80015e8 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 800155a:	197b      	adds	r3, r7, r5
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	e27d      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d027      	beq.n	80015b6 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2209      	movs	r2, #9
 800156c:	4393      	bics	r3, r2
 800156e:	0019      	movs	r1, r3
 8001570:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fbe4 	bl	8000d44 <HAL_GetTick>
 800157c:	0003      	movs	r3, r0
 800157e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fbdf 	bl	8000d44 <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e263      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2204      	movs	r2, #4
 800159a:	4013      	ands	r3, r2
 800159c:	d0f1      	beq.n	8001582 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a53      	ldr	r2, [pc, #332]	; (80016f0 <HAL_RCC_OscConfig+0x35c>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	021a      	lsls	r2, r3, #8
 80015ae:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80015b0:	430a      	orrs	r2, r1
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	e018      	b.n	80015e8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80015bc:	2101      	movs	r1, #1
 80015be:	438a      	bics	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fbbf 	bl	8000d44 <HAL_GetTick>
 80015c6:	0003      	movs	r3, r0
 80015c8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff fbba 	bl	8000d44 <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e23e      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015de:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2204      	movs	r2, #4
 80015e4:	4013      	ands	r3, r2
 80015e6:	d1f1      	bne.n	80015cc <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2210      	movs	r2, #16
 80015ee:	4013      	ands	r3, r2
 80015f0:	d100      	bne.n	80015f4 <HAL_RCC_OscConfig+0x260>
 80015f2:	e0a1      	b.n	8001738 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d140      	bne.n	800167c <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015fa:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4013      	ands	r3, r2
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x27e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e224      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a3a      	ldr	r2, [pc, #232]	; (8001700 <HAL_RCC_OscConfig+0x36c>)
 8001618:	4013      	ands	r3, r2
 800161a:	0019      	movs	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1a      	ldr	r2, [r3, #32]
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	0a19      	lsrs	r1, r3, #8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	061a      	lsls	r2, r3, #24
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	0b5b      	lsrs	r3, r3, #13
 8001640:	3301      	adds	r3, #1
 8001642:	2280      	movs	r2, #128	; 0x80
 8001644:	0212      	lsls	r2, r2, #8
 8001646:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001648:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	210f      	movs	r1, #15
 8001650:	400b      	ands	r3, r1
 8001652:	4928      	ldr	r1, [pc, #160]	; (80016f4 <HAL_RCC_OscConfig+0x360>)
 8001654:	5ccb      	ldrb	r3, [r1, r3]
 8001656:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <HAL_RCC_OscConfig+0x364>)
 800165a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_RCC_OscConfig+0x368>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2513      	movs	r5, #19
 8001662:	197c      	adds	r4, r7, r5
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff fb27 	bl	8000cb8 <HAL_InitTick>
 800166a:	0003      	movs	r3, r0
 800166c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800166e:	197b      	adds	r3, r7, r5
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d060      	beq.n	8001738 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8001676:	197b      	adds	r3, r7, r5
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	e1ef      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d03f      	beq.n	8001704 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	0049      	lsls	r1, r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff fb57 	bl	8000d44 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169c:	f7ff fb52 	bl	8000d44 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1d6      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4013      	ands	r3, r2
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_RCC_OscConfig+0x36c>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	0019      	movs	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80016ca:	430a      	orrs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	0a19      	lsrs	r1, r3, #8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	061a      	lsls	r2, r3, #24
 80016dc:	4b01      	ldr	r3, [pc, #4]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	e029      	b.n	8001738 <HAL_RCC_OscConfig+0x3a4>
 80016e4:	40021000 	.word	0x40021000
 80016e8:	fffeffff 	.word	0xfffeffff
 80016ec:	fffbffff 	.word	0xfffbffff
 80016f0:	ffffe0ff 	.word	0xffffe0ff
 80016f4:	08003718 	.word	0x08003718
 80016f8:	20000004 	.word	0x20000004
 80016fc:	20000008 	.word	0x20000008
 8001700:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001704:	4bbe      	ldr	r3, [pc, #760]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4bbd      	ldr	r3, [pc, #756]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800170a:	49be      	ldr	r1, [pc, #760]	; (8001a04 <HAL_RCC_OscConfig+0x670>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fb18 	bl	8000d44 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171a:	f7ff fb13 	bl	8000d44 <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e197      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800172c:	4bb4      	ldr	r3, [pc, #720]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2208      	movs	r2, #8
 800173e:	4013      	ands	r3, r2
 8001740:	d036      	beq.n	80017b0 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d019      	beq.n	800177e <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174a:	4bad      	ldr	r3, [pc, #692]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800174c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800174e:	4bac      	ldr	r3, [pc, #688]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001750:	2101      	movs	r1, #1
 8001752:	430a      	orrs	r2, r1
 8001754:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff faf5 	bl	8000d44 <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff faf0 	bl	8000d44 <HAL_GetTick>
 8001764:	0002      	movs	r2, r0
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e174      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001772:	4ba3      	ldr	r3, [pc, #652]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001776:	2202      	movs	r2, #2
 8001778:	4013      	ands	r3, r2
 800177a:	d0f1      	beq.n	8001760 <HAL_RCC_OscConfig+0x3cc>
 800177c:	e018      	b.n	80017b0 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177e:	4ba0      	ldr	r3, [pc, #640]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001782:	4b9f      	ldr	r3, [pc, #636]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001784:	2101      	movs	r1, #1
 8001786:	438a      	bics	r2, r1
 8001788:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff fadb 	bl	8000d44 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fad6 	bl	8000d44 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e15a      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017a6:	4b96      	ldr	r3, [pc, #600]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80017a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017aa:	2202      	movs	r2, #2
 80017ac:	4013      	ands	r3, r2
 80017ae:	d1f1      	bne.n	8001794 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2204      	movs	r2, #4
 80017b6:	4013      	ands	r3, r2
 80017b8:	d100      	bne.n	80017bc <HAL_RCC_OscConfig+0x428>
 80017ba:	e0ae      	b.n	800191a <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017bc:	2027      	movs	r0, #39	; 0x27
 80017be:	183b      	adds	r3, r7, r0
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c4:	4b8e      	ldr	r3, [pc, #568]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80017c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	055b      	lsls	r3, r3, #21
 80017cc:	4013      	ands	r3, r2
 80017ce:	d109      	bne.n	80017e4 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d0:	4b8b      	ldr	r3, [pc, #556]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80017d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017d4:	4b8a      	ldr	r3, [pc, #552]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	0549      	lsls	r1, r1, #21
 80017da:	430a      	orrs	r2, r1
 80017dc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017de:	183b      	adds	r3, r7, r0
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <HAL_RCC_OscConfig+0x674>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4013      	ands	r3, r2
 80017ee:	d11a      	bne.n	8001826 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f0:	4b85      	ldr	r3, [pc, #532]	; (8001a08 <HAL_RCC_OscConfig+0x674>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b84      	ldr	r3, [pc, #528]	; (8001a08 <HAL_RCC_OscConfig+0x674>)
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	0049      	lsls	r1, r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fe:	f7ff faa1 	bl	8000d44 <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001808:	f7ff fa9c 	bl	8000d44 <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e120      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181a:	4b7b      	ldr	r3, [pc, #492]	; (8001a08 <HAL_RCC_OscConfig+0x674>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4013      	ands	r3, r2
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	429a      	cmp	r2, r3
 8001830:	d107      	bne.n	8001842 <HAL_RCC_OscConfig+0x4ae>
 8001832:	4b73      	ldr	r3, [pc, #460]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001836:	4b72      	ldr	r3, [pc, #456]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	0049      	lsls	r1, r1, #1
 800183c:	430a      	orrs	r2, r1
 800183e:	651a      	str	r2, [r3, #80]	; 0x50
 8001840:	e031      	b.n	80018a6 <HAL_RCC_OscConfig+0x512>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x4d0>
 800184a:	4b6d      	ldr	r3, [pc, #436]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800184c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800184e:	4b6c      	ldr	r3, [pc, #432]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001850:	496c      	ldr	r1, [pc, #432]	; (8001a04 <HAL_RCC_OscConfig+0x670>)
 8001852:	400a      	ands	r2, r1
 8001854:	651a      	str	r2, [r3, #80]	; 0x50
 8001856:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800185a:	4b69      	ldr	r3, [pc, #420]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800185c:	496b      	ldr	r1, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x678>)
 800185e:	400a      	ands	r2, r1
 8001860:	651a      	str	r2, [r3, #80]	; 0x50
 8001862:	e020      	b.n	80018a6 <HAL_RCC_OscConfig+0x512>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	23a0      	movs	r3, #160	; 0xa0
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	429a      	cmp	r2, r3
 800186e:	d10e      	bne.n	800188e <HAL_RCC_OscConfig+0x4fa>
 8001870:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001872:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001874:	4b62      	ldr	r3, [pc, #392]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	00c9      	lsls	r1, r1, #3
 800187a:	430a      	orrs	r2, r1
 800187c:	651a      	str	r2, [r3, #80]	; 0x50
 800187e:	4b60      	ldr	r3, [pc, #384]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001882:	4b5f      	ldr	r3, [pc, #380]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0049      	lsls	r1, r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	651a      	str	r2, [r3, #80]	; 0x50
 800188c:	e00b      	b.n	80018a6 <HAL_RCC_OscConfig+0x512>
 800188e:	4b5c      	ldr	r3, [pc, #368]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001892:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001894:	495b      	ldr	r1, [pc, #364]	; (8001a04 <HAL_RCC_OscConfig+0x670>)
 8001896:	400a      	ands	r2, r1
 8001898:	651a      	str	r2, [r3, #80]	; 0x50
 800189a:	4b59      	ldr	r3, [pc, #356]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800189c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800189e:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80018a0:	495a      	ldr	r1, [pc, #360]	; (8001a0c <HAL_RCC_OscConfig+0x678>)
 80018a2:	400a      	ands	r2, r1
 80018a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d015      	beq.n	80018da <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff fa49 	bl	8000d44 <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018b6:	e009      	b.n	80018cc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7ff fa44 	bl	8000d44 <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	4a53      	ldr	r2, [pc, #332]	; (8001a10 <HAL_RCC_OscConfig+0x67c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e0c7      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018cc:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80018ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d0ef      	beq.n	80018b8 <HAL_RCC_OscConfig+0x524>
 80018d8:	e014      	b.n	8001904 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018da:	f7ff fa33 	bl	8000d44 <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018e2:	e009      	b.n	80018f8 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff fa2e 	bl	8000d44 <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	4a48      	ldr	r2, [pc, #288]	; (8001a10 <HAL_RCC_OscConfig+0x67c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e0b1      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018f8:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80018fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4013      	ands	r3, r2
 8001902:	d1ef      	bne.n	80018e4 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001904:	2327      	movs	r3, #39	; 0x27
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190e:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001914:	493f      	ldr	r1, [pc, #252]	; (8001a14 <HAL_RCC_OscConfig+0x680>)
 8001916:	400a      	ands	r2, r1
 8001918:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <HAL_RCC_OscConfig+0x590>
 8001922:	e09a      	b.n	8001a5a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	2b0c      	cmp	r3, #12
 8001928:	d064      	beq.n	80019f4 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	2b02      	cmp	r3, #2
 8001930:	d145      	bne.n	80019be <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001938:	4937      	ldr	r1, [pc, #220]	; (8001a18 <HAL_RCC_OscConfig+0x684>)
 800193a:	400a      	ands	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff fa01 	bl	8000d44 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff f9fc 	bl	8000d44 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e080      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800195a:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	049b      	lsls	r3, r3, #18
 8001962:	4013      	ands	r3, r2
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	4a2c      	ldr	r2, [pc, #176]	; (8001a1c <HAL_RCC_OscConfig+0x688>)
 800196c:	4013      	ands	r3, r2
 800196e:	0019      	movs	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	431a      	orrs	r2, r3
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001982:	430a      	orrs	r2, r1
 8001984:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001986:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800198c:	2180      	movs	r1, #128	; 0x80
 800198e:	0449      	lsls	r1, r1, #17
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff f9d6 	bl	8000d44 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff f9d1 	bl	8000d44 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e055      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	049b      	lsls	r3, r3, #18
 80019b8:	4013      	ands	r3, r2
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x60a>
 80019bc:	e04d      	b.n	8001a5a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80019c4:	4914      	ldr	r1, [pc, #80]	; (8001a18 <HAL_RCC_OscConfig+0x684>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff f9bb 	bl	8000d44 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff f9b6 	bl	8000d44 <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e03a      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	049b      	lsls	r3, r3, #18
 80019ee:	4013      	ands	r3, r2
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x640>
 80019f2:	e032      	b.n	8001a5a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d111      	bne.n	8001a20 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e02d      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
 8001a00:	40021000 	.word	0x40021000
 8001a04:	fffffeff 	.word	0xfffffeff
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	fffffbff 	.word	0xfffffbff
 8001a10:	00001388 	.word	0x00001388
 8001a14:	efffffff 	.word	0xefffffff
 8001a18:	feffffff 	.word	0xfeffffff
 8001a1c:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_RCC_OscConfig+0x6d0>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	025b      	lsls	r3, r3, #9
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d10f      	bne.n	8001a56 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	23f0      	movs	r3, #240	; 0xf0
 8001a3a:	039b      	lsls	r3, r3, #14
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	23c0      	movs	r3, #192	; 0xc0
 8001a4a:	041b      	lsls	r3, r3, #16
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b00a      	add	sp, #40	; 0x28
 8001a62:	bdb0      	pop	{r4, r5, r7, pc}
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e128      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b96      	ldr	r3, [pc, #600]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d91e      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b93      	ldr	r3, [pc, #588]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4393      	bics	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	4b90      	ldr	r3, [pc, #576]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff f952 	bl	8000d44 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa6:	f7ff f94d 	bl	8000d44 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a8a      	ldr	r2, [pc, #552]	; (8001cdc <HAL_RCC_ClockConfig+0x274>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e109      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b87      	ldr	r3, [pc, #540]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2202      	movs	r2, #2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad2:	4b83      	ldr	r3, [pc, #524]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	22f0      	movs	r2, #240	; 0xf0
 8001ad8:	4393      	bics	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d100      	bne.n	8001af2 <HAL_RCC_ClockConfig+0x8a>
 8001af0:	e089      	b.n	8001c06 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001afa:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	029b      	lsls	r3, r3, #10
 8001b02:	4013      	ands	r3, r2
 8001b04:	d120      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0e1      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b12:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	049b      	lsls	r3, r3, #18
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d114      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0d5      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d106      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b2a:	4b6d      	ldr	r3, [pc, #436]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2204      	movs	r2, #4
 8001b30:	4013      	ands	r3, r2
 8001b32:	d109      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0ca      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b38:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0c2      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b48:	4b65      	ldr	r3, [pc, #404]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	4393      	bics	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4b62      	ldr	r3, [pc, #392]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b5c:	f7ff f8f2 	bl	8000d44 <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d111      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6e:	f7ff f8e9 	bl	8000d44 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <HAL_RCC_ClockConfig+0x274>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0a5      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b82:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	220c      	movs	r2, #12
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d1ef      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x106>
 8001b8e:	e03a      	b.n	8001c06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d111      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b98:	e009      	b.n	8001bae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9a:	f7ff f8d3 	bl	8000d44 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	4a4d      	ldr	r2, [pc, #308]	; (8001cdc <HAL_RCC_ClockConfig+0x274>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e08f      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bae:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d1ef      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x132>
 8001bba:	e024      	b.n	8001c06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d11b      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc4:	e009      	b.n	8001bda <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc6:	f7ff f8bd 	bl	8000d44 <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	4a42      	ldr	r2, [pc, #264]	; (8001cdc <HAL_RCC_ClockConfig+0x274>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e079      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bda:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	220c      	movs	r2, #12
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d1ef      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0x15e>
 8001be6:	e00e      	b.n	8001c06 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be8:	f7ff f8ac 	bl	8000d44 <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	4a3a      	ldr	r2, [pc, #232]	; (8001cdc <HAL_RCC_ClockConfig+0x274>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e068      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bfc:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	220c      	movs	r2, #12
 8001c02:	4013      	ands	r3, r2
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d21e      	bcs.n	8001c52 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c14:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4393      	bics	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c26:	f7ff f88d 	bl	8000d44 <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	e009      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c30:	f7ff f888 	bl	8000d44 <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	4a28      	ldr	r2, [pc, #160]	; (8001cdc <HAL_RCC_ClockConfig+0x274>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e044      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d1ee      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2204      	movs	r2, #4
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d009      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c5c:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <HAL_RCC_ClockConfig+0x27c>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2208      	movs	r2, #8
 8001c76:	4013      	ands	r3, r2
 8001c78:	d00a      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <HAL_RCC_ClockConfig+0x280>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	00da      	lsls	r2, r3, #3
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c90:	f000 f832 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8001c94:	0001      	movs	r1, r0
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_RCC_ClockConfig+0x284>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	000a      	movs	r2, r1
 8001ca6:	40da      	lsrs	r2, r3
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_RCC_ClockConfig+0x288>)
 8001caa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_RCC_ClockConfig+0x28c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	250b      	movs	r5, #11
 8001cb2:	197c      	adds	r4, r7, r5
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7fe ffff 	bl	8000cb8 <HAL_InitTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001cbe:	197b      	adds	r3, r7, r5
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001cc6:	197b      	adds	r3, r7, r5
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	e000      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b004      	add	sp, #16
 8001cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	40022000 	.word	0x40022000
 8001cdc:	00001388 	.word	0x00001388
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	fffff8ff 	.word	0xfffff8ff
 8001ce8:	ffffc7ff 	.word	0xffffc7ff
 8001cec:	08003718 	.word	0x08003718
 8001cf0:	20000004 	.word	0x20000004
 8001cf4:	20000008 	.word	0x20000008

08001cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf8:	b5b0      	push	{r4, r5, r7, lr}
 8001cfa:	b08e      	sub	sp, #56	; 0x38
 8001cfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001cfe:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d06:	230c      	movs	r3, #12
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d014      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x40>
 8001d0e:	d900      	bls.n	8001d12 <HAL_RCC_GetSysClockFreq+0x1a>
 8001d10:	e07b      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x112>
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d002      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x24>
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d00b      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d1a:	e076      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d1c:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2210      	movs	r2, #16
 8001d22:	4013      	ands	r3, r2
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d26:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d2a:	e07c      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001d2c:	4b42      	ldr	r3, [pc, #264]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d30:	e079      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d32:	4b42      	ldr	r3, [pc, #264]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x144>)
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d36:	e076      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	0c9a      	lsrs	r2, r3, #18
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	401a      	ands	r2, r3
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x148>)
 8001d42:	5c9b      	ldrb	r3, [r3, r2]
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	0d9a      	lsrs	r2, r3, #22
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	3301      	adds	r3, #1
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d52:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	025b      	lsls	r3, r3, #9
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d01a      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	4a35      	ldr	r2, [pc, #212]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x144>)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	69b8      	ldr	r0, [r7, #24]
 8001d6c:	69f9      	ldr	r1, [r7, #28]
 8001d6e:	f7fe fa7f 	bl	8000270 <__aeabi_lmul>
 8001d72:	0002      	movs	r2, r0
 8001d74:	000b      	movs	r3, r1
 8001d76:	0010      	movs	r0, r2
 8001d78:	0019      	movs	r1, r3
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f7fe fa53 	bl	8000230 <__aeabi_uldivmod>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	000b      	movs	r3, r1
 8001d8e:	0013      	movs	r3, r2
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
 8001d92:	e037      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d94:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2210      	movs	r2, #16
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d01a      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001da8:	2300      	movs	r3, #0
 8001daa:	68b8      	ldr	r0, [r7, #8]
 8001dac:	68f9      	ldr	r1, [r7, #12]
 8001dae:	f7fe fa5f 	bl	8000270 <__aeabi_lmul>
 8001db2:	0002      	movs	r2, r0
 8001db4:	000b      	movs	r3, r1
 8001db6:	0010      	movs	r0, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f7fe fa33 	bl	8000230 <__aeabi_uldivmod>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	000b      	movs	r3, r1
 8001dce:	0013      	movs	r3, r2
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd2:	e017      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	2300      	movs	r3, #0
 8001dda:	0019      	movs	r1, r3
 8001ddc:	4a16      	ldr	r2, [pc, #88]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x140>)
 8001dde:	2300      	movs	r3, #0
 8001de0:	f7fe fa46 	bl	8000270 <__aeabi_lmul>
 8001de4:	0002      	movs	r2, r0
 8001de6:	000b      	movs	r3, r1
 8001de8:	0010      	movs	r0, r2
 8001dea:	0019      	movs	r1, r3
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	001c      	movs	r4, r3
 8001df0:	2300      	movs	r3, #0
 8001df2:	001d      	movs	r5, r3
 8001df4:	0022      	movs	r2, r4
 8001df6:	002b      	movs	r3, r5
 8001df8:	f7fe fa1a 	bl	8000230 <__aeabi_uldivmod>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	000b      	movs	r3, r1
 8001e00:	0013      	movs	r3, r2
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e08:	e00d      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	0b5b      	lsrs	r3, r3, #13
 8001e10:	2207      	movs	r2, #7
 8001e12:	4013      	ands	r3, r2
 8001e14:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	2280      	movs	r2, #128	; 0x80
 8001e1c:	0212      	lsls	r2, r2, #8
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	0013      	movs	r3, r2
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e24:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b00e      	add	sp, #56	; 0x38
 8001e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	003d0900 	.word	0x003d0900
 8001e38:	00f42400 	.word	0x00f42400
 8001e3c:	007a1200 	.word	0x007a1200
 8001e40:	08003730 	.word	0x08003730

08001e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e5c:	f7ff fff2 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e60:	0001      	movs	r1, r0
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	2207      	movs	r2, #7
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	40d9      	lsrs	r1, r3
 8001e72:	000b      	movs	r3, r1
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	08003728 	.word	0x08003728

08001e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e88:	f7ff ffdc 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e8c:	0001      	movs	r1, r0
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	0adb      	lsrs	r3, r3, #11
 8001e94:	2207      	movs	r2, #7
 8001e96:	4013      	ands	r3, r2
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	40d9      	lsrs	r1, r3
 8001e9e:	000b      	movs	r3, r1
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08003728 	.word	0x08003728

08001eb0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001eb8:	2017      	movs	r0, #23
 8001eba:	183b      	adds	r3, r7, r0
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d100      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001eca:	e0c2      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ecc:	4b89      	ldr	r3, [pc, #548]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	055b      	lsls	r3, r3, #21
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d109      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4b86      	ldr	r3, [pc, #536]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001edc:	4b85      	ldr	r3, [pc, #532]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	0549      	lsls	r1, r1, #21
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ee6:	183b      	adds	r3, r7, r0
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	4b82      	ldr	r3, [pc, #520]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d11a      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef8:	4b7f      	ldr	r3, [pc, #508]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b7e      	ldr	r3, [pc, #504]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	0049      	lsls	r1, r1, #1
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f06:	f7fe ff1d 	bl	8000d44 <HAL_GetTick>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	e008      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f10:	f7fe ff18 	bl	8000d44 <HAL_GetTick>
 8001f14:	0002      	movs	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e0e3      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b75      	ldr	r3, [pc, #468]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f2e:	4b71      	ldr	r3, [pc, #452]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	23c0      	movs	r3, #192	; 0xc0
 8001f34:	039b      	lsls	r3, r3, #14
 8001f36:	4013      	ands	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	23c0      	movs	r3, #192	; 0xc0
 8001f40:	039b      	lsls	r3, r3, #14
 8001f42:	4013      	ands	r3, r2
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d013      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	23c0      	movs	r3, #192	; 0xc0
 8001f50:	029b      	lsls	r3, r3, #10
 8001f52:	401a      	ands	r2, r3
 8001f54:	23c0      	movs	r3, #192	; 0xc0
 8001f56:	029b      	lsls	r3, r3, #10
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d10a      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f5c:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	029b      	lsls	r3, r3, #10
 8001f64:	401a      	ands	r2, r3
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	029b      	lsls	r3, r3, #10
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0bb      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f72:	4b60      	ldr	r3, [pc, #384]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f76:	23c0      	movs	r3, #192	; 0xc0
 8001f78:	029b      	lsls	r3, r3, #10
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d03b      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	23c0      	movs	r3, #192	; 0xc0
 8001f8a:	029b      	lsls	r3, r3, #10
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d033      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d02e      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f9e:	4b55      	ldr	r3, [pc, #340]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa2:	4a56      	ldr	r2, [pc, #344]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fa8:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001faa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fac:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	0309      	lsls	r1, r1, #12
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb6:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001fb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fba:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001fbc:	4950      	ldr	r1, [pc, #320]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001fc2:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d014      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe feb7 	bl	8000d44 <HAL_GetTick>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fda:	e009      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fdc:	f7fe feb2 	bl	8000d44 <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	4a47      	ldr	r2, [pc, #284]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e07c      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ff0:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001ff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d0ef      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	23c0      	movs	r3, #192	; 0xc0
 8002002:	029b      	lsls	r3, r3, #10
 8002004:	401a      	ands	r2, r3
 8002006:	23c0      	movs	r3, #192	; 0xc0
 8002008:	029b      	lsls	r3, r3, #10
 800200a:	429a      	cmp	r2, r3
 800200c:	d10c      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800200e:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a3d      	ldr	r2, [pc, #244]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002014:	4013      	ands	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	23c0      	movs	r3, #192	; 0xc0
 800201e:	039b      	lsls	r3, r3, #14
 8002020:	401a      	ands	r2, r3
 8002022:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800202a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	23c0      	movs	r3, #192	; 0xc0
 8002032:	029b      	lsls	r3, r3, #10
 8002034:	401a      	ands	r2, r3
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002038:	430a      	orrs	r2, r1
 800203a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800203c:	2317      	movs	r3, #23
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d105      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002046:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800204c:	492f      	ldr	r1, [pc, #188]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800204e:	400a      	ands	r2, r1
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2201      	movs	r2, #1
 8002058:	4013      	ands	r3, r2
 800205a:	d009      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	2203      	movs	r2, #3
 8002062:	4393      	bics	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800206c:	430a      	orrs	r2, r1
 800206e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d009      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	220c      	movs	r2, #12
 8002080:	4393      	bics	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800208a:	430a      	orrs	r2, r1
 800208c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2204      	movs	r2, #4
 8002094:	4013      	ands	r3, r2
 8002096:	d009      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	4013      	ands	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020a8:	430a      	orrs	r2, r1
 80020aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2208      	movs	r2, #8
 80020b2:	4013      	ands	r3, r2
 80020b4:	d009      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	4a16      	ldr	r2, [pc, #88]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	4013      	ands	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b006      	add	sp, #24
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40007000 	.word	0x40007000
 80020fc:	fffcffff 	.word	0xfffcffff
 8002100:	fff7ffff 	.word	0xfff7ffff
 8002104:	00001388 	.word	0x00001388
 8002108:	ffcfffff 	.word	0xffcfffff
 800210c:	efffffff 	.word	0xefffffff
 8002110:	fffff3ff 	.word	0xfffff3ff
 8002114:	ffffcfff 	.word	0xffffcfff
 8002118:	fff3ffff 	.word	0xfff3ffff

0800211c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e044      	b.n	80021b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002132:	2b00      	cmp	r3, #0
 8002134:	d107      	bne.n	8002146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2274      	movs	r2, #116	; 0x74
 800213a:	2100      	movs	r1, #0
 800213c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f7fe fc91 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2224      	movs	r2, #36	; 0x24
 800214a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2101      	movs	r1, #1
 8002158:	438a      	bics	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0018      	movs	r0, r3
 8002160:	f000 fcbc 	bl	8002adc <UART_SetConfig>
 8002164:	0003      	movs	r3, r0
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e024      	b.n	80021b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	0018      	movs	r0, r3
 800217a:	f000 ff33 	bl	8002fe4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	490d      	ldr	r1, [pc, #52]	; (80021c0 <HAL_UART_Init+0xa4>)
 800218a:	400a      	ands	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	212a      	movs	r1, #42	; 0x2a
 800219a:	438a      	bics	r2, r1
 800219c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f000 ffcb 	bl	800314c <UART_CheckIdleState>
 80021b6:	0003      	movs	r3, r0
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b002      	add	sp, #8
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	ffffb7ff 	.word	0xffffb7ff

080021c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	1dbb      	adds	r3, r7, #6
 80021d2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d000      	beq.n	80021de <HAL_UART_Transmit+0x1a>
 80021dc:	e095      	b.n	800230a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_UART_Transmit+0x28>
 80021e4:	1dbb      	adds	r3, r7, #6
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e08d      	b.n	800230c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	015b      	lsls	r3, r3, #5
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d109      	bne.n	8002210 <HAL_UART_Transmit+0x4c>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2201      	movs	r2, #1
 8002208:	4013      	ands	r3, r2
 800220a:	d001      	beq.n	8002210 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e07d      	b.n	800230c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2274      	movs	r2, #116	; 0x74
 8002214:	5c9b      	ldrb	r3, [r3, r2]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_UART_Transmit+0x5a>
 800221a:	2302      	movs	r3, #2
 800221c:	e076      	b.n	800230c <HAL_UART_Transmit+0x148>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2274      	movs	r2, #116	; 0x74
 8002222:	2101      	movs	r1, #1
 8002224:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	2100      	movs	r1, #0
 800222c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2221      	movs	r2, #33	; 0x21
 8002232:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002234:	f7fe fd86 	bl	8000d44 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1dba      	adds	r2, r7, #6
 8002240:	2150      	movs	r1, #80	; 0x50
 8002242:	8812      	ldrh	r2, [r2, #0]
 8002244:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1dba      	adds	r2, r7, #6
 800224a:	2152      	movs	r1, #82	; 0x52
 800224c:	8812      	ldrh	r2, [r2, #0]
 800224e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	015b      	lsls	r3, r3, #5
 8002258:	429a      	cmp	r2, r3
 800225a:	d108      	bne.n	800226e <HAL_UART_Transmit+0xaa>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d104      	bne.n	800226e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	e003      	b.n	8002276 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2274      	movs	r2, #116	; 0x74
 800227a:	2100      	movs	r1, #0
 800227c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800227e:	e02c      	b.n	80022da <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	0013      	movs	r3, r2
 800228a:	2200      	movs	r2, #0
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	f000 ffa5 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 8002292:	1e03      	subs	r3, r0, #0
 8002294:	d001      	beq.n	800229a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e038      	b.n	800230c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10b      	bne.n	80022b8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	001a      	movs	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	05d2      	lsls	r2, r2, #23
 80022ac:	0dd2      	lsrs	r2, r2, #23
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	3302      	adds	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	e007      	b.n	80022c8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2252      	movs	r2, #82	; 0x52
 80022cc:	5a9b      	ldrh	r3, [r3, r2]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b299      	uxth	r1, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2252      	movs	r2, #82	; 0x52
 80022d8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2252      	movs	r2, #82	; 0x52
 80022de:	5a9b      	ldrh	r3, [r3, r2]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1cc      	bne.n	8002280 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	0013      	movs	r3, r2
 80022f0:	2200      	movs	r2, #0
 80022f2:	2140      	movs	r1, #64	; 0x40
 80022f4:	f000 ff72 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 80022f8:	1e03      	subs	r3, r0, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e005      	b.n	800230c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800230a:	2302      	movs	r3, #2
  }
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b008      	add	sp, #32
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	1dbb      	adds	r3, r7, #6
 8002322:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002328:	2b20      	cmp	r3, #32
 800232a:	d000      	beq.n	800232e <HAL_UART_Receive+0x1a>
 800232c:	e0d9      	b.n	80024e2 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_UART_Receive+0x28>
 8002334:	1dbb      	adds	r3, r7, #6
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0d1      	b.n	80024e4 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	015b      	lsls	r3, r3, #5
 8002348:	429a      	cmp	r2, r3
 800234a:	d109      	bne.n	8002360 <HAL_UART_Receive+0x4c>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2201      	movs	r2, #1
 8002358:	4013      	ands	r3, r2
 800235a:	d001      	beq.n	8002360 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0c1      	b.n	80024e4 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2274      	movs	r2, #116	; 0x74
 8002364:	5c9b      	ldrb	r3, [r3, r2]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_UART_Receive+0x5a>
 800236a:	2302      	movs	r3, #2
 800236c:	e0ba      	b.n	80024e4 <HAL_UART_Receive+0x1d0>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2274      	movs	r2, #116	; 0x74
 8002372:	2101      	movs	r1, #1
 8002374:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2280      	movs	r2, #128	; 0x80
 800237a:	2100      	movs	r1, #0
 800237c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2222      	movs	r2, #34	; 0x22
 8002382:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800238a:	f7fe fcdb 	bl	8000d44 <HAL_GetTick>
 800238e:	0003      	movs	r3, r0
 8002390:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1dba      	adds	r2, r7, #6
 8002396:	2158      	movs	r1, #88	; 0x58
 8002398:	8812      	ldrh	r2, [r2, #0]
 800239a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1dba      	adds	r2, r7, #6
 80023a0:	215a      	movs	r1, #90	; 0x5a
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	015b      	lsls	r3, r3, #5
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d10d      	bne.n	80023ce <HAL_UART_Receive+0xba>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d104      	bne.n	80023c4 <HAL_UART_Receive+0xb0>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	225c      	movs	r2, #92	; 0x5c
 80023be:	494b      	ldr	r1, [pc, #300]	; (80024ec <HAL_UART_Receive+0x1d8>)
 80023c0:	5299      	strh	r1, [r3, r2]
 80023c2:	e02e      	b.n	8002422 <HAL_UART_Receive+0x10e>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	225c      	movs	r2, #92	; 0x5c
 80023c8:	21ff      	movs	r1, #255	; 0xff
 80023ca:	5299      	strh	r1, [r3, r2]
 80023cc:	e029      	b.n	8002422 <HAL_UART_Receive+0x10e>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10d      	bne.n	80023f2 <HAL_UART_Receive+0xde>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d104      	bne.n	80023e8 <HAL_UART_Receive+0xd4>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	225c      	movs	r2, #92	; 0x5c
 80023e2:	21ff      	movs	r1, #255	; 0xff
 80023e4:	5299      	strh	r1, [r3, r2]
 80023e6:	e01c      	b.n	8002422 <HAL_UART_Receive+0x10e>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	225c      	movs	r2, #92	; 0x5c
 80023ec:	217f      	movs	r1, #127	; 0x7f
 80023ee:	5299      	strh	r1, [r3, r2]
 80023f0:	e017      	b.n	8002422 <HAL_UART_Receive+0x10e>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	055b      	lsls	r3, r3, #21
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d10d      	bne.n	800241a <HAL_UART_Receive+0x106>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <HAL_UART_Receive+0xfc>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	225c      	movs	r2, #92	; 0x5c
 800240a:	217f      	movs	r1, #127	; 0x7f
 800240c:	5299      	strh	r1, [r3, r2]
 800240e:	e008      	b.n	8002422 <HAL_UART_Receive+0x10e>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	225c      	movs	r2, #92	; 0x5c
 8002414:	213f      	movs	r1, #63	; 0x3f
 8002416:	5299      	strh	r1, [r3, r2]
 8002418:	e003      	b.n	8002422 <HAL_UART_Receive+0x10e>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	225c      	movs	r2, #92	; 0x5c
 800241e:	2100      	movs	r1, #0
 8002420:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002422:	2312      	movs	r3, #18
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	215c      	movs	r1, #92	; 0x5c
 800242a:	5a52      	ldrh	r2, [r2, r1]
 800242c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	015b      	lsls	r3, r3, #5
 8002436:	429a      	cmp	r2, r3
 8002438:	d108      	bne.n	800244c <HAL_UART_Receive+0x138>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d104      	bne.n	800244c <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	e003      	b.n	8002454 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2274      	movs	r2, #116	; 0x74
 8002458:	2100      	movs	r1, #0
 800245a:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800245c:	e036      	b.n	80024cc <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	0013      	movs	r3, r2
 8002468:	2200      	movs	r2, #0
 800246a:	2120      	movs	r1, #32
 800246c:	f000 feb6 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 8002470:	1e03      	subs	r3, r0, #0
 8002472:	d001      	beq.n	8002478 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e035      	b.n	80024e4 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10e      	bne.n	800249c <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	b29b      	uxth	r3, r3
 8002486:	2212      	movs	r2, #18
 8002488:	18ba      	adds	r2, r7, r2
 800248a:	8812      	ldrh	r2, [r2, #0]
 800248c:	4013      	ands	r3, r2
 800248e:	b29a      	uxth	r2, r3
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	3302      	adds	r3, #2
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	e00e      	b.n	80024ba <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2212      	movs	r2, #18
 80024a6:	18ba      	adds	r2, r7, r2
 80024a8:	8812      	ldrh	r2, [r2, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	4013      	ands	r3, r2
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	3301      	adds	r3, #1
 80024b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	225a      	movs	r2, #90	; 0x5a
 80024be:	5a9b      	ldrh	r3, [r3, r2]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b299      	uxth	r1, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	225a      	movs	r2, #90	; 0x5a
 80024ca:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	225a      	movs	r2, #90	; 0x5a
 80024d0:	5a9b      	ldrh	r3, [r3, r2]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1c2      	bne.n	800245e <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
  }
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b008      	add	sp, #32
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	000001ff 	.word	0x000001ff

080024f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b0ab      	sub	sp, #172	; 0xac
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	22a4      	movs	r2, #164	; 0xa4
 8002500:	18b9      	adds	r1, r7, r2
 8002502:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	20a0      	movs	r0, #160	; 0xa0
 800250c:	1839      	adds	r1, r7, r0
 800250e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	219c      	movs	r1, #156	; 0x9c
 8002518:	1879      	adds	r1, r7, r1
 800251a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800251c:	0011      	movs	r1, r2
 800251e:	18bb      	adds	r3, r7, r2
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a99      	ldr	r2, [pc, #612]	; (8002788 <HAL_UART_IRQHandler+0x298>)
 8002524:	4013      	ands	r3, r2
 8002526:	2298      	movs	r2, #152	; 0x98
 8002528:	18bc      	adds	r4, r7, r2
 800252a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800252c:	18bb      	adds	r3, r7, r2
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d114      	bne.n	800255e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002534:	187b      	adds	r3, r7, r1
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2220      	movs	r2, #32
 800253a:	4013      	ands	r3, r2
 800253c:	d00f      	beq.n	800255e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800253e:	183b      	adds	r3, r7, r0
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2220      	movs	r2, #32
 8002544:	4013      	ands	r3, r2
 8002546:	d00a      	beq.n	800255e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800254c:	2b00      	cmp	r3, #0
 800254e:	d100      	bne.n	8002552 <HAL_UART_IRQHandler+0x62>
 8002550:	e298      	b.n	8002a84 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	0010      	movs	r0, r2
 800255a:	4798      	blx	r3
      }
      return;
 800255c:	e292      	b.n	8002a84 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800255e:	2398      	movs	r3, #152	; 0x98
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d100      	bne.n	800256a <HAL_UART_IRQHandler+0x7a>
 8002568:	e114      	b.n	8002794 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800256a:	239c      	movs	r3, #156	; 0x9c
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	4013      	ands	r3, r2
 8002574:	d106      	bne.n	8002584 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002576:	23a0      	movs	r3, #160	; 0xa0
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a83      	ldr	r2, [pc, #524]	; (800278c <HAL_UART_IRQHandler+0x29c>)
 800257e:	4013      	ands	r3, r2
 8002580:	d100      	bne.n	8002584 <HAL_UART_IRQHandler+0x94>
 8002582:	e107      	b.n	8002794 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002584:	23a4      	movs	r3, #164	; 0xa4
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	4013      	ands	r3, r2
 800258e:	d012      	beq.n	80025b6 <HAL_UART_IRQHandler+0xc6>
 8002590:	23a0      	movs	r3, #160	; 0xa0
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4013      	ands	r3, r2
 800259c:	d00b      	beq.n	80025b6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2201      	movs	r2, #1
 80025a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	589b      	ldr	r3, [r3, r2]
 80025ac:	2201      	movs	r2, #1
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025b6:	23a4      	movs	r3, #164	; 0xa4
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d011      	beq.n	80025e6 <HAL_UART_IRQHandler+0xf6>
 80025c2:	239c      	movs	r3, #156	; 0x9c
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2201      	movs	r2, #1
 80025ca:	4013      	ands	r3, r2
 80025cc:	d00b      	beq.n	80025e6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2202      	movs	r2, #2
 80025d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	589b      	ldr	r3, [r3, r2]
 80025dc:	2204      	movs	r2, #4
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2180      	movs	r1, #128	; 0x80
 80025e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025e6:	23a4      	movs	r3, #164	; 0xa4
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2204      	movs	r2, #4
 80025ee:	4013      	ands	r3, r2
 80025f0:	d011      	beq.n	8002616 <HAL_UART_IRQHandler+0x126>
 80025f2:	239c      	movs	r3, #156	; 0x9c
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2201      	movs	r2, #1
 80025fa:	4013      	ands	r3, r2
 80025fc:	d00b      	beq.n	8002616 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2204      	movs	r2, #4
 8002604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2280      	movs	r2, #128	; 0x80
 800260a:	589b      	ldr	r3, [r3, r2]
 800260c:	2202      	movs	r2, #2
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002616:	23a4      	movs	r3, #164	; 0xa4
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2208      	movs	r2, #8
 800261e:	4013      	ands	r3, r2
 8002620:	d017      	beq.n	8002652 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002622:	23a0      	movs	r3, #160	; 0xa0
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2220      	movs	r2, #32
 800262a:	4013      	ands	r3, r2
 800262c:	d105      	bne.n	800263a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800262e:	239c      	movs	r3, #156	; 0x9c
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2201      	movs	r2, #1
 8002636:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002638:	d00b      	beq.n	8002652 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2208      	movs	r2, #8
 8002640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	589b      	ldr	r3, [r3, r2]
 8002648:	2208      	movs	r2, #8
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002652:	23a4      	movs	r3, #164	; 0xa4
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	4013      	ands	r3, r2
 800265e:	d013      	beq.n	8002688 <HAL_UART_IRQHandler+0x198>
 8002660:	23a0      	movs	r3, #160	; 0xa0
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	04db      	lsls	r3, r3, #19
 800266a:	4013      	ands	r3, r2
 800266c:	d00c      	beq.n	8002688 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	589b      	ldr	r3, [r3, r2]
 800267e:	2220      	movs	r2, #32
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	589b      	ldr	r3, [r3, r2]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d100      	bne.n	8002694 <HAL_UART_IRQHandler+0x1a4>
 8002692:	e1f9      	b.n	8002a88 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002694:	23a4      	movs	r3, #164	; 0xa4
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2220      	movs	r2, #32
 800269c:	4013      	ands	r3, r2
 800269e:	d00e      	beq.n	80026be <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026a0:	23a0      	movs	r3, #160	; 0xa0
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2220      	movs	r2, #32
 80026a8:	4013      	ands	r3, r2
 80026aa:	d008      	beq.n	80026be <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	0010      	movs	r0, r2
 80026bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	589b      	ldr	r3, [r3, r2]
 80026c4:	2194      	movs	r1, #148	; 0x94
 80026c6:	187a      	adds	r2, r7, r1
 80026c8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2240      	movs	r2, #64	; 0x40
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b40      	cmp	r3, #64	; 0x40
 80026d6:	d004      	beq.n	80026e2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80026d8:	187b      	adds	r3, r7, r1
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2228      	movs	r2, #40	; 0x28
 80026de:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026e0:	d047      	beq.n	8002772 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f000 fe3d 	bl	8003364 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2240      	movs	r2, #64	; 0x40
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b40      	cmp	r3, #64	; 0x40
 80026f6:	d137      	bne.n	8002768 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026f8:	f3ef 8310 	mrs	r3, PRIMASK
 80026fc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80026fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002700:	2090      	movs	r0, #144	; 0x90
 8002702:	183a      	adds	r2, r7, r0
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	2301      	movs	r3, #1
 8002708:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800270c:	f383 8810 	msr	PRIMASK, r3
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2140      	movs	r1, #64	; 0x40
 800271e:	438a      	bics	r2, r1
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	183b      	adds	r3, r7, r0
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800272a:	f383 8810 	msr	PRIMASK, r3
}
 800272e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	2b00      	cmp	r3, #0
 8002736:	d012      	beq.n	800275e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a14      	ldr	r2, [pc, #80]	; (8002790 <HAL_UART_IRQHandler+0x2a0>)
 800273e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	0018      	movs	r0, r3
 8002746:	f7fe fc49 	bl	8000fdc <HAL_DMA_Abort_IT>
 800274a:	1e03      	subs	r3, r0, #0
 800274c:	d01a      	beq.n	8002784 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	0018      	movs	r0, r3
 800275a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275c:	e012      	b.n	8002784 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0018      	movs	r0, r3
 8002762:	f000 f9a7 	bl	8002ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002766:	e00d      	b.n	8002784 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0018      	movs	r0, r3
 800276c:	f000 f9a2 	bl	8002ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002770:	e008      	b.n	8002784 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	0018      	movs	r0, r3
 8002776:	f000 f99d 	bl	8002ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2280      	movs	r2, #128	; 0x80
 800277e:	2100      	movs	r1, #0
 8002780:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002782:	e181      	b.n	8002a88 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002784:	46c0      	nop			; (mov r8, r8)
    return;
 8002786:	e17f      	b.n	8002a88 <HAL_UART_IRQHandler+0x598>
 8002788:	0000080f 	.word	0x0000080f
 800278c:	04000120 	.word	0x04000120
 8002790:	08003429 	.word	0x08003429

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002798:	2b01      	cmp	r3, #1
 800279a:	d000      	beq.n	800279e <HAL_UART_IRQHandler+0x2ae>
 800279c:	e133      	b.n	8002a06 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800279e:	23a4      	movs	r3, #164	; 0xa4
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2210      	movs	r2, #16
 80027a6:	4013      	ands	r3, r2
 80027a8:	d100      	bne.n	80027ac <HAL_UART_IRQHandler+0x2bc>
 80027aa:	e12c      	b.n	8002a06 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80027ac:	23a0      	movs	r3, #160	; 0xa0
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2210      	movs	r2, #16
 80027b4:	4013      	ands	r3, r2
 80027b6:	d100      	bne.n	80027ba <HAL_UART_IRQHandler+0x2ca>
 80027b8:	e125      	b.n	8002a06 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2210      	movs	r2, #16
 80027c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2240      	movs	r2, #64	; 0x40
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d000      	beq.n	80027d2 <HAL_UART_IRQHandler+0x2e2>
 80027d0:	e09d      	b.n	800290e <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	217e      	movs	r1, #126	; 0x7e
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d100      	bne.n	80027ea <HAL_UART_IRQHandler+0x2fa>
 80027e8:	e150      	b.n	8002a8c <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2258      	movs	r2, #88	; 0x58
 80027ee:	5a9b      	ldrh	r3, [r3, r2]
 80027f0:	187a      	adds	r2, r7, r1
 80027f2:	8812      	ldrh	r2, [r2, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d300      	bcc.n	80027fa <HAL_UART_IRQHandler+0x30a>
 80027f8:	e148      	b.n	8002a8c <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	187a      	adds	r2, r7, r1
 80027fe:	215a      	movs	r1, #90	; 0x5a
 8002800:	8812      	ldrh	r2, [r2, #0]
 8002802:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2220      	movs	r2, #32
 800280e:	4013      	ands	r3, r2
 8002810:	d16e      	bne.n	80028f0 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002812:	f3ef 8310 	mrs	r3, PRIMASK
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800281a:	67bb      	str	r3, [r7, #120]	; 0x78
 800281c:	2301      	movs	r3, #1
 800281e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002822:	f383 8810 	msr	PRIMASK, r3
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	499a      	ldr	r1, [pc, #616]	; (8002a9c <HAL_UART_IRQHandler+0x5ac>)
 8002834:	400a      	ands	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800283a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283e:	f383 8810 	msr	PRIMASK, r3
}
 8002842:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002844:	f3ef 8310 	mrs	r3, PRIMASK
 8002848:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800284a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284c:	677b      	str	r3, [r7, #116]	; 0x74
 800284e:	2301      	movs	r3, #1
 8002850:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002854:	f383 8810 	msr	PRIMASK, r3
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	438a      	bics	r2, r1
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800286c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002870:	f383 8810 	msr	PRIMASK, r3
}
 8002874:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002876:	f3ef 8310 	mrs	r3, PRIMASK
 800287a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800287c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800287e:	673b      	str	r3, [r7, #112]	; 0x70
 8002880:	2301      	movs	r3, #1
 8002882:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002886:	f383 8810 	msr	PRIMASK, r3
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2140      	movs	r1, #64	; 0x40
 8002898:	438a      	bics	r2, r1
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800289e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a2:	f383 8810 	msr	PRIMASK, r3
}
 80028a6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b4:	f3ef 8310 	mrs	r3, PRIMASK
 80028b8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80028ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028be:	2301      	movs	r3, #1
 80028c0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c4:	f383 8810 	msr	PRIMASK, r3
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2110      	movs	r1, #16
 80028d6:	438a      	bics	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e0:	f383 8810 	msr	PRIMASK, r3
}
 80028e4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	0018      	movs	r0, r3
 80028ec:	f7fe fb36 	bl	8000f5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2258      	movs	r2, #88	; 0x58
 80028f4:	5a9a      	ldrh	r2, [r3, r2]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	215a      	movs	r1, #90	; 0x5a
 80028fa:	5a5b      	ldrh	r3, [r3, r1]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	b29a      	uxth	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0011      	movs	r1, r2
 8002906:	0018      	movs	r0, r3
 8002908:	f000 f8dc 	bl	8002ac4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800290c:	e0be      	b.n	8002a8c <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2258      	movs	r2, #88	; 0x58
 8002912:	5a99      	ldrh	r1, [r3, r2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	225a      	movs	r2, #90	; 0x5a
 8002918:	5a9b      	ldrh	r3, [r3, r2]
 800291a:	b29a      	uxth	r2, r3
 800291c:	208e      	movs	r0, #142	; 0x8e
 800291e:	183b      	adds	r3, r7, r0
 8002920:	1a8a      	subs	r2, r1, r2
 8002922:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	225a      	movs	r2, #90	; 0x5a
 8002928:	5a9b      	ldrh	r3, [r3, r2]
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d100      	bne.n	8002932 <HAL_UART_IRQHandler+0x442>
 8002930:	e0ae      	b.n	8002a90 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8002932:	183b      	adds	r3, r7, r0
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d100      	bne.n	800293c <HAL_UART_IRQHandler+0x44c>
 800293a:	e0a9      	b.n	8002a90 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293c:	f3ef 8310 	mrs	r3, PRIMASK
 8002940:	60fb      	str	r3, [r7, #12]
  return(result);
 8002942:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002944:	2488      	movs	r4, #136	; 0x88
 8002946:	193a      	adds	r2, r7, r4
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	2301      	movs	r3, #1
 800294c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f383 8810 	msr	PRIMASK, r3
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	494f      	ldr	r1, [pc, #316]	; (8002aa0 <HAL_UART_IRQHandler+0x5b0>)
 8002962:	400a      	ands	r2, r1
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	193b      	adds	r3, r7, r4
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f383 8810 	msr	PRIMASK, r3
}
 8002972:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002974:	f3ef 8310 	mrs	r3, PRIMASK
 8002978:	61bb      	str	r3, [r7, #24]
  return(result);
 800297a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297c:	2484      	movs	r4, #132	; 0x84
 800297e:	193a      	adds	r2, r7, r4
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	2301      	movs	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f383 8810 	msr	PRIMASK, r3
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2101      	movs	r1, #1
 800299a:	438a      	bics	r2, r1
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	193b      	adds	r3, r7, r4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f383 8810 	msr	PRIMASK, r3
}
 80029aa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029be:	f3ef 8310 	mrs	r3, PRIMASK
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029c6:	2480      	movs	r4, #128	; 0x80
 80029c8:	193a      	adds	r2, r7, r4
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	2301      	movs	r3, #1
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	f383 8810 	msr	PRIMASK, r3
}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2110      	movs	r1, #16
 80029e4:	438a      	bics	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	f383 8810 	msr	PRIMASK, r3
}
 80029f4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029f6:	183b      	adds	r3, r7, r0
 80029f8:	881a      	ldrh	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0011      	movs	r1, r2
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 f860 	bl	8002ac4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a04:	e044      	b.n	8002a90 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a06:	23a4      	movs	r3, #164	; 0xa4
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	035b      	lsls	r3, r3, #13
 8002a10:	4013      	ands	r3, r2
 8002a12:	d010      	beq.n	8002a36 <HAL_UART_IRQHandler+0x546>
 8002a14:	239c      	movs	r3, #156	; 0x9c
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	03db      	lsls	r3, r3, #15
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	0352      	lsls	r2, r2, #13
 8002a2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 fd3c 	bl	80034ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a34:	e02f      	b.n	8002a96 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002a36:	23a4      	movs	r3, #164	; 0xa4
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d00f      	beq.n	8002a62 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002a42:	23a0      	movs	r3, #160	; 0xa0
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2280      	movs	r2, #128	; 0x80
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d01e      	beq.n	8002a94 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	0010      	movs	r0, r2
 8002a5e:	4798      	blx	r3
    }
    return;
 8002a60:	e018      	b.n	8002a94 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a62:	23a4      	movs	r3, #164	; 0xa4
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2240      	movs	r2, #64	; 0x40
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_UART_IRQHandler+0x5a6>
 8002a6e:	23a0      	movs	r3, #160	; 0xa0
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2240      	movs	r2, #64	; 0x40
 8002a76:	4013      	ands	r3, r2
 8002a78:	d00d      	beq.n	8002a96 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 fcea 	bl	8003456 <UART_EndTransmit_IT>
    return;
 8002a82:	e008      	b.n	8002a96 <HAL_UART_IRQHandler+0x5a6>
      return;
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	e006      	b.n	8002a96 <HAL_UART_IRQHandler+0x5a6>
    return;
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	e004      	b.n	8002a96 <HAL_UART_IRQHandler+0x5a6>
      return;
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	e002      	b.n	8002a96 <HAL_UART_IRQHandler+0x5a6>
      return;
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	e000      	b.n	8002a96 <HAL_UART_IRQHandler+0x5a6>
    return;
 8002a94:	46c0      	nop			; (mov r8, r8)
  }

}
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b02b      	add	sp, #172	; 0xac
 8002a9a:	bd90      	pop	{r4, r7, pc}
 8002a9c:	fffffeff 	.word	0xfffffeff
 8002aa0:	fffffedf 	.word	0xfffffedf

08002aa4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	000a      	movs	r2, r1
 8002ace:	1cbb      	adds	r3, r7, #2
 8002ad0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002adc:	b5b0      	push	{r4, r5, r7, lr}
 8002ade:	b08e      	sub	sp, #56	; 0x38
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ae4:	231a      	movs	r3, #26
 8002ae6:	2218      	movs	r2, #24
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	19db      	adds	r3, r3, r7
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4ac6      	ldr	r2, [pc, #792]	; (8002e28 <UART_SetConfig+0x34c>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	0019      	movs	r1, r3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4ac1      	ldr	r2, [pc, #772]	; (8002e2c <UART_SetConfig+0x350>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4abb      	ldr	r2, [pc, #748]	; (8002e30 <UART_SetConfig+0x354>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d004      	beq.n	8002b50 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4ab7      	ldr	r2, [pc, #732]	; (8002e34 <UART_SetConfig+0x358>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4ab3      	ldr	r2, [pc, #716]	; (8002e38 <UART_SetConfig+0x35c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d131      	bne.n	8002bd4 <UART_SetConfig+0xf8>
 8002b70:	4bb2      	ldr	r3, [pc, #712]	; (8002e3c <UART_SetConfig+0x360>)
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	2203      	movs	r2, #3
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d01d      	beq.n	8002bb8 <UART_SetConfig+0xdc>
 8002b7c:	d823      	bhi.n	8002bc6 <UART_SetConfig+0xea>
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d00c      	beq.n	8002b9c <UART_SetConfig+0xc0>
 8002b82:	d820      	bhi.n	8002bc6 <UART_SetConfig+0xea>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <UART_SetConfig+0xb2>
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d00e      	beq.n	8002baa <UART_SetConfig+0xce>
 8002b8c:	e01b      	b.n	8002bc6 <UART_SetConfig+0xea>
 8002b8e:	231b      	movs	r3, #27
 8002b90:	2218      	movs	r2, #24
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	19db      	adds	r3, r3, r7
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e09c      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002b9c:	231b      	movs	r3, #27
 8002b9e:	2218      	movs	r2, #24
 8002ba0:	189b      	adds	r3, r3, r2
 8002ba2:	19db      	adds	r3, r3, r7
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	e095      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002baa:	231b      	movs	r3, #27
 8002bac:	2218      	movs	r2, #24
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	19db      	adds	r3, r3, r7
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	e08e      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002bb8:	231b      	movs	r3, #27
 8002bba:	2218      	movs	r2, #24
 8002bbc:	189b      	adds	r3, r3, r2
 8002bbe:	19db      	adds	r3, r3, r7
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	701a      	strb	r2, [r3, #0]
 8002bc4:	e087      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002bc6:	231b      	movs	r3, #27
 8002bc8:	2218      	movs	r2, #24
 8002bca:	189b      	adds	r3, r3, r2
 8002bcc:	19db      	adds	r3, r3, r7
 8002bce:	2210      	movs	r2, #16
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e080      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a99      	ldr	r2, [pc, #612]	; (8002e40 <UART_SetConfig+0x364>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d131      	bne.n	8002c42 <UART_SetConfig+0x166>
 8002bde:	4b97      	ldr	r3, [pc, #604]	; (8002e3c <UART_SetConfig+0x360>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	220c      	movs	r2, #12
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d01d      	beq.n	8002c26 <UART_SetConfig+0x14a>
 8002bea:	d823      	bhi.n	8002c34 <UART_SetConfig+0x158>
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d00c      	beq.n	8002c0a <UART_SetConfig+0x12e>
 8002bf0:	d820      	bhi.n	8002c34 <UART_SetConfig+0x158>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <UART_SetConfig+0x120>
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d00e      	beq.n	8002c18 <UART_SetConfig+0x13c>
 8002bfa:	e01b      	b.n	8002c34 <UART_SetConfig+0x158>
 8002bfc:	231b      	movs	r3, #27
 8002bfe:	2218      	movs	r2, #24
 8002c00:	189b      	adds	r3, r3, r2
 8002c02:	19db      	adds	r3, r3, r7
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e065      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002c0a:	231b      	movs	r3, #27
 8002c0c:	2218      	movs	r2, #24
 8002c0e:	189b      	adds	r3, r3, r2
 8002c10:	19db      	adds	r3, r3, r7
 8002c12:	2202      	movs	r2, #2
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e05e      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002c18:	231b      	movs	r3, #27
 8002c1a:	2218      	movs	r2, #24
 8002c1c:	189b      	adds	r3, r3, r2
 8002c1e:	19db      	adds	r3, r3, r7
 8002c20:	2204      	movs	r2, #4
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e057      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002c26:	231b      	movs	r3, #27
 8002c28:	2218      	movs	r2, #24
 8002c2a:	189b      	adds	r3, r3, r2
 8002c2c:	19db      	adds	r3, r3, r7
 8002c2e:	2208      	movs	r2, #8
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e050      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002c34:	231b      	movs	r3, #27
 8002c36:	2218      	movs	r2, #24
 8002c38:	189b      	adds	r3, r3, r2
 8002c3a:	19db      	adds	r3, r3, r7
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e049      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a7a      	ldr	r2, [pc, #488]	; (8002e30 <UART_SetConfig+0x354>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d13e      	bne.n	8002cca <UART_SetConfig+0x1ee>
 8002c4c:	4b7b      	ldr	r3, [pc, #492]	; (8002e3c <UART_SetConfig+0x360>)
 8002c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c50:	23c0      	movs	r3, #192	; 0xc0
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	4013      	ands	r3, r2
 8002c56:	22c0      	movs	r2, #192	; 0xc0
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d027      	beq.n	8002cae <UART_SetConfig+0x1d2>
 8002c5e:	22c0      	movs	r2, #192	; 0xc0
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d82a      	bhi.n	8002cbc <UART_SetConfig+0x1e0>
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d011      	beq.n	8002c92 <UART_SetConfig+0x1b6>
 8002c6e:	2280      	movs	r2, #128	; 0x80
 8002c70:	0112      	lsls	r2, r2, #4
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d822      	bhi.n	8002cbc <UART_SetConfig+0x1e0>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <UART_SetConfig+0x1a8>
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	00d2      	lsls	r2, r2, #3
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00e      	beq.n	8002ca0 <UART_SetConfig+0x1c4>
 8002c82:	e01b      	b.n	8002cbc <UART_SetConfig+0x1e0>
 8002c84:	231b      	movs	r3, #27
 8002c86:	2218      	movs	r2, #24
 8002c88:	189b      	adds	r3, r3, r2
 8002c8a:	19db      	adds	r3, r3, r7
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e021      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002c92:	231b      	movs	r3, #27
 8002c94:	2218      	movs	r2, #24
 8002c96:	189b      	adds	r3, r3, r2
 8002c98:	19db      	adds	r3, r3, r7
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e01a      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002ca0:	231b      	movs	r3, #27
 8002ca2:	2218      	movs	r2, #24
 8002ca4:	189b      	adds	r3, r3, r2
 8002ca6:	19db      	adds	r3, r3, r7
 8002ca8:	2204      	movs	r2, #4
 8002caa:	701a      	strb	r2, [r3, #0]
 8002cac:	e013      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002cae:	231b      	movs	r3, #27
 8002cb0:	2218      	movs	r2, #24
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	19db      	adds	r3, r3, r7
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e00c      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002cbc:	231b      	movs	r3, #27
 8002cbe:	2218      	movs	r2, #24
 8002cc0:	189b      	adds	r3, r3, r2
 8002cc2:	19db      	adds	r3, r3, r7
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	e005      	b.n	8002cd6 <UART_SetConfig+0x1fa>
 8002cca:	231b      	movs	r3, #27
 8002ccc:	2218      	movs	r2, #24
 8002cce:	189b      	adds	r3, r3, r2
 8002cd0:	19db      	adds	r3, r3, r7
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a55      	ldr	r2, [pc, #340]	; (8002e30 <UART_SetConfig+0x354>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d000      	beq.n	8002ce2 <UART_SetConfig+0x206>
 8002ce0:	e084      	b.n	8002dec <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ce2:	231b      	movs	r3, #27
 8002ce4:	2218      	movs	r2, #24
 8002ce6:	189b      	adds	r3, r3, r2
 8002ce8:	19db      	adds	r3, r3, r7
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d01d      	beq.n	8002d2c <UART_SetConfig+0x250>
 8002cf0:	dc20      	bgt.n	8002d34 <UART_SetConfig+0x258>
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d015      	beq.n	8002d22 <UART_SetConfig+0x246>
 8002cf6:	dc1d      	bgt.n	8002d34 <UART_SetConfig+0x258>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <UART_SetConfig+0x226>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d005      	beq.n	8002d0c <UART_SetConfig+0x230>
 8002d00:	e018      	b.n	8002d34 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d02:	f7ff f8a9 	bl	8001e58 <HAL_RCC_GetPCLK1Freq>
 8002d06:	0003      	movs	r3, r0
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d0a:	e01c      	b.n	8002d46 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d0c:	4b4b      	ldr	r3, [pc, #300]	; (8002e3c <UART_SetConfig+0x360>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2210      	movs	r2, #16
 8002d12:	4013      	ands	r3, r2
 8002d14:	d002      	beq.n	8002d1c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d16:	4b4b      	ldr	r3, [pc, #300]	; (8002e44 <UART_SetConfig+0x368>)
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d1a:	e014      	b.n	8002d46 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002d1c:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <UART_SetConfig+0x36c>)
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d20:	e011      	b.n	8002d46 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d22:	f7fe ffe9 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8002d26:	0003      	movs	r3, r0
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d2a:	e00c      	b.n	8002d46 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d32:	e008      	b.n	8002d46 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d38:	231a      	movs	r3, #26
 8002d3a:	2218      	movs	r2, #24
 8002d3c:	189b      	adds	r3, r3, r2
 8002d3e:	19db      	adds	r3, r3, r7
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
        break;
 8002d44:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d100      	bne.n	8002d4e <UART_SetConfig+0x272>
 8002d4c:	e133      	b.n	8002fb6 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	0013      	movs	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d305      	bcc.n	8002d6a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d906      	bls.n	8002d78 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002d6a:	231a      	movs	r3, #26
 8002d6c:	2218      	movs	r2, #24
 8002d6e:	189b      	adds	r3, r3, r2
 8002d70:	19db      	adds	r3, r3, r7
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	e11e      	b.n	8002fb6 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	6939      	ldr	r1, [r7, #16]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	000b      	movs	r3, r1
 8002d86:	0e1b      	lsrs	r3, r3, #24
 8002d88:	0010      	movs	r0, r2
 8002d8a:	0205      	lsls	r5, r0, #8
 8002d8c:	431d      	orrs	r5, r3
 8002d8e:	000b      	movs	r3, r1
 8002d90:	021c      	lsls	r4, r3, #8
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68b8      	ldr	r0, [r7, #8]
 8002da0:	68f9      	ldr	r1, [r7, #12]
 8002da2:	1900      	adds	r0, r0, r4
 8002da4:	4169      	adcs	r1, r5
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	2300      	movs	r3, #0
 8002dae:	607b      	str	r3, [r7, #4]
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f7fd fa3c 	bl	8000230 <__aeabi_uldivmod>
 8002db8:	0002      	movs	r2, r0
 8002dba:	000b      	movs	r3, r1
 8002dbc:	0013      	movs	r3, r2
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc2:	23c0      	movs	r3, #192	; 0xc0
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d309      	bcc.n	8002dde <UART_SetConfig+0x302>
 8002dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	035b      	lsls	r3, r3, #13
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d204      	bcs.n	8002dde <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	e0eb      	b.n	8002fb6 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 8002dde:	231a      	movs	r3, #26
 8002de0:	2218      	movs	r2, #24
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	19db      	adds	r3, r3, r7
 8002de6:	2201      	movs	r2, #1
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	e0e4      	b.n	8002fb6 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d000      	beq.n	8002dfa <UART_SetConfig+0x31e>
 8002df8:	e086      	b.n	8002f08 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8002dfa:	231b      	movs	r3, #27
 8002dfc:	2218      	movs	r2, #24
 8002dfe:	189b      	adds	r3, r3, r2
 8002e00:	19db      	adds	r3, r3, r7
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d837      	bhi.n	8002e78 <UART_SetConfig+0x39c>
 8002e08:	009a      	lsls	r2, r3, #2
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <UART_SetConfig+0x370>)
 8002e0c:	18d3      	adds	r3, r2, r3
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e12:	f7ff f821 	bl	8001e58 <HAL_RCC_GetPCLK1Freq>
 8002e16:	0003      	movs	r3, r0
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e1a:	e036      	b.n	8002e8a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e1c:	f7ff f832 	bl	8001e84 <HAL_RCC_GetPCLK2Freq>
 8002e20:	0003      	movs	r3, r0
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e24:	e031      	b.n	8002e8a <UART_SetConfig+0x3ae>
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	efff69f3 	.word	0xefff69f3
 8002e2c:	ffffcfff 	.word	0xffffcfff
 8002e30:	40004800 	.word	0x40004800
 8002e34:	fffff4ff 	.word	0xfffff4ff
 8002e38:	40013800 	.word	0x40013800
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40004400 	.word	0x40004400
 8002e44:	003d0900 	.word	0x003d0900
 8002e48:	00f42400 	.word	0x00f42400
 8002e4c:	0800373c 	.word	0x0800373c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e50:	4b60      	ldr	r3, [pc, #384]	; (8002fd4 <UART_SetConfig+0x4f8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2210      	movs	r2, #16
 8002e56:	4013      	ands	r3, r2
 8002e58:	d002      	beq.n	8002e60 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e5a:	4b5f      	ldr	r3, [pc, #380]	; (8002fd8 <UART_SetConfig+0x4fc>)
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e5e:	e014      	b.n	8002e8a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002e60:	4b5e      	ldr	r3, [pc, #376]	; (8002fdc <UART_SetConfig+0x500>)
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e64:	e011      	b.n	8002e8a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e66:	f7fe ff47 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e6e:	e00c      	b.n	8002e8a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e76:	e008      	b.n	8002e8a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e7c:	231a      	movs	r3, #26
 8002e7e:	2218      	movs	r2, #24
 8002e80:	189b      	adds	r3, r3, r2
 8002e82:	19db      	adds	r3, r3, r7
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
        break;
 8002e88:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d100      	bne.n	8002e92 <UART_SetConfig+0x3b6>
 8002e90:	e091      	b.n	8002fb6 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	005a      	lsls	r2, r3, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	085b      	lsrs	r3, r3, #1
 8002e9c:	18d2      	adds	r2, r2, r3
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	0010      	movs	r0, r2
 8002ea6:	f7fd f937 	bl	8000118 <__udivsi3>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	d921      	bls.n	8002efa <UART_SetConfig+0x41e>
 8002eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	025b      	lsls	r3, r3, #9
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d21c      	bcs.n	8002efa <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	200e      	movs	r0, #14
 8002ec6:	2418      	movs	r4, #24
 8002ec8:	1903      	adds	r3, r0, r4
 8002eca:	19db      	adds	r3, r3, r7
 8002ecc:	210f      	movs	r1, #15
 8002ece:	438a      	bics	r2, r1
 8002ed0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2207      	movs	r2, #7
 8002eda:	4013      	ands	r3, r2
 8002edc:	b299      	uxth	r1, r3
 8002ede:	1903      	adds	r3, r0, r4
 8002ee0:	19db      	adds	r3, r3, r7
 8002ee2:	1902      	adds	r2, r0, r4
 8002ee4:	19d2      	adds	r2, r2, r7
 8002ee6:	8812      	ldrh	r2, [r2, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	1902      	adds	r2, r0, r4
 8002ef2:	19d2      	adds	r2, r2, r7
 8002ef4:	8812      	ldrh	r2, [r2, #0]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	e05d      	b.n	8002fb6 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8002efa:	231a      	movs	r3, #26
 8002efc:	2218      	movs	r2, #24
 8002efe:	189b      	adds	r3, r3, r2
 8002f00:	19db      	adds	r3, r3, r7
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e056      	b.n	8002fb6 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f08:	231b      	movs	r3, #27
 8002f0a:	2218      	movs	r2, #24
 8002f0c:	189b      	adds	r3, r3, r2
 8002f0e:	19db      	adds	r3, r3, r7
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d822      	bhi.n	8002f5c <UART_SetConfig+0x480>
 8002f16:	009a      	lsls	r2, r3, #2
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <UART_SetConfig+0x504>)
 8002f1a:	18d3      	adds	r3, r2, r3
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f20:	f7fe ff9a 	bl	8001e58 <HAL_RCC_GetPCLK1Freq>
 8002f24:	0003      	movs	r3, r0
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f28:	e021      	b.n	8002f6e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f2a:	f7fe ffab 	bl	8001e84 <HAL_RCC_GetPCLK2Freq>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f32:	e01c      	b.n	8002f6e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f34:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <UART_SetConfig+0x4f8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d002      	beq.n	8002f44 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f3e:	4b26      	ldr	r3, [pc, #152]	; (8002fd8 <UART_SetConfig+0x4fc>)
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f42:	e014      	b.n	8002f6e <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <UART_SetConfig+0x500>)
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f48:	e011      	b.n	8002f6e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4a:	f7fe fed5 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f52:	e00c      	b.n	8002f6e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f5a:	e008      	b.n	8002f6e <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f60:	231a      	movs	r3, #26
 8002f62:	2218      	movs	r2, #24
 8002f64:	189b      	adds	r3, r3, r2
 8002f66:	19db      	adds	r3, r3, r7
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
        break;
 8002f6c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d020      	beq.n	8002fb6 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	085a      	lsrs	r2, r3, #1
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	18d2      	adds	r2, r2, r3
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	0019      	movs	r1, r3
 8002f84:	0010      	movs	r0, r2
 8002f86:	f7fd f8c7 	bl	8000118 <__udivsi3>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	d909      	bls.n	8002faa <UART_SetConfig+0x4ce>
 8002f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	025b      	lsls	r3, r3, #9
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d204      	bcs.n	8002faa <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa6:	60da      	str	r2, [r3, #12]
 8002fa8:	e005      	b.n	8002fb6 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8002faa:	231a      	movs	r3, #26
 8002fac:	2218      	movs	r2, #24
 8002fae:	189b      	adds	r3, r3, r2
 8002fb0:	19db      	adds	r3, r3, r7
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002fc2:	231a      	movs	r3, #26
 8002fc4:	2218      	movs	r2, #24
 8002fc6:	189b      	adds	r3, r3, r2
 8002fc8:	19db      	adds	r3, r3, r7
 8002fca:	781b      	ldrb	r3, [r3, #0]
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b00e      	add	sp, #56	; 0x38
 8002fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	003d0900 	.word	0x003d0900
 8002fdc:	00f42400 	.word	0x00f42400
 8002fe0:	08003760 	.word	0x08003760

08002fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d00b      	beq.n	800300e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4a4a      	ldr	r2, [pc, #296]	; (8003128 <UART_AdvFeatureConfig+0x144>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	0019      	movs	r1, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	2202      	movs	r2, #2
 8003014:	4013      	ands	r3, r2
 8003016:	d00b      	beq.n	8003030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a43      	ldr	r2, [pc, #268]	; (800312c <UART_AdvFeatureConfig+0x148>)
 8003020:	4013      	ands	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	2204      	movs	r2, #4
 8003036:	4013      	ands	r3, r2
 8003038:	d00b      	beq.n	8003052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a3b      	ldr	r2, [pc, #236]	; (8003130 <UART_AdvFeatureConfig+0x14c>)
 8003042:	4013      	ands	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	2208      	movs	r2, #8
 8003058:	4013      	ands	r3, r2
 800305a:	d00b      	beq.n	8003074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4a34      	ldr	r2, [pc, #208]	; (8003134 <UART_AdvFeatureConfig+0x150>)
 8003064:	4013      	ands	r3, r2
 8003066:	0019      	movs	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2210      	movs	r2, #16
 800307a:	4013      	ands	r3, r2
 800307c:	d00b      	beq.n	8003096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <UART_AdvFeatureConfig+0x154>)
 8003086:	4013      	ands	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2220      	movs	r2, #32
 800309c:	4013      	ands	r3, r2
 800309e:	d00b      	beq.n	80030b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	4a25      	ldr	r2, [pc, #148]	; (800313c <UART_AdvFeatureConfig+0x158>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	0019      	movs	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	2240      	movs	r2, #64	; 0x40
 80030be:	4013      	ands	r3, r2
 80030c0:	d01d      	beq.n	80030fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a1d      	ldr	r2, [pc, #116]	; (8003140 <UART_AdvFeatureConfig+0x15c>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	035b      	lsls	r3, r3, #13
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d10b      	bne.n	80030fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a15      	ldr	r2, [pc, #84]	; (8003144 <UART_AdvFeatureConfig+0x160>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2280      	movs	r2, #128	; 0x80
 8003104:	4013      	ands	r3, r2
 8003106:	d00b      	beq.n	8003120 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <UART_AdvFeatureConfig+0x164>)
 8003110:	4013      	ands	r3, r2
 8003112:	0019      	movs	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	605a      	str	r2, [r3, #4]
  }
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b002      	add	sp, #8
 8003126:	bd80      	pop	{r7, pc}
 8003128:	fffdffff 	.word	0xfffdffff
 800312c:	fffeffff 	.word	0xfffeffff
 8003130:	fffbffff 	.word	0xfffbffff
 8003134:	ffff7fff 	.word	0xffff7fff
 8003138:	ffffefff 	.word	0xffffefff
 800313c:	ffffdfff 	.word	0xffffdfff
 8003140:	ffefffff 	.word	0xffefffff
 8003144:	ff9fffff 	.word	0xff9fffff
 8003148:	fff7ffff 	.word	0xfff7ffff

0800314c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af02      	add	r7, sp, #8
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	2100      	movs	r1, #0
 800315a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800315c:	f7fd fdf2 	bl	8000d44 <HAL_GetTick>
 8003160:	0003      	movs	r3, r0
 8003162:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2208      	movs	r2, #8
 800316c:	4013      	ands	r3, r2
 800316e:	2b08      	cmp	r3, #8
 8003170:	d10c      	bne.n	800318c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2280      	movs	r2, #128	; 0x80
 8003176:	0391      	lsls	r1, r2, #14
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <UART_CheckIdleState+0x8c>)
 800317c:	9200      	str	r2, [sp, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	f000 f82c 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 8003184:	1e03      	subs	r3, r0, #0
 8003186:	d001      	beq.n	800318c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e021      	b.n	80031d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2204      	movs	r2, #4
 8003194:	4013      	ands	r3, r2
 8003196:	2b04      	cmp	r3, #4
 8003198:	d10c      	bne.n	80031b4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2280      	movs	r2, #128	; 0x80
 800319e:	03d1      	lsls	r1, r2, #15
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <UART_CheckIdleState+0x8c>)
 80031a4:	9200      	str	r2, [sp, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f000 f818 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 80031ac:	1e03      	subs	r3, r0, #0
 80031ae:	d001      	beq.n	80031b4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e00d      	b.n	80031d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2274      	movs	r2, #116	; 0x74
 80031ca:	2100      	movs	r1, #0
 80031cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b004      	add	sp, #16
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	01ffffff 	.word	0x01ffffff

080031dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b094      	sub	sp, #80	; 0x50
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ec:	e0a3      	b.n	8003336 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031f0:	3301      	adds	r3, #1
 80031f2:	d100      	bne.n	80031f6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80031f4:	e09f      	b.n	8003336 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f6:	f7fd fda5 	bl	8000d44 <HAL_GetTick>
 80031fa:	0002      	movs	r2, r0
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003202:	429a      	cmp	r2, r3
 8003204:	d302      	bcc.n	800320c <UART_WaitOnFlagUntilTimeout+0x30>
 8003206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003208:	2b00      	cmp	r3, #0
 800320a:	d13d      	bne.n	8003288 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800320c:	f3ef 8310 	mrs	r3, PRIMASK
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003214:	647b      	str	r3, [r7, #68]	; 0x44
 8003216:	2301      	movs	r3, #1
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	f383 8810 	msr	PRIMASK, r3
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	494c      	ldr	r1, [pc, #304]	; (8003360 <UART_WaitOnFlagUntilTimeout+0x184>)
 800322e:	400a      	ands	r2, r1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003234:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	f383 8810 	msr	PRIMASK, r3
}
 800323c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800323e:	f3ef 8310 	mrs	r3, PRIMASK
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003246:	643b      	str	r3, [r7, #64]	; 0x40
 8003248:	2301      	movs	r3, #1
 800324a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324e:	f383 8810 	msr	PRIMASK, r3
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2101      	movs	r1, #1
 8003260:	438a      	bics	r2, r1
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003266:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326a:	f383 8810 	msr	PRIMASK, r3
}
 800326e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2274      	movs	r2, #116	; 0x74
 8003280:	2100      	movs	r1, #0
 8003282:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e067      	b.n	8003358 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2204      	movs	r2, #4
 8003290:	4013      	ands	r3, r2
 8003292:	d050      	beq.n	8003336 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	401a      	ands	r2, r3
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d146      	bne.n	8003336 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b2:	f3ef 8310 	mrs	r3, PRIMASK
 80032b6:	613b      	str	r3, [r7, #16]
  return(result);
 80032b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032bc:	2301      	movs	r3, #1
 80032be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f383 8810 	msr	PRIMASK, r3
}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4923      	ldr	r1, [pc, #140]	; (8003360 <UART_WaitOnFlagUntilTimeout+0x184>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f383 8810 	msr	PRIMASK, r3
}
 80032e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e4:	f3ef 8310 	mrs	r3, PRIMASK
 80032e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80032ea:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ee:	2301      	movs	r3, #1
 80032f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	f383 8810 	msr	PRIMASK, r3
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2101      	movs	r1, #1
 8003306:	438a      	bics	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	f383 8810 	msr	PRIMASK, r3
}
 8003314:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	2120      	movs	r1, #32
 8003328:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2274      	movs	r2, #116	; 0x74
 800332e:	2100      	movs	r1, #0
 8003330:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e010      	b.n	8003358 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	425a      	negs	r2, r3
 8003346:	4153      	adcs	r3, r2
 8003348:	b2db      	uxtb	r3, r3
 800334a:	001a      	movs	r2, r3
 800334c:	1dfb      	adds	r3, r7, #7
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d100      	bne.n	8003356 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003354:	e74b      	b.n	80031ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b014      	add	sp, #80	; 0x50
 800335e:	bd80      	pop	{r7, pc}
 8003360:	fffffe5f 	.word	0xfffffe5f

08003364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08e      	sub	sp, #56	; 0x38
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336c:	f3ef 8310 	mrs	r3, PRIMASK
 8003370:	617b      	str	r3, [r7, #20]
  return(result);
 8003372:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
 8003376:	2301      	movs	r3, #1
 8003378:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f383 8810 	msr	PRIMASK, r3
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4925      	ldr	r1, [pc, #148]	; (8003424 <UART_EndRxTransfer+0xc0>)
 800338e:	400a      	ands	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f383 8810 	msr	PRIMASK, r3
}
 800339c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339e:	f3ef 8310 	mrs	r3, PRIMASK
 80033a2:	623b      	str	r3, [r7, #32]
  return(result);
 80033a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
 80033a8:	2301      	movs	r3, #1
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	438a      	bics	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d118      	bne.n	800340a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d8:	f3ef 8310 	mrs	r3, PRIMASK
 80033dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80033de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e2:	2301      	movs	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f383 8810 	msr	PRIMASK, r3
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2110      	movs	r1, #16
 80033fa:	438a      	bics	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003400:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f383 8810 	msr	PRIMASK, r3
}
 8003408:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	b00e      	add	sp, #56	; 0x38
 8003422:	bd80      	pop	{r7, pc}
 8003424:	fffffedf 	.word	0xfffffedf

08003428 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	225a      	movs	r2, #90	; 0x5a
 800343a:	2100      	movs	r1, #0
 800343c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2252      	movs	r2, #82	; 0x52
 8003442:	2100      	movs	r1, #0
 8003444:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	0018      	movs	r0, r3
 800344a:	f7ff fb33 	bl	8002ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b004      	add	sp, #16
 8003454:	bd80      	pop	{r7, pc}

08003456 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345e:	f3ef 8310 	mrs	r3, PRIMASK
 8003462:	60bb      	str	r3, [r7, #8]
  return(result);
 8003464:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	2301      	movs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2140      	movs	r1, #64	; 0x40
 8003480:	438a      	bics	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	0018      	movs	r0, r3
 80034a0:	f7ff fb00 	bl	8002aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b006      	add	sp, #24
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b002      	add	sp, #8
 80034ba:	bd80      	pop	{r7, pc}

080034bc <__errno>:
 80034bc:	4b01      	ldr	r3, [pc, #4]	; (80034c4 <__errno+0x8>)
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	4770      	bx	lr
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	20000010 	.word	0x20000010

080034c8 <__libc_init_array>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	2600      	movs	r6, #0
 80034cc:	4d0c      	ldr	r5, [pc, #48]	; (8003500 <__libc_init_array+0x38>)
 80034ce:	4c0d      	ldr	r4, [pc, #52]	; (8003504 <__libc_init_array+0x3c>)
 80034d0:	1b64      	subs	r4, r4, r5
 80034d2:	10a4      	asrs	r4, r4, #2
 80034d4:	42a6      	cmp	r6, r4
 80034d6:	d109      	bne.n	80034ec <__libc_init_array+0x24>
 80034d8:	2600      	movs	r6, #0
 80034da:	f000 f90d 	bl	80036f8 <_init>
 80034de:	4d0a      	ldr	r5, [pc, #40]	; (8003508 <__libc_init_array+0x40>)
 80034e0:	4c0a      	ldr	r4, [pc, #40]	; (800350c <__libc_init_array+0x44>)
 80034e2:	1b64      	subs	r4, r4, r5
 80034e4:	10a4      	asrs	r4, r4, #2
 80034e6:	42a6      	cmp	r6, r4
 80034e8:	d105      	bne.n	80034f6 <__libc_init_array+0x2e>
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	00b3      	lsls	r3, r6, #2
 80034ee:	58eb      	ldr	r3, [r5, r3]
 80034f0:	4798      	blx	r3
 80034f2:	3601      	adds	r6, #1
 80034f4:	e7ee      	b.n	80034d4 <__libc_init_array+0xc>
 80034f6:	00b3      	lsls	r3, r6, #2
 80034f8:	58eb      	ldr	r3, [r5, r3]
 80034fa:	4798      	blx	r3
 80034fc:	3601      	adds	r6, #1
 80034fe:	e7f2      	b.n	80034e6 <__libc_init_array+0x1e>
 8003500:	0800378c 	.word	0x0800378c
 8003504:	0800378c 	.word	0x0800378c
 8003508:	0800378c 	.word	0x0800378c
 800350c:	08003790 	.word	0x08003790

08003510 <malloc>:
 8003510:	b510      	push	{r4, lr}
 8003512:	4b03      	ldr	r3, [pc, #12]	; (8003520 <malloc+0x10>)
 8003514:	0001      	movs	r1, r0
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	f000 f838 	bl	800358c <_malloc_r>
 800351c:	bd10      	pop	{r4, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	20000010 	.word	0x20000010

08003524 <memcpy>:
 8003524:	2300      	movs	r3, #0
 8003526:	b510      	push	{r4, lr}
 8003528:	429a      	cmp	r2, r3
 800352a:	d100      	bne.n	800352e <memcpy+0xa>
 800352c:	bd10      	pop	{r4, pc}
 800352e:	5ccc      	ldrb	r4, [r1, r3]
 8003530:	54c4      	strb	r4, [r0, r3]
 8003532:	3301      	adds	r3, #1
 8003534:	e7f8      	b.n	8003528 <memcpy+0x4>

08003536 <memset>:
 8003536:	0003      	movs	r3, r0
 8003538:	1882      	adds	r2, r0, r2
 800353a:	4293      	cmp	r3, r2
 800353c:	d100      	bne.n	8003540 <memset+0xa>
 800353e:	4770      	bx	lr
 8003540:	7019      	strb	r1, [r3, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	e7f9      	b.n	800353a <memset+0x4>
	...

08003548 <sbrk_aligned>:
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	4e0f      	ldr	r6, [pc, #60]	; (8003588 <sbrk_aligned+0x40>)
 800354c:	000d      	movs	r5, r1
 800354e:	6831      	ldr	r1, [r6, #0]
 8003550:	0004      	movs	r4, r0
 8003552:	2900      	cmp	r1, #0
 8003554:	d102      	bne.n	800355c <sbrk_aligned+0x14>
 8003556:	f000 f88f 	bl	8003678 <_sbrk_r>
 800355a:	6030      	str	r0, [r6, #0]
 800355c:	0029      	movs	r1, r5
 800355e:	0020      	movs	r0, r4
 8003560:	f000 f88a 	bl	8003678 <_sbrk_r>
 8003564:	1c43      	adds	r3, r0, #1
 8003566:	d00a      	beq.n	800357e <sbrk_aligned+0x36>
 8003568:	2303      	movs	r3, #3
 800356a:	1cc5      	adds	r5, r0, #3
 800356c:	439d      	bics	r5, r3
 800356e:	42a8      	cmp	r0, r5
 8003570:	d007      	beq.n	8003582 <sbrk_aligned+0x3a>
 8003572:	1a29      	subs	r1, r5, r0
 8003574:	0020      	movs	r0, r4
 8003576:	f000 f87f 	bl	8003678 <_sbrk_r>
 800357a:	1c43      	adds	r3, r0, #1
 800357c:	d101      	bne.n	8003582 <sbrk_aligned+0x3a>
 800357e:	2501      	movs	r5, #1
 8003580:	426d      	negs	r5, r5
 8003582:	0028      	movs	r0, r5
 8003584:	bd70      	pop	{r4, r5, r6, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	200001a4 	.word	0x200001a4

0800358c <_malloc_r>:
 800358c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800358e:	2203      	movs	r2, #3
 8003590:	1ccb      	adds	r3, r1, #3
 8003592:	4393      	bics	r3, r2
 8003594:	3308      	adds	r3, #8
 8003596:	0006      	movs	r6, r0
 8003598:	001f      	movs	r7, r3
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d232      	bcs.n	8003604 <_malloc_r+0x78>
 800359e:	270c      	movs	r7, #12
 80035a0:	42b9      	cmp	r1, r7
 80035a2:	d831      	bhi.n	8003608 <_malloc_r+0x7c>
 80035a4:	0030      	movs	r0, r6
 80035a6:	f000 f895 	bl	80036d4 <__malloc_lock>
 80035aa:	4d32      	ldr	r5, [pc, #200]	; (8003674 <_malloc_r+0xe8>)
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	001c      	movs	r4, r3
 80035b0:	2c00      	cmp	r4, #0
 80035b2:	d12e      	bne.n	8003612 <_malloc_r+0x86>
 80035b4:	0039      	movs	r1, r7
 80035b6:	0030      	movs	r0, r6
 80035b8:	f7ff ffc6 	bl	8003548 <sbrk_aligned>
 80035bc:	0004      	movs	r4, r0
 80035be:	1c43      	adds	r3, r0, #1
 80035c0:	d11e      	bne.n	8003600 <_malloc_r+0x74>
 80035c2:	682c      	ldr	r4, [r5, #0]
 80035c4:	0025      	movs	r5, r4
 80035c6:	2d00      	cmp	r5, #0
 80035c8:	d14a      	bne.n	8003660 <_malloc_r+0xd4>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	0029      	movs	r1, r5
 80035ce:	18e3      	adds	r3, r4, r3
 80035d0:	0030      	movs	r0, r6
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	f000 f850 	bl	8003678 <_sbrk_r>
 80035d8:	9b01      	ldr	r3, [sp, #4]
 80035da:	4283      	cmp	r3, r0
 80035dc:	d143      	bne.n	8003666 <_malloc_r+0xda>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	3703      	adds	r7, #3
 80035e2:	1aff      	subs	r7, r7, r3
 80035e4:	2303      	movs	r3, #3
 80035e6:	439f      	bics	r7, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	2f0c      	cmp	r7, #12
 80035ec:	d200      	bcs.n	80035f0 <_malloc_r+0x64>
 80035ee:	270c      	movs	r7, #12
 80035f0:	0039      	movs	r1, r7
 80035f2:	0030      	movs	r0, r6
 80035f4:	f7ff ffa8 	bl	8003548 <sbrk_aligned>
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	d034      	beq.n	8003666 <_malloc_r+0xda>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	19df      	adds	r7, r3, r7
 8003600:	6027      	str	r7, [r4, #0]
 8003602:	e013      	b.n	800362c <_malloc_r+0xa0>
 8003604:	2b00      	cmp	r3, #0
 8003606:	dacb      	bge.n	80035a0 <_malloc_r+0x14>
 8003608:	230c      	movs	r3, #12
 800360a:	2500      	movs	r5, #0
 800360c:	6033      	str	r3, [r6, #0]
 800360e:	0028      	movs	r0, r5
 8003610:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	1bd1      	subs	r1, r2, r7
 8003616:	d420      	bmi.n	800365a <_malloc_r+0xce>
 8003618:	290b      	cmp	r1, #11
 800361a:	d917      	bls.n	800364c <_malloc_r+0xc0>
 800361c:	19e2      	adds	r2, r4, r7
 800361e:	6027      	str	r7, [r4, #0]
 8003620:	42a3      	cmp	r3, r4
 8003622:	d111      	bne.n	8003648 <_malloc_r+0xbc>
 8003624:	602a      	str	r2, [r5, #0]
 8003626:	6863      	ldr	r3, [r4, #4]
 8003628:	6011      	str	r1, [r2, #0]
 800362a:	6053      	str	r3, [r2, #4]
 800362c:	0030      	movs	r0, r6
 800362e:	0025      	movs	r5, r4
 8003630:	f000 f858 	bl	80036e4 <__malloc_unlock>
 8003634:	2207      	movs	r2, #7
 8003636:	350b      	adds	r5, #11
 8003638:	1d23      	adds	r3, r4, #4
 800363a:	4395      	bics	r5, r2
 800363c:	1aea      	subs	r2, r5, r3
 800363e:	429d      	cmp	r5, r3
 8003640:	d0e5      	beq.n	800360e <_malloc_r+0x82>
 8003642:	1b5b      	subs	r3, r3, r5
 8003644:	50a3      	str	r3, [r4, r2]
 8003646:	e7e2      	b.n	800360e <_malloc_r+0x82>
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	e7ec      	b.n	8003626 <_malloc_r+0x9a>
 800364c:	6862      	ldr	r2, [r4, #4]
 800364e:	42a3      	cmp	r3, r4
 8003650:	d101      	bne.n	8003656 <_malloc_r+0xca>
 8003652:	602a      	str	r2, [r5, #0]
 8003654:	e7ea      	b.n	800362c <_malloc_r+0xa0>
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	e7e8      	b.n	800362c <_malloc_r+0xa0>
 800365a:	0023      	movs	r3, r4
 800365c:	6864      	ldr	r4, [r4, #4]
 800365e:	e7a7      	b.n	80035b0 <_malloc_r+0x24>
 8003660:	002c      	movs	r4, r5
 8003662:	686d      	ldr	r5, [r5, #4]
 8003664:	e7af      	b.n	80035c6 <_malloc_r+0x3a>
 8003666:	230c      	movs	r3, #12
 8003668:	0030      	movs	r0, r6
 800366a:	6033      	str	r3, [r6, #0]
 800366c:	f000 f83a 	bl	80036e4 <__malloc_unlock>
 8003670:	e7cd      	b.n	800360e <_malloc_r+0x82>
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	200001a0 	.word	0x200001a0

08003678 <_sbrk_r>:
 8003678:	2300      	movs	r3, #0
 800367a:	b570      	push	{r4, r5, r6, lr}
 800367c:	4d06      	ldr	r5, [pc, #24]	; (8003698 <_sbrk_r+0x20>)
 800367e:	0004      	movs	r4, r0
 8003680:	0008      	movs	r0, r1
 8003682:	602b      	str	r3, [r5, #0]
 8003684:	f7fd fa92 	bl	8000bac <_sbrk>
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	d103      	bne.n	8003694 <_sbrk_r+0x1c>
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d000      	beq.n	8003694 <_sbrk_r+0x1c>
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	bd70      	pop	{r4, r5, r6, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	200001a8 	.word	0x200001a8

0800369c <strcpy>:
 800369c:	0003      	movs	r3, r0
 800369e:	780a      	ldrb	r2, [r1, #0]
 80036a0:	3101      	adds	r1, #1
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	3301      	adds	r3, #1
 80036a6:	2a00      	cmp	r2, #0
 80036a8:	d1f9      	bne.n	800369e <strcpy+0x2>
 80036aa:	4770      	bx	lr

080036ac <strncpy>:
 80036ac:	0003      	movs	r3, r0
 80036ae:	b530      	push	{r4, r5, lr}
 80036b0:	001d      	movs	r5, r3
 80036b2:	2a00      	cmp	r2, #0
 80036b4:	d006      	beq.n	80036c4 <strncpy+0x18>
 80036b6:	780c      	ldrb	r4, [r1, #0]
 80036b8:	3a01      	subs	r2, #1
 80036ba:	3301      	adds	r3, #1
 80036bc:	702c      	strb	r4, [r5, #0]
 80036be:	3101      	adds	r1, #1
 80036c0:	2c00      	cmp	r4, #0
 80036c2:	d1f5      	bne.n	80036b0 <strncpy+0x4>
 80036c4:	2100      	movs	r1, #0
 80036c6:	189a      	adds	r2, r3, r2
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d100      	bne.n	80036ce <strncpy+0x22>
 80036cc:	bd30      	pop	{r4, r5, pc}
 80036ce:	7019      	strb	r1, [r3, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	e7f9      	b.n	80036c8 <strncpy+0x1c>

080036d4 <__malloc_lock>:
 80036d4:	b510      	push	{r4, lr}
 80036d6:	4802      	ldr	r0, [pc, #8]	; (80036e0 <__malloc_lock+0xc>)
 80036d8:	f000 f80c 	bl	80036f4 <__retarget_lock_acquire_recursive>
 80036dc:	bd10      	pop	{r4, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	200001ac 	.word	0x200001ac

080036e4 <__malloc_unlock>:
 80036e4:	b510      	push	{r4, lr}
 80036e6:	4802      	ldr	r0, [pc, #8]	; (80036f0 <__malloc_unlock+0xc>)
 80036e8:	f000 f805 	bl	80036f6 <__retarget_lock_release_recursive>
 80036ec:	bd10      	pop	{r4, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	200001ac 	.word	0x200001ac

080036f4 <__retarget_lock_acquire_recursive>:
 80036f4:	4770      	bx	lr

080036f6 <__retarget_lock_release_recursive>:
 80036f6:	4770      	bx	lr

080036f8 <_init>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fe:	bc08      	pop	{r3}
 8003700:	469e      	mov	lr, r3
 8003702:	4770      	bx	lr

08003704 <_fini>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr
