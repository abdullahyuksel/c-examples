
gsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005120  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053cc  080053cc  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053d4  080053d4  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  080053dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200000dc  080054b8  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080054b8  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd36  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff6  00000000  00000000  0002be3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002de30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002e6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000802c  00000000  00000000  0002ee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00002a03  00000000  00000000  00036e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00039867  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002808  00000000  00000000  000398b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000dc 	.word	0x200000dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080051c8 	.word	0x080051c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000e0 	.word	0x200000e0
 8000104:	080051c8 	.word	0x080051c8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <HAL_UART_ErrorCallback>:
void quectell_begin();
gsm_t quectell_message_data(char *num,char *message);
gsm_t quectell_ATcommand_data(char *request, uint8_t try);

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	// Parity Error
	if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET))
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	2201      	movs	r2, #1
 80004dc:	4013      	ands	r3, r2
 80004de:	d003      	beq.n	80004e8 <HAL_UART_ErrorCallback+0x1c>
	{
		__HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2201      	movs	r2, #1
 80004e6:	621a      	str	r2, [r3, #32]
	}
	// Frame Error
	if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET))
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	2202      	movs	r2, #2
 80004f0:	4013      	ands	r3, r2
 80004f2:	d003      	beq.n	80004fc <HAL_UART_ErrorCallback+0x30>
	{
		__HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2202      	movs	r2, #2
 80004fa:	621a      	str	r2, [r3, #32]
	}
	// Noise Error
	if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET))
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	2204      	movs	r2, #4
 8000504:	4013      	ands	r3, r2
 8000506:	d003      	beq.n	8000510 <HAL_UART_ErrorCallback+0x44>
	{
		__HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2204      	movs	r2, #4
 800050e:	621a      	str	r2, [r3, #32]
	}
	// Overrun Error
	if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET))
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	2208      	movs	r2, #8
 8000518:	4013      	ands	r3, r2
 800051a:	d003      	beq.n	8000524 <HAL_UART_ErrorCallback+0x58>
	{
		__HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2208      	movs	r2, #8
 8000522:	621a      	str	r2, [r3, #32]
	}

}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}

0800052c <quectell_ATcommand_data>:

gsm_t quectell_ATcommand_data(char *request, uint8_t try)
{
 800052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052e:	b0af      	sub	sp, #188	; 0xbc
 8000530:	af00      	add	r7, sp, #0
 8000532:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000534:	62b9      	str	r1, [r7, #40]	; 0x28
 8000536:	2327      	movs	r3, #39	; 0x27
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	701a      	strb	r2, [r3, #0]
	struct gsm Paket={"\0"};
 800053c:	2314      	movs	r3, #20
 800053e:	2220      	movs	r2, #32
 8000540:	189b      	adds	r3, r3, r2
 8000542:	19db      	adds	r3, r3, r7
 8000544:	0018      	movs	r0, r3
 8000546:	236b      	movs	r3, #107	; 0x6b
 8000548:	001a      	movs	r2, r3
 800054a:	2100      	movs	r1, #0
 800054c:	f003 fbb1 	bl	8003cb2 <memset>
    char *receive = malloc(200);
 8000550:	20c8      	movs	r0, #200	; 0xc8
 8000552:	f003 fb9b 	bl	8003c8c <malloc>
 8000556:	0003      	movs	r3, r0
 8000558:	2290      	movs	r2, #144	; 0x90
 800055a:	2120      	movs	r1, #32
 800055c:	1852      	adds	r2, r2, r1
 800055e:	19d2      	adds	r2, r2, r7
 8000560:	6013      	str	r3, [r2, #0]
    char *sendreceive = malloc(200);
 8000562:	20c8      	movs	r0, #200	; 0xc8
 8000564:	f003 fb92 	bl	8003c8c <malloc>
 8000568:	0003      	movs	r3, r0
 800056a:	228c      	movs	r2, #140	; 0x8c
 800056c:	2120      	movs	r1, #32
 800056e:	1852      	adds	r2, r2, r1
 8000570:	19d2      	adds	r2, r2, r7
 8000572:	6013      	str	r3, [r2, #0]
    int request_len = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	2288      	movs	r2, #136	; 0x88
 8000578:	2120      	movs	r1, #32
 800057a:	1852      	adds	r2, r2, r1
 800057c:	19d2      	adds	r2, r2, r7
 800057e:	6013      	str	r3, [r2, #0]

	while(try)
 8000580:	e262      	b.n	8000a48 <quectell_ATcommand_data+0x51c>
	{
 8000582:	466b      	mov	r3, sp
 8000584:	001e      	movs	r6, r3
		try--;
 8000586:	2327      	movs	r3, #39	; 0x27
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	781a      	ldrb	r2, [r3, #0]
 800058c:	2327      	movs	r3, #39	; 0x27
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	3a01      	subs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
		Paket.trySended++;
 8000594:	2014      	movs	r0, #20
 8000596:	2320      	movs	r3, #32
 8000598:	18c3      	adds	r3, r0, r3
 800059a:	19db      	adds	r3, r3, r7
 800059c:	2265      	movs	r2, #101	; 0x65
 800059e:	5c9b      	ldrb	r3, [r3, r2]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b2d9      	uxtb	r1, r3
 80005a4:	2320      	movs	r3, #32
 80005a6:	18c3      	adds	r3, r0, r3
 80005a8:	19db      	adds	r3, r3, r7
 80005aa:	2265      	movs	r2, #101	; 0x65
 80005ac:	5499      	strb	r1, [r3, r2]
		request_len = strlen(request);
 80005ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff fda9 	bl	8000108 <strlen>
 80005b6:	0003      	movs	r3, r0
 80005b8:	2288      	movs	r2, #136	; 0x88
 80005ba:	2120      	movs	r1, #32
 80005bc:	1851      	adds	r1, r2, r1
 80005be:	19c9      	adds	r1, r1, r7
 80005c0:	600b      	str	r3, [r1, #0]
		char fianlRequest[request_len+2];
 80005c2:	2320      	movs	r3, #32
 80005c4:	18d3      	adds	r3, r2, r3
 80005c6:	19db      	adds	r3, r3, r7
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3302      	adds	r3, #2
 80005cc:	1e5a      	subs	r2, r3, #1
 80005ce:	2184      	movs	r1, #132	; 0x84
 80005d0:	2020      	movs	r0, #32
 80005d2:	1809      	adds	r1, r1, r0
 80005d4:	19c9      	adds	r1, r1, r7
 80005d6:	600a      	str	r2, [r1, #0]
 80005d8:	001a      	movs	r2, r3
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	2200      	movs	r2, #0
 80005de:	60fa      	str	r2, [r7, #12]
 80005e0:	68b8      	ldr	r0, [r7, #8]
 80005e2:	68f9      	ldr	r1, [r7, #12]
 80005e4:	0002      	movs	r2, r0
 80005e6:	0f52      	lsrs	r2, r2, #29
 80005e8:	000c      	movs	r4, r1
 80005ea:	00e4      	lsls	r4, r4, #3
 80005ec:	61fc      	str	r4, [r7, #28]
 80005ee:	69fc      	ldr	r4, [r7, #28]
 80005f0:	4314      	orrs	r4, r2
 80005f2:	61fc      	str	r4, [r7, #28]
 80005f4:	0002      	movs	r2, r0
 80005f6:	00d2      	lsls	r2, r2, #3
 80005f8:	61ba      	str	r2, [r7, #24]
 80005fa:	001a      	movs	r2, r3
 80005fc:	603a      	str	r2, [r7, #0]
 80005fe:	2200      	movs	r2, #0
 8000600:	607a      	str	r2, [r7, #4]
 8000602:	6838      	ldr	r0, [r7, #0]
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	0002      	movs	r2, r0
 8000608:	0f52      	lsrs	r2, r2, #29
 800060a:	000c      	movs	r4, r1
 800060c:	00e4      	lsls	r4, r4, #3
 800060e:	617c      	str	r4, [r7, #20]
 8000610:	697c      	ldr	r4, [r7, #20]
 8000612:	4314      	orrs	r4, r2
 8000614:	617c      	str	r4, [r7, #20]
 8000616:	0002      	movs	r2, r0
 8000618:	00d2      	lsls	r2, r2, #3
 800061a:	613a      	str	r2, [r7, #16]
 800061c:	3307      	adds	r3, #7
 800061e:	08db      	lsrs	r3, r3, #3
 8000620:	00db      	lsls	r3, r3, #3
 8000622:	466a      	mov	r2, sp
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	469d      	mov	sp, r3
 8000628:	466b      	mov	r3, sp
 800062a:	3300      	adds	r3, #0
 800062c:	2080      	movs	r0, #128	; 0x80
 800062e:	2220      	movs	r2, #32
 8000630:	1882      	adds	r2, r0, r2
 8000632:	19d2      	adds	r2, r2, r7
 8000634:	6013      	str	r3, [r2, #0]
		sprintf(fianlRequest,"%s\r\n",request);
 8000636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000638:	49d0      	ldr	r1, [pc, #832]	; (800097c <quectell_ATcommand_data+0x450>)
 800063a:	0004      	movs	r4, r0
 800063c:	2320      	movs	r3, #32
 800063e:	18c3      	adds	r3, r0, r3
 8000640:	19db      	adds	r3, r3, r7
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	0018      	movs	r0, r3
 8000646:	f003 fc31 	bl	8003eac <siprintf>
		HAL_Delay(100);
 800064a:	2064      	movs	r0, #100	; 0x64
 800064c:	f000 ff4a 	bl	80014e4 <HAL_Delay>
		HAL_UART_ErrorCallback(&huart1);
 8000650:	4bcb      	ldr	r3, [pc, #812]	; (8000980 <quectell_ATcommand_data+0x454>)
 8000652:	0018      	movs	r0, r3
 8000654:	f7ff ff3a 	bl	80004cc <HAL_UART_ErrorCallback>
		HAL_UART_Transmit(&huart1,(uint8_t*) fianlRequest, strlen(fianlRequest), 250);
 8000658:	0020      	movs	r0, r4
 800065a:	0004      	movs	r4, r0
 800065c:	2320      	movs	r3, #32
 800065e:	18c3      	adds	r3, r0, r3
 8000660:	19db      	adds	r3, r3, r7
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	0018      	movs	r0, r3
 8000666:	f7ff fd4f 	bl	8000108 <strlen>
 800066a:	0003      	movs	r3, r0
 800066c:	b29a      	uxth	r2, r3
 800066e:	0020      	movs	r0, r4
 8000670:	2320      	movs	r3, #32
 8000672:	18c3      	adds	r3, r0, r3
 8000674:	19db      	adds	r3, r3, r7
 8000676:	6819      	ldr	r1, [r3, #0]
 8000678:	48c1      	ldr	r0, [pc, #772]	; (8000980 <quectell_ATcommand_data+0x454>)
 800067a:	23fa      	movs	r3, #250	; 0xfa
 800067c:	f002 f968 	bl	8002950 <HAL_UART_Transmit>
		HAL_UART_ErrorCallback(&huart1);
 8000680:	4bbf      	ldr	r3, [pc, #764]	; (8000980 <quectell_ATcommand_data+0x454>)
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff ff22 	bl	80004cc <HAL_UART_ErrorCallback>
		HAL_UART_Receive(&huart1,(uint8_t*) receive, 100, 3000);
 8000688:	4bbe      	ldr	r3, [pc, #760]	; (8000984 <quectell_ATcommand_data+0x458>)
 800068a:	2490      	movs	r4, #144	; 0x90
 800068c:	2220      	movs	r2, #32
 800068e:	18a2      	adds	r2, r4, r2
 8000690:	19d2      	adds	r2, r2, r7
 8000692:	6811      	ldr	r1, [r2, #0]
 8000694:	48ba      	ldr	r0, [pc, #744]	; (8000980 <quectell_ATcommand_data+0x454>)
 8000696:	2264      	movs	r2, #100	; 0x64
 8000698:	f002 fa02 	bl	8002aa0 <HAL_UART_Receive>
		HAL_Delay(300);
 800069c:	2396      	movs	r3, #150	; 0x96
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 ff1f 	bl	80014e4 <HAL_Delay>

		int receive_length = strlen(receive);
 80006a6:	2320      	movs	r3, #32
 80006a8:	18e3      	adds	r3, r4, r3
 80006aa:	19db      	adds	r3, r3, r7
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff fd2a 	bl	8000108 <strlen>
 80006b4:	0003      	movs	r3, r0
 80006b6:	2294      	movs	r2, #148	; 0x94
 80006b8:	2120      	movs	r1, #32
 80006ba:	1852      	adds	r2, r2, r1
 80006bc:	19d2      	adds	r2, r2, r7
 80006be:	6013      	str	r3, [r2, #0]

		while(receive_length)
 80006c0:	e1af      	b.n	8000a22 <quectell_ATcommand_data+0x4f6>
		{
			if((receive[receive_length-5]=='\r')
 80006c2:	2094      	movs	r0, #148	; 0x94
 80006c4:	2320      	movs	r3, #32
 80006c6:	18c3      	adds	r3, r0, r3
 80006c8:	19db      	adds	r3, r3, r7
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3b05      	subs	r3, #5
 80006ce:	2190      	movs	r1, #144	; 0x90
 80006d0:	2220      	movs	r2, #32
 80006d2:	188a      	adds	r2, r1, r2
 80006d4:	19d2      	adds	r2, r2, r7
 80006d6:	6812      	ldr	r2, [r2, #0]
 80006d8:	18d3      	adds	r3, r2, r3
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b0d      	cmp	r3, #13
 80006de:	d000      	beq.n	80006e2 <quectell_ATcommand_data+0x1b6>
 80006e0:	e078      	b.n	80007d4 <quectell_ATcommand_data+0x2a8>
				&& (receive[receive_length-4]=='\n')
 80006e2:	2320      	movs	r3, #32
 80006e4:	18c3      	adds	r3, r0, r3
 80006e6:	19db      	adds	r3, r3, r7
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3b04      	subs	r3, #4
 80006ec:	2220      	movs	r2, #32
 80006ee:	188a      	adds	r2, r1, r2
 80006f0:	19d2      	adds	r2, r2, r7
 80006f2:	6812      	ldr	r2, [r2, #0]
 80006f4:	18d3      	adds	r3, r2, r3
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b0a      	cmp	r3, #10
 80006fa:	d16b      	bne.n	80007d4 <quectell_ATcommand_data+0x2a8>
				&& (receive[receive_length-3]=='O')
 80006fc:	2320      	movs	r3, #32
 80006fe:	18c3      	adds	r3, r0, r3
 8000700:	19db      	adds	r3, r3, r7
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3b03      	subs	r3, #3
 8000706:	2220      	movs	r2, #32
 8000708:	188a      	adds	r2, r1, r2
 800070a:	19d2      	adds	r2, r2, r7
 800070c:	6812      	ldr	r2, [r2, #0]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b4f      	cmp	r3, #79	; 0x4f
 8000714:	d15e      	bne.n	80007d4 <quectell_ATcommand_data+0x2a8>
				&& (receive[receive_length-2]=='K')
 8000716:	2320      	movs	r3, #32
 8000718:	18c3      	adds	r3, r0, r3
 800071a:	19db      	adds	r3, r3, r7
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3b02      	subs	r3, #2
 8000720:	2220      	movs	r2, #32
 8000722:	188a      	adds	r2, r1, r2
 8000724:	19d2      	adds	r2, r2, r7
 8000726:	6812      	ldr	r2, [r2, #0]
 8000728:	18d3      	adds	r3, r2, r3
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b4b      	cmp	r3, #75	; 0x4b
 800072e:	d151      	bne.n	80007d4 <quectell_ATcommand_data+0x2a8>
				&& (receive[receive_length-1]=='\r')
 8000730:	2320      	movs	r3, #32
 8000732:	18c3      	adds	r3, r0, r3
 8000734:	19db      	adds	r3, r3, r7
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3b01      	subs	r3, #1
 800073a:	2220      	movs	r2, #32
 800073c:	188a      	adds	r2, r1, r2
 800073e:	19d2      	adds	r2, r2, r7
 8000740:	6812      	ldr	r2, [r2, #0]
 8000742:	18d3      	adds	r3, r2, r3
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b0d      	cmp	r3, #13
 8000748:	d144      	bne.n	80007d4 <quectell_ATcommand_data+0x2a8>
				&& (receive[receive_length]=='\n')
 800074a:	2320      	movs	r3, #32
 800074c:	18c3      	adds	r3, r0, r3
 800074e:	19db      	adds	r3, r3, r7
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2220      	movs	r2, #32
 8000754:	188a      	adds	r2, r1, r2
 8000756:	19d2      	adds	r2, r2, r7
 8000758:	6812      	ldr	r2, [r2, #0]
 800075a:	18d3      	adds	r3, r2, r3
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b0a      	cmp	r3, #10
 8000760:	d138      	bne.n	80007d4 <quectell_ATcommand_data+0x2a8>
				)
			{
				strncpy(&Paket.data[0],&receive[0],receive_length-6);
 8000762:	0004      	movs	r4, r0
 8000764:	2320      	movs	r3, #32
 8000766:	18c3      	adds	r3, r0, r3
 8000768:	19db      	adds	r3, r3, r7
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b06      	subs	r3, #6
 800076e:	001a      	movs	r2, r3
 8000770:	2320      	movs	r3, #32
 8000772:	18cb      	adds	r3, r1, r3
 8000774:	19db      	adds	r3, r3, r7
 8000776:	6819      	ldr	r1, [r3, #0]
 8000778:	2514      	movs	r5, #20
 800077a:	2320      	movs	r3, #32
 800077c:	18eb      	adds	r3, r5, r3
 800077e:	19db      	adds	r3, r3, r7
 8000780:	0018      	movs	r0, r3
 8000782:	f003 fbb3 	bl	8003eec <strncpy>
				Paket.len=receive_length-6;
 8000786:	0020      	movs	r0, r4
 8000788:	2320      	movs	r3, #32
 800078a:	18c3      	adds	r3, r0, r3
 800078c:	19db      	adds	r3, r3, r7
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	3b06      	subs	r3, #6
 8000794:	b2d9      	uxtb	r1, r3
 8000796:	2320      	movs	r3, #32
 8000798:	18eb      	adds	r3, r5, r3
 800079a:	19db      	adds	r3, r3, r7
 800079c:	2264      	movs	r2, #100	; 0x64
 800079e:	5499      	strb	r1, [r3, r2]
				receive_length=0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	2220      	movs	r2, #32
 80007a4:	1882      	adds	r2, r0, r2
 80007a6:	19d2      	adds	r2, r2, r7
 80007a8:	6013      	str	r3, [r2, #0]
				Paket.result = RESULT_OK;
 80007aa:	2320      	movs	r3, #32
 80007ac:	18eb      	adds	r3, r5, r3
 80007ae:	19db      	adds	r3, r3, r7
 80007b0:	226a      	movs	r2, #106	; 0x6a
 80007b2:	2101      	movs	r1, #1
 80007b4:	5499      	strb	r1, [r3, r2]
				try=0;
 80007b6:	2327      	movs	r3, #39	; 0x27
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
				return Paket;
 80007be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007c0:	2320      	movs	r3, #32
 80007c2:	18eb      	adds	r3, r5, r3
 80007c4:	19db      	adds	r3, r3, r7
 80007c6:	0010      	movs	r0, r2
 80007c8:	0019      	movs	r1, r3
 80007ca:	236b      	movs	r3, #107	; 0x6b
 80007cc:	001a      	movs	r2, r3
 80007ce:	f003 fa67 	bl	8003ca0 <memcpy>
 80007d2:	e137      	b.n	8000a44 <quectell_ATcommand_data+0x518>
			}
			else if((receive[receive_length-14]=='C')
 80007d4:	2094      	movs	r0, #148	; 0x94
 80007d6:	2320      	movs	r3, #32
 80007d8:	18c3      	adds	r3, r0, r3
 80007da:	19db      	adds	r3, r3, r7
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3b0e      	subs	r3, #14
 80007e0:	2190      	movs	r1, #144	; 0x90
 80007e2:	2220      	movs	r2, #32
 80007e4:	188a      	adds	r2, r1, r2
 80007e6:	19d2      	adds	r2, r2, r7
 80007e8:	6812      	ldr	r2, [r2, #0]
 80007ea:	18d3      	adds	r3, r2, r3
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b43      	cmp	r3, #67	; 0x43
 80007f0:	d000      	beq.n	80007f4 <quectell_ATcommand_data+0x2c8>
 80007f2:	e0c9      	b.n	8000988 <quectell_ATcommand_data+0x45c>
				&& (receive[receive_length-13]=='M')
 80007f4:	2320      	movs	r3, #32
 80007f6:	18c3      	adds	r3, r0, r3
 80007f8:	19db      	adds	r3, r3, r7
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3b0d      	subs	r3, #13
 80007fe:	2220      	movs	r2, #32
 8000800:	188a      	adds	r2, r1, r2
 8000802:	19d2      	adds	r2, r2, r7
 8000804:	6812      	ldr	r2, [r2, #0]
 8000806:	18d3      	adds	r3, r2, r3
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b4d      	cmp	r3, #77	; 0x4d
 800080c:	d000      	beq.n	8000810 <quectell_ATcommand_data+0x2e4>
 800080e:	e0bb      	b.n	8000988 <quectell_ATcommand_data+0x45c>
				&& (receive[receive_length-12]=='E')
 8000810:	2320      	movs	r3, #32
 8000812:	18c3      	adds	r3, r0, r3
 8000814:	19db      	adds	r3, r3, r7
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3b0c      	subs	r3, #12
 800081a:	2220      	movs	r2, #32
 800081c:	188a      	adds	r2, r1, r2
 800081e:	19d2      	adds	r2, r2, r7
 8000820:	6812      	ldr	r2, [r2, #0]
 8000822:	18d3      	adds	r3, r2, r3
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b45      	cmp	r3, #69	; 0x45
 8000828:	d000      	beq.n	800082c <quectell_ATcommand_data+0x300>
 800082a:	e0ad      	b.n	8000988 <quectell_ATcommand_data+0x45c>
				&& (receive[receive_length-11]==' ')
 800082c:	2320      	movs	r3, #32
 800082e:	18c3      	adds	r3, r0, r3
 8000830:	19db      	adds	r3, r3, r7
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3b0b      	subs	r3, #11
 8000836:	2220      	movs	r2, #32
 8000838:	188a      	adds	r2, r1, r2
 800083a:	19d2      	adds	r2, r2, r7
 800083c:	6812      	ldr	r2, [r2, #0]
 800083e:	18d3      	adds	r3, r2, r3
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b20      	cmp	r3, #32
 8000844:	d000      	beq.n	8000848 <quectell_ATcommand_data+0x31c>
 8000846:	e09f      	b.n	8000988 <quectell_ATcommand_data+0x45c>
				&& (receive[receive_length-10]=='E')
 8000848:	2320      	movs	r3, #32
 800084a:	18c3      	adds	r3, r0, r3
 800084c:	19db      	adds	r3, r3, r7
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3b0a      	subs	r3, #10
 8000852:	2220      	movs	r2, #32
 8000854:	188a      	adds	r2, r1, r2
 8000856:	19d2      	adds	r2, r2, r7
 8000858:	6812      	ldr	r2, [r2, #0]
 800085a:	18d3      	adds	r3, r2, r3
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b45      	cmp	r3, #69	; 0x45
 8000860:	d000      	beq.n	8000864 <quectell_ATcommand_data+0x338>
 8000862:	e091      	b.n	8000988 <quectell_ATcommand_data+0x45c>
				&& (receive[receive_length-9]=='R')
 8000864:	2320      	movs	r3, #32
 8000866:	18c3      	adds	r3, r0, r3
 8000868:	19db      	adds	r3, r3, r7
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3b09      	subs	r3, #9
 800086e:	2220      	movs	r2, #32
 8000870:	188a      	adds	r2, r1, r2
 8000872:	19d2      	adds	r2, r2, r7
 8000874:	6812      	ldr	r2, [r2, #0]
 8000876:	18d3      	adds	r3, r2, r3
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b52      	cmp	r3, #82	; 0x52
 800087c:	d000      	beq.n	8000880 <quectell_ATcommand_data+0x354>
 800087e:	e083      	b.n	8000988 <quectell_ATcommand_data+0x45c>
				&& (receive[receive_length-8]=='R')
 8000880:	2320      	movs	r3, #32
 8000882:	18c3      	adds	r3, r0, r3
 8000884:	19db      	adds	r3, r3, r7
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3b08      	subs	r3, #8
 800088a:	2220      	movs	r2, #32
 800088c:	188a      	adds	r2, r1, r2
 800088e:	19d2      	adds	r2, r2, r7
 8000890:	6812      	ldr	r2, [r2, #0]
 8000892:	18d3      	adds	r3, r2, r3
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b52      	cmp	r3, #82	; 0x52
 8000898:	d000      	beq.n	800089c <quectell_ATcommand_data+0x370>
 800089a:	e075      	b.n	8000988 <quectell_ATcommand_data+0x45c>
				&& (receive[receive_length-7]=='O')
 800089c:	2320      	movs	r3, #32
 800089e:	18c3      	adds	r3, r0, r3
 80008a0:	19db      	adds	r3, r3, r7
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3b07      	subs	r3, #7
 80008a6:	2220      	movs	r2, #32
 80008a8:	188a      	adds	r2, r1, r2
 80008aa:	19d2      	adds	r2, r2, r7
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	18d3      	adds	r3, r2, r3
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b4f      	cmp	r3, #79	; 0x4f
 80008b4:	d168      	bne.n	8000988 <quectell_ATcommand_data+0x45c>
				&& (receive[receive_length-6]=='R')
 80008b6:	2320      	movs	r3, #32
 80008b8:	18c3      	adds	r3, r0, r3
 80008ba:	19db      	adds	r3, r3, r7
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	3b06      	subs	r3, #6
 80008c0:	2220      	movs	r2, #32
 80008c2:	188a      	adds	r2, r1, r2
 80008c4:	19d2      	adds	r2, r2, r7
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	18d3      	adds	r3, r2, r3
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b52      	cmp	r3, #82	; 0x52
 80008ce:	d15b      	bne.n	8000988 <quectell_ATcommand_data+0x45c>
				&& (receive[receive_length-5]==':')
 80008d0:	2320      	movs	r3, #32
 80008d2:	18c3      	adds	r3, r0, r3
 80008d4:	19db      	adds	r3, r3, r7
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3b05      	subs	r3, #5
 80008da:	2220      	movs	r2, #32
 80008dc:	188a      	adds	r2, r1, r2
 80008de:	19d2      	adds	r2, r2, r7
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b3a      	cmp	r3, #58	; 0x3a
 80008e8:	d14e      	bne.n	8000988 <quectell_ATcommand_data+0x45c>
				&& (receive[receive_length-4]==' ')
 80008ea:	2320      	movs	r3, #32
 80008ec:	18c3      	adds	r3, r0, r3
 80008ee:	19db      	adds	r3, r3, r7
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3b04      	subs	r3, #4
 80008f4:	2220      	movs	r2, #32
 80008f6:	188a      	adds	r2, r1, r2
 80008f8:	19d2      	adds	r2, r2, r7
 80008fa:	6812      	ldr	r2, [r2, #0]
 80008fc:	18d3      	adds	r3, r2, r3
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b20      	cmp	r3, #32
 8000902:	d141      	bne.n	8000988 <quectell_ATcommand_data+0x45c>
				)
			{
				strncpy(&Paket.errorCode[0],&receive[receive_length-3],4);
 8000904:	0004      	movs	r4, r0
 8000906:	2320      	movs	r3, #32
 8000908:	18c3      	adds	r3, r0, r3
 800090a:	19db      	adds	r3, r3, r7
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3b03      	subs	r3, #3
 8000910:	2220      	movs	r2, #32
 8000912:	188a      	adds	r2, r1, r2
 8000914:	19d2      	adds	r2, r2, r7
 8000916:	6812      	ldr	r2, [r2, #0]
 8000918:	18d1      	adds	r1, r2, r3
 800091a:	2514      	movs	r5, #20
 800091c:	2320      	movs	r3, #32
 800091e:	18eb      	adds	r3, r5, r3
 8000920:	19db      	adds	r3, r3, r7
 8000922:	3366      	adds	r3, #102	; 0x66
 8000924:	2204      	movs	r2, #4
 8000926:	0018      	movs	r0, r3
 8000928:	f003 fae0 	bl	8003eec <strncpy>
				Paket.len=receive_length-15;
 800092c:	0020      	movs	r0, r4
 800092e:	2320      	movs	r3, #32
 8000930:	18c3      	adds	r3, r0, r3
 8000932:	19db      	adds	r3, r3, r7
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	3b0f      	subs	r3, #15
 800093a:	b2d9      	uxtb	r1, r3
 800093c:	2320      	movs	r3, #32
 800093e:	18eb      	adds	r3, r5, r3
 8000940:	19db      	adds	r3, r3, r7
 8000942:	2264      	movs	r2, #100	; 0x64
 8000944:	5499      	strb	r1, [r3, r2]
				receive_length=0;
 8000946:	2300      	movs	r3, #0
 8000948:	2220      	movs	r2, #32
 800094a:	1882      	adds	r2, r0, r2
 800094c:	19d2      	adds	r2, r2, r7
 800094e:	6013      	str	r3, [r2, #0]
				Paket.result = RESULT_ERROR;
 8000950:	2320      	movs	r3, #32
 8000952:	18eb      	adds	r3, r5, r3
 8000954:	19db      	adds	r3, r3, r7
 8000956:	226a      	movs	r2, #106	; 0x6a
 8000958:	2102      	movs	r1, #2
 800095a:	5499      	strb	r1, [r3, r2]
				try=0;
 800095c:	2327      	movs	r3, #39	; 0x27
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
				return Paket;
 8000964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000966:	2320      	movs	r3, #32
 8000968:	18eb      	adds	r3, r5, r3
 800096a:	19db      	adds	r3, r3, r7
 800096c:	0010      	movs	r0, r2
 800096e:	0019      	movs	r1, r3
 8000970:	236b      	movs	r3, #107	; 0x6b
 8000972:	001a      	movs	r2, r3
 8000974:	f003 f994 	bl	8003ca0 <memcpy>
 8000978:	e064      	b.n	8000a44 <quectell_ATcommand_data+0x518>
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	080051e0 	.word	0x080051e0
 8000980:	2000010c 	.word	0x2000010c
 8000984:	00000bb8 	.word	0x00000bb8
			}
			else if((receive[receive_length-1]=='>')
 8000988:	2094      	movs	r0, #148	; 0x94
 800098a:	2320      	movs	r3, #32
 800098c:	18c3      	adds	r3, r0, r3
 800098e:	19db      	adds	r3, r3, r7
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3b01      	subs	r3, #1
 8000994:	2190      	movs	r1, #144	; 0x90
 8000996:	2220      	movs	r2, #32
 8000998:	188a      	adds	r2, r1, r2
 800099a:	19d2      	adds	r2, r2, r7
 800099c:	6812      	ldr	r2, [r2, #0]
 800099e:	18d3      	adds	r3, r2, r3
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b3e      	cmp	r3, #62	; 0x3e
 80009a4:	d133      	bne.n	8000a0e <quectell_ATcommand_data+0x4e2>
				&& (receive[receive_length]==' ')
 80009a6:	2320      	movs	r3, #32
 80009a8:	18c3      	adds	r3, r0, r3
 80009aa:	19db      	adds	r3, r3, r7
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2220      	movs	r2, #32
 80009b0:	188a      	adds	r2, r1, r2
 80009b2:	19d2      	adds	r2, r2, r7
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	18d3      	adds	r3, r2, r3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b20      	cmp	r3, #32
 80009bc:	d127      	bne.n	8000a0e <quectell_ATcommand_data+0x4e2>
				)
			{
				Paket.len=receive_length-15;
 80009be:	2320      	movs	r3, #32
 80009c0:	18c3      	adds	r3, r0, r3
 80009c2:	19db      	adds	r3, r3, r7
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	3b0f      	subs	r3, #15
 80009ca:	b2d9      	uxtb	r1, r3
 80009cc:	2414      	movs	r4, #20
 80009ce:	2320      	movs	r3, #32
 80009d0:	18e3      	adds	r3, r4, r3
 80009d2:	19db      	adds	r3, r3, r7
 80009d4:	2264      	movs	r2, #100	; 0x64
 80009d6:	5499      	strb	r1, [r3, r2]
				receive_length=0;
 80009d8:	2300      	movs	r3, #0
 80009da:	2220      	movs	r2, #32
 80009dc:	1882      	adds	r2, r0, r2
 80009de:	19d2      	adds	r2, r2, r7
 80009e0:	6013      	str	r3, [r2, #0]
				Paket.result = RESULT_MESSAGE;
 80009e2:	0020      	movs	r0, r4
 80009e4:	2320      	movs	r3, #32
 80009e6:	18c3      	adds	r3, r0, r3
 80009e8:	19db      	adds	r3, r3, r7
 80009ea:	226a      	movs	r2, #106	; 0x6a
 80009ec:	2103      	movs	r1, #3
 80009ee:	5499      	strb	r1, [r3, r2]
				try=0;
 80009f0:	2327      	movs	r3, #39	; 0x27
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
				return Paket;
 80009f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009fa:	2320      	movs	r3, #32
 80009fc:	18c3      	adds	r3, r0, r3
 80009fe:	19db      	adds	r3, r3, r7
 8000a00:	0010      	movs	r0, r2
 8000a02:	0019      	movs	r1, r3
 8000a04:	236b      	movs	r3, #107	; 0x6b
 8000a06:	001a      	movs	r2, r3
 8000a08:	f003 f94a 	bl	8003ca0 <memcpy>
 8000a0c:	e01a      	b.n	8000a44 <quectell_ATcommand_data+0x518>
			}
			else receive_length--;
 8000a0e:	2294      	movs	r2, #148	; 0x94
 8000a10:	2320      	movs	r3, #32
 8000a12:	18d3      	adds	r3, r2, r3
 8000a14:	19db      	adds	r3, r3, r7
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	2120      	movs	r1, #32
 8000a1c:	1852      	adds	r2, r2, r1
 8000a1e:	19d2      	adds	r2, r2, r7
 8000a20:	6013      	str	r3, [r2, #0]
		while(receive_length)
 8000a22:	2394      	movs	r3, #148	; 0x94
 8000a24:	2220      	movs	r2, #32
 8000a26:	189b      	adds	r3, r3, r2
 8000a28:	19db      	adds	r3, r3, r7
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d000      	beq.n	8000a32 <quectell_ATcommand_data+0x506>
 8000a30:	e647      	b.n	80006c2 <quectell_ATcommand_data+0x196>
		}
		Paket.result = ERROR;
 8000a32:	2314      	movs	r3, #20
 8000a34:	2220      	movs	r2, #32
 8000a36:	189b      	adds	r3, r3, r2
 8000a38:	19db      	adds	r3, r3, r7
 8000a3a:	226a      	movs	r2, #106	; 0x6a
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	5499      	strb	r1, [r3, r2]
 8000a40:	46b5      	mov	sp, r6
 8000a42:	e001      	b.n	8000a48 <quectell_ATcommand_data+0x51c>
 8000a44:	46b5      	mov	sp, r6
	}

	return Paket;
}
 8000a46:	e010      	b.n	8000a6a <quectell_ATcommand_data+0x53e>
	while(try)
 8000a48:	2327      	movs	r3, #39	; 0x27
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d000      	beq.n	8000a54 <quectell_ATcommand_data+0x528>
 8000a52:	e596      	b.n	8000582 <quectell_ATcommand_data+0x56>
	return Paket;
 8000a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a56:	2314      	movs	r3, #20
 8000a58:	2120      	movs	r1, #32
 8000a5a:	185b      	adds	r3, r3, r1
 8000a5c:	19db      	adds	r3, r3, r7
 8000a5e:	0010      	movs	r0, r2
 8000a60:	0019      	movs	r1, r3
 8000a62:	236b      	movs	r3, #107	; 0x6b
 8000a64:	001a      	movs	r2, r3
 8000a66:	f003 f91b 	bl	8003ca0 <memcpy>
}
 8000a6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b02f      	add	sp, #188	; 0xbc
 8000a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)

08000a74 <quectell_begin>:
}



void quectell_begin()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_POWER_GPIO_Port, GSM_POWER_Pin, GPIO_PIN_RESET);
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <quectell_begin+0x38>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	0019      	movs	r1, r3
 8000a82:	f001 f82f 	bl	8001ae4 <HAL_GPIO_WritePin>
 	HAL_Delay(2000);
 8000a86:	23fa      	movs	r3, #250	; 0xfa
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fd2a 	bl	80014e4 <HAL_Delay>
	HAL_GPIO_WritePin(GSM_POWER_GPIO_Port, GSM_POWER_Pin, GPIO_PIN_SET);
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <quectell_begin+0x38>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	0019      	movs	r1, r3
 8000a9a:	f001 f823 	bl	8001ae4 <HAL_GPIO_WritePin>
 	HAL_Delay(5000);
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <quectell_begin+0x3c>)
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 fd1f 	bl	80014e4 <HAL_Delay>
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	50000400 	.word	0x50000400
 8000ab0:	00001388 	.word	0x00001388

08000ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b09d      	sub	sp, #116	; 0x74
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aba:	f000 fca3 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000abe:	f000 f94d 	bl	8000d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac2:	f000 fa23 	bl	8000f0c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ac6:	f000 f9bf 	bl	8000e48 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000aca:	f000 f9ef 	bl	8000eac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  quectell_begin();
 8000ace:	f7ff ffd1 	bl	8000a74 <quectell_begin>


	//MODUL BILGISI
	gsm= quectell_ATcommand_data(ATI,2);
 8000ad2:	4c95      	ldr	r4, [pc, #596]	; (8000d28 <main+0x274>)
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	4995      	ldr	r1, [pc, #596]	; (8000d2c <main+0x278>)
 8000ad8:	2202      	movs	r2, #2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff fd26 	bl	800052c <quectell_ATcommand_data>
 8000ae0:	003b      	movs	r3, r7
 8000ae2:	0020      	movs	r0, r4
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	236b      	movs	r3, #107	; 0x6b
 8000ae8:	001a      	movs	r2, r3
 8000aea:	f003 f8d9 	bl	8003ca0 <memcpy>

	//IMEI
	HAL_Delay(1000);
 8000aee:	23fa      	movs	r3, #250	; 0xfa
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 fcf6 	bl	80014e4 <HAL_Delay>
	memset(&gsm, '\0', sizeof(gsm));
 8000af8:	4b8b      	ldr	r3, [pc, #556]	; (8000d28 <main+0x274>)
 8000afa:	226b      	movs	r2, #107	; 0x6b
 8000afc:	2100      	movs	r1, #0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f003 f8d7 	bl	8003cb2 <memset>
	gsm= quectell_ATcommand_data(imei,2);
 8000b04:	4c88      	ldr	r4, [pc, #544]	; (8000d28 <main+0x274>)
 8000b06:	003b      	movs	r3, r7
 8000b08:	4989      	ldr	r1, [pc, #548]	; (8000d30 <main+0x27c>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fd0d 	bl	800052c <quectell_ATcommand_data>
 8000b12:	003b      	movs	r3, r7
 8000b14:	0020      	movs	r0, r4
 8000b16:	0019      	movs	r1, r3
 8000b18:	236b      	movs	r3, #107	; 0x6b
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	f003 f8c0 	bl	8003ca0 <memcpy>

//	strncpy(&sensorPacket.DeviceID[0],&gsm.data[9],15);

	gsm_imei_parse(&gsm, &sensorPacket);
 8000b20:	4a84      	ldr	r2, [pc, #528]	; (8000d34 <main+0x280>)
 8000b22:	4b81      	ldr	r3, [pc, #516]	; (8000d28 <main+0x274>)
 8000b24:	0011      	movs	r1, r2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fc18 	bl	800135c <gsm_imei_parse>
//	HAL_Delay(1000);
//	memset(&gsm, '\0', sizeof(gsm));
//	gsm= quectell_ATcommand_data(QueryStateofInitialization,10);

	//GSM DURUM
	HAL_Delay(1000);
 8000b2c:	23fa      	movs	r3, #250	; 0xfa
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 fcd7 	bl	80014e4 <HAL_Delay>
	memset(&gsm, '\0', sizeof(gsm));
 8000b36:	4b7c      	ldr	r3, [pc, #496]	; (8000d28 <main+0x274>)
 8000b38:	226b      	movs	r2, #107	; 0x6b
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f003 f8b8 	bl	8003cb2 <memset>
	gsm= quectell_ATcommand_data(QueryGSMNetworkStatus,10);
 8000b42:	4c79      	ldr	r4, [pc, #484]	; (8000d28 <main+0x274>)
 8000b44:	003b      	movs	r3, r7
 8000b46:	497c      	ldr	r1, [pc, #496]	; (8000d38 <main+0x284>)
 8000b48:	220a      	movs	r2, #10
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fcee 	bl	800052c <quectell_ATcommand_data>
 8000b50:	003b      	movs	r3, r7
 8000b52:	0020      	movs	r0, r4
 8000b54:	0019      	movs	r1, r3
 8000b56:	236b      	movs	r3, #107	; 0x6b
 8000b58:	001a      	movs	r2, r3
 8000b5a:	f003 f8a1 	bl	8003ca0 <memcpy>

	//BAGLANTI MODU SECIMI
	HAL_Delay(1000);
 8000b5e:	23fa      	movs	r3, #250	; 0xfa
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 fcbe 	bl	80014e4 <HAL_Delay>
	memset(&gsm, '\0', sizeof(gsm));
 8000b68:	4b6f      	ldr	r3, [pc, #444]	; (8000d28 <main+0x274>)
 8000b6a:	226b      	movs	r2, #107	; 0x6b
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f003 f89f 	bl	8003cb2 <memset>
	gsm= quectell_ATcommand_data(NetworkRegistrationL1,10);
 8000b74:	4c6c      	ldr	r4, [pc, #432]	; (8000d28 <main+0x274>)
 8000b76:	003b      	movs	r3, r7
 8000b78:	4970      	ldr	r1, [pc, #448]	; (8000d3c <main+0x288>)
 8000b7a:	220a      	movs	r2, #10
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff fcd5 	bl	800052c <quectell_ATcommand_data>
 8000b82:	003b      	movs	r3, r7
 8000b84:	0020      	movs	r0, r4
 8000b86:	0019      	movs	r1, r3
 8000b88:	236b      	movs	r3, #107	; 0x6b
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	f003 f888 	bl	8003ca0 <memcpy>

	//BAGLANDIMI
	HAL_Delay(1000);
 8000b90:	23fa      	movs	r3, #250	; 0xfa
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 fca5 	bl	80014e4 <HAL_Delay>
	memset(&gsm, '\0', sizeof(gsm));
 8000b9a:	4b63      	ldr	r3, [pc, #396]	; (8000d28 <main+0x274>)
 8000b9c:	226b      	movs	r2, #107	; 0x6b
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f003 f886 	bl	8003cb2 <memset>
	gsm= quectell_ATcommand_data(NetworkRegistrationStatus,10);
 8000ba6:	4c60      	ldr	r4, [pc, #384]	; (8000d28 <main+0x274>)
 8000ba8:	003b      	movs	r3, r7
 8000baa:	4965      	ldr	r1, [pc, #404]	; (8000d40 <main+0x28c>)
 8000bac:	220a      	movs	r2, #10
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fcbc 	bl	800052c <quectell_ATcommand_data>
 8000bb4:	003b      	movs	r3, r7
 8000bb6:	0020      	movs	r0, r4
 8000bb8:	0019      	movs	r1, r3
 8000bba:	236b      	movs	r3, #107	; 0x6b
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	f003 f86f 	bl	8003ca0 <memcpy>

	//NETWORK SENKRONIZASYON AKTIFLESTIRME
	HAL_Delay(1000);
 8000bc2:	23fa      	movs	r3, #250	; 0xfa
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 fc8c 	bl	80014e4 <HAL_Delay>
	memset(&gsm, '\0', sizeof(gsm));
 8000bcc:	4b56      	ldr	r3, [pc, #344]	; (8000d28 <main+0x274>)
 8000bce:	226b      	movs	r2, #107	; 0x6b
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f003 f86d 	bl	8003cb2 <memset>
	gsm= quectell_ATcommand_data(NetworkTimeSynchronization,10);
 8000bd8:	4c53      	ldr	r4, [pc, #332]	; (8000d28 <main+0x274>)
 8000bda:	003b      	movs	r3, r7
 8000bdc:	4959      	ldr	r1, [pc, #356]	; (8000d44 <main+0x290>)
 8000bde:	220a      	movs	r2, #10
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff fca3 	bl	800052c <quectell_ATcommand_data>
 8000be6:	003b      	movs	r3, r7
 8000be8:	0020      	movs	r0, r4
 8000bea:	0019      	movs	r1, r3
 8000bec:	236b      	movs	r3, #107	; 0x6b
 8000bee:	001a      	movs	r2, r3
 8000bf0:	f003 f856 	bl	8003ca0 <memcpy>
	HAL_Delay(1000);
 8000bf4:	23fa      	movs	r3, #250	; 0xfa
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 fc73 	bl	80014e4 <HAL_Delay>
	memset(&gsm, '\0', sizeof(gsm));
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	; (8000d28 <main+0x274>)
 8000c00:	226b      	movs	r2, #107	; 0x6b
 8000c02:	2100      	movs	r1, #0
 8000c04:	0018      	movs	r0, r3
 8000c06:	f003 f854 	bl	8003cb2 <memset>
	gsm= quectell_ATcommand_data(NetworkTimeSyncReport,10);
 8000c0a:	4c47      	ldr	r4, [pc, #284]	; (8000d28 <main+0x274>)
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	494e      	ldr	r1, [pc, #312]	; (8000d48 <main+0x294>)
 8000c10:	220a      	movs	r2, #10
 8000c12:	0018      	movs	r0, r3
 8000c14:	f7ff fc8a 	bl	800052c <quectell_ATcommand_data>
 8000c18:	003b      	movs	r3, r7
 8000c1a:	0020      	movs	r0, r4
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	236b      	movs	r3, #107	; 0x6b
 8000c20:	001a      	movs	r2, r3
 8000c22:	f003 f83d 	bl	8003ca0 <memcpy>

	//TARIH SAAT BILGISI
	HAL_Delay(1000);
 8000c26:	23fa      	movs	r3, #250	; 0xfa
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 fc5a 	bl	80014e4 <HAL_Delay>
	memset(&gsm, '\0', sizeof(gsm));
 8000c30:	4b3d      	ldr	r3, [pc, #244]	; (8000d28 <main+0x274>)
 8000c32:	226b      	movs	r2, #107	; 0x6b
 8000c34:	2100      	movs	r1, #0
 8000c36:	0018      	movs	r0, r3
 8000c38:	f003 f83b 	bl	8003cb2 <memset>
	gsm= quectell_ATcommand_data(LatestNetworkTimeSynchronized,10);
 8000c3c:	4c3a      	ldr	r4, [pc, #232]	; (8000d28 <main+0x274>)
 8000c3e:	003b      	movs	r3, r7
 8000c40:	4942      	ldr	r1, [pc, #264]	; (8000d4c <main+0x298>)
 8000c42:	220a      	movs	r2, #10
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fc71 	bl	800052c <quectell_ATcommand_data>
 8000c4a:	003b      	movs	r3, r7
 8000c4c:	0020      	movs	r0, r4
 8000c4e:	0019      	movs	r1, r3
 8000c50:	236b      	movs	r3, #107	; 0x6b
 8000c52:	001a      	movs	r2, r3
 8000c54:	f003 f824 	bl	8003ca0 <memcpy>

	HAL_Delay(1000);
 8000c58:	23fa      	movs	r3, #250	; 0xfa
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f000 fc41 	bl	80014e4 <HAL_Delay>
	memset(&gsm, '\0', sizeof(gsm));
 8000c62:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <main+0x274>)
 8000c64:	226b      	movs	r2, #107	; 0x6b
 8000c66:	2100      	movs	r1, #0
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f003 f822 	bl	8003cb2 <memset>
	gsm= quectell_ATcommand_data(NetworkTime,10);
 8000c6e:	4c2e      	ldr	r4, [pc, #184]	; (8000d28 <main+0x274>)
 8000c70:	003b      	movs	r3, r7
 8000c72:	4937      	ldr	r1, [pc, #220]	; (8000d50 <main+0x29c>)
 8000c74:	220a      	movs	r2, #10
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff fc58 	bl	800052c <quectell_ATcommand_data>
 8000c7c:	003b      	movs	r3, r7
 8000c7e:	0020      	movs	r0, r4
 8000c80:	0019      	movs	r1, r3
 8000c82:	236b      	movs	r3, #107	; 0x6b
 8000c84:	001a      	movs	r2, r3
 8000c86:	f003 f80b 	bl	8003ca0 <memcpy>

	gsm_timeDate_parse(&gsm, &sensorPacket);
 8000c8a:	4a2a      	ldr	r2, [pc, #168]	; (8000d34 <main+0x280>)
 8000c8c:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <main+0x274>)
 8000c8e:	0011      	movs	r1, r2
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 fb11 	bl	80012b8 <gsm_timeDate_parse>
//	HAL_Delay(10000);
//	memset(&gsm, '\0', sizeof(gsm));
//	gsm= quectell_ATcommand_data(KAPATMA,10);

	//OPERATOR NAME
	HAL_Delay(1000);
 8000c96:	23fa      	movs	r3, #250	; 0xfa
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fc22 	bl	80014e4 <HAL_Delay>
	memset(&gsm, '\0', sizeof(gsm));
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <main+0x274>)
 8000ca2:	226b      	movs	r2, #107	; 0x6b
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f003 f803 	bl	8003cb2 <memset>
	gsm= quectell_ATcommand_data(OperatorSelection,10);
 8000cac:	4c1e      	ldr	r4, [pc, #120]	; (8000d28 <main+0x274>)
 8000cae:	003b      	movs	r3, r7
 8000cb0:	4928      	ldr	r1, [pc, #160]	; (8000d54 <main+0x2a0>)
 8000cb2:	220a      	movs	r2, #10
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff fc39 	bl	800052c <quectell_ATcommand_data>
 8000cba:	003b      	movs	r3, r7
 8000cbc:	0020      	movs	r0, r4
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	236b      	movs	r3, #107	; 0x6b
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	f002 ffec 	bl	8003ca0 <memcpy>

	//OPERATOR SIGNAL
	HAL_Delay(1000);
 8000cc8:	23fa      	movs	r3, #250	; 0xfa
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 fc09 	bl	80014e4 <HAL_Delay>
	memset(&gsm, '\0', sizeof(gsm));
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <main+0x274>)
 8000cd4:	226b      	movs	r2, #107	; 0x6b
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f002 ffea 	bl	8003cb2 <memset>
	gsm= quectell_ATcommand_data(OperatorSignal,10);
 8000cde:	4c12      	ldr	r4, [pc, #72]	; (8000d28 <main+0x274>)
 8000ce0:	003b      	movs	r3, r7
 8000ce2:	491d      	ldr	r1, [pc, #116]	; (8000d58 <main+0x2a4>)
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fc20 	bl	800052c <quectell_ATcommand_data>
 8000cec:	003b      	movs	r3, r7
 8000cee:	0020      	movs	r0, r4
 8000cf0:	0019      	movs	r1, r3
 8000cf2:	236b      	movs	r3, #107	; 0x6b
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	f002 ffd3 	bl	8003ca0 <memcpy>
//	//MESAJ
//	HAL_Delay(1000);
//	memset(&gsm, '\0', sizeof(gsm));
//	gsm= quectell_message_data(sendMessageNumber, sendMessageData);

	HAL_Delay(1000);
 8000cfa:	23fa      	movs	r3, #250	; 0xfa
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 fbf0 	bl	80014e4 <HAL_Delay>
	memset(&gsm, '\0', sizeof(gsm));
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <main+0x274>)
 8000d06:	226b      	movs	r2, #107	; 0x6b
 8000d08:	2100      	movs	r1, #0
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f002 ffd1 	bl	8003cb2 <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(2000);
 8000d10:	23fa      	movs	r3, #250	; 0xfa
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 fbe5 	bl	80014e4 <HAL_Delay>
	  memset(&gsm, '\0', sizeof(gsm));
 8000d1a:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <main+0x274>)
 8000d1c:	226b      	movs	r2, #107	; 0x6b
 8000d1e:	2100      	movs	r1, #0
 8000d20:	0018      	movs	r0, r3
 8000d22:	f002 ffc6 	bl	8003cb2 <memset>
	  HAL_Delay(2000);
 8000d26:	e7f3      	b.n	8000d10 <main+0x25c>
 8000d28:	200002b4 	.word	0x200002b4
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000004 	.word	0x20000004
 8000d34:	20000214 	.word	0x20000214
 8000d38:	2000000c 	.word	0x2000000c
 8000d3c:	20000044 	.word	0x20000044
 8000d40:	20000050 	.word	0x20000050
 8000d44:	20000018 	.word	0x20000018
 8000d48:	20000038 	.word	0x20000038
 8000d4c:	20000024 	.word	0x20000024
 8000d50:	20000030 	.word	0x20000030
 8000d54:	2000005c 	.word	0x2000005c
 8000d58:	20000064 	.word	0x20000064

08000d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b09b      	sub	sp, #108	; 0x6c
 8000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d62:	2434      	movs	r4, #52	; 0x34
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	0018      	movs	r0, r3
 8000d68:	2334      	movs	r3, #52	; 0x34
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f002 ffa0 	bl	8003cb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d72:	2320      	movs	r3, #32
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	0018      	movs	r0, r3
 8000d78:	2314      	movs	r3, #20
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f002 ff98 	bl	8003cb2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	0018      	movs	r0, r3
 8000d86:	231c      	movs	r3, #28
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f002 ff91 	bl	8003cb2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d90:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <SystemClock_Config+0xe4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a2b      	ldr	r2, [pc, #172]	; (8000e44 <SystemClock_Config+0xe8>)
 8000d96:	401a      	ands	r2, r3
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <SystemClock_Config+0xe4>)
 8000d9a:	2180      	movs	r1, #128	; 0x80
 8000d9c:	0109      	lsls	r1, r1, #4
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da2:	0021      	movs	r1, r4
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2202      	movs	r2, #2
 8000da8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2201      	movs	r2, #1
 8000dae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2210      	movs	r2, #16
 8000db4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2202      	movs	r2, #2
 8000dba:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	02d2      	lsls	r2, r2, #11
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	03d2      	lsls	r2, r2, #15
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 fea3 	bl	8001b20 <HAL_RCC_OscConfig>
 8000dda:	1e03      	subs	r3, r0, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000dde:	f000 f8eb 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de2:	2120      	movs	r1, #32
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	220f      	movs	r2, #15
 8000de8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2203      	movs	r2, #3
 8000dee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2101      	movs	r1, #1
 8000e06:	0018      	movs	r0, r3
 8000e08:	f001 f9f4 	bl	80021f4 <HAL_RCC_ClockConfig>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000e10:	f000 f8d2 	bl	8000fb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2203      	movs	r2, #3
 8000e18:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 fc07 	bl	800263c <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000e32:	f000 f8c1 	bl	8000fb8 <Error_Handler>
  }
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b01b      	add	sp, #108	; 0x6c
 8000e3c:	bd90      	pop	{r4, r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	40007000 	.word	0x40007000
 8000e44:	ffffe7ff 	.word	0xffffe7ff

08000e48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_USART1_UART_Init+0x5c>)
 8000e4e:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <MX_USART1_UART_Init+0x60>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_USART1_UART_Init+0x5c>)
 8000e54:	22e1      	movs	r2, #225	; 0xe1
 8000e56:	0252      	lsls	r2, r2, #9
 8000e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_USART1_UART_Init+0x5c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_USART1_UART_Init+0x5c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_USART1_UART_Init+0x5c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <MX_USART1_UART_Init+0x5c>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_USART1_UART_Init+0x5c>)
 8000e74:	22c0      	movs	r2, #192	; 0xc0
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <MX_USART1_UART_Init+0x5c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_USART1_UART_Init+0x5c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_USART1_UART_Init+0x5c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <MX_USART1_UART_Init+0x5c>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f001 fd0a 	bl	80028a8 <HAL_UART_Init>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d001      	beq.n	8000e9c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000e98:	f000 f88e 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	2000010c 	.word	0x2000010c
 8000ea8:	40013800 	.word	0x40013800

08000eac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <MX_USART2_UART_Init+0x5c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000eb8:	22e1      	movs	r2, #225	; 0xe1
 8000eba:	0252      	lsls	r2, r2, #9
 8000ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <MX_USART2_UART_Init+0x58>)
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f001 fcd9 	bl	80028a8 <HAL_UART_Init>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000efa:	f000 f85d 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000190 	.word	0x20000190
 8000f08:	40004400 	.word	0x40004400

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	240c      	movs	r4, #12
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	0018      	movs	r0, r3
 8000f18:	2314      	movs	r3, #20
 8000f1a:	001a      	movs	r2, r3
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f002 fec8 	bl	8003cb2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <MX_GPIO_Init+0xa4>)
 8000f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <MX_GPIO_Init+0xa4>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <MX_GPIO_Init+0xa4>)
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	2201      	movs	r2, #1
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_GPIO_Init+0xa4>)
 8000f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_GPIO_Init+0xa4>)
 8000f40:	2102      	movs	r1, #2
 8000f42:	430a      	orrs	r2, r1
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_GPIO_Init+0xa4>)
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_POWER_GPIO_Port, GSM_POWER_Pin, GPIO_PIN_RESET);
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <MX_GPIO_Init+0xa8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	f000 fdc2 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RFTX_MON_Pin SIM_DOOR_Pin */
  GPIO_InitStruct.Pin = RFTX_MON_Pin|SIM_DOOR_Pin;
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	2282      	movs	r2, #130	; 0x82
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <MX_GPIO_Init+0xa8>)
 8000f78:	0019      	movs	r1, r3
 8000f7a:	0010      	movs	r0, r2
 8000f7c:	f000 fc3c 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_POWER_Pin */
  GPIO_InitStruct.Pin = GSM_POWER_Pin;
 8000f80:	0021      	movs	r1, r4
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	0052      	lsls	r2, r2, #1
 8000f88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GSM_POWER_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <MX_GPIO_Init+0xa8>)
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	0010      	movs	r0, r2
 8000fa4:	f000 fc28 	bl	80017f8 <HAL_GPIO_Init>

}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b009      	add	sp, #36	; 0x24
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	50000400 	.word	0x50000400

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <Error_Handler+0x8>
	...

08000fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_MspInit+0x24>)
 8000fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_MspInit+0x24>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <HAL_MspInit+0x24>)
 8000fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_MspInit+0x24>)
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	0549      	lsls	r1, r1, #21
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b08b      	sub	sp, #44	; 0x2c
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	2414      	movs	r4, #20
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	2314      	movs	r3, #20
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	f002 fe57 	bl	8003cb2 <memset>
  if(huart->Instance==USART1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a34      	ldr	r2, [pc, #208]	; (80010dc <HAL_UART_MspInit+0xf0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12b      	bne.n	8001066 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800100e:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <HAL_UART_MspInit+0xf4>)
 8001010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <HAL_UART_MspInit+0xf4>)
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	01c9      	lsls	r1, r1, #7
 8001018:	430a      	orrs	r2, r1
 800101a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <HAL_UART_MspInit+0xf4>)
 800101e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <HAL_UART_MspInit+0xf4>)
 8001022:	2101      	movs	r1, #1
 8001024:	430a      	orrs	r2, r1
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
 8001028:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_UART_MspInit+0xf4>)
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	2201      	movs	r2, #1
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001034:	193b      	adds	r3, r7, r4
 8001036:	22f0      	movs	r2, #240	; 0xf0
 8001038:	0152      	lsls	r2, r2, #5
 800103a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	0021      	movs	r1, r4
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2202      	movs	r2, #2
 8001042:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2203      	movs	r2, #3
 800104e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2204      	movs	r2, #4
 8001054:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	187a      	adds	r2, r7, r1
 8001058:	23a0      	movs	r3, #160	; 0xa0
 800105a:	05db      	lsls	r3, r3, #23
 800105c:	0011      	movs	r1, r2
 800105e:	0018      	movs	r0, r3
 8001060:	f000 fbca 	bl	80017f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001064:	e036      	b.n	80010d4 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <HAL_UART_MspInit+0xf8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d131      	bne.n	80010d4 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <HAL_UART_MspInit+0xf4>)
 8001072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_UART_MspInit+0xf4>)
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	0289      	lsls	r1, r1, #10
 800107a:	430a      	orrs	r2, r1
 800107c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_UART_MspInit+0xf4>)
 8001080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0xf4>)
 8001084:	2101      	movs	r1, #1
 8001086:	430a      	orrs	r2, r1
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_UART_MspInit+0xf4>)
 800108c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108e:	2201      	movs	r2, #1
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001096:	2114      	movs	r1, #20
 8001098:	187b      	adds	r3, r7, r1
 800109a:	220c      	movs	r2, #12
 800109c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2202      	movs	r2, #2
 80010a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2203      	movs	r2, #3
 80010ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2204      	movs	r2, #4
 80010b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	187a      	adds	r2, r7, r1
 80010b8:	23a0      	movs	r3, #160	; 0xa0
 80010ba:	05db      	lsls	r3, r3, #23
 80010bc:	0011      	movs	r1, r2
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 fb9a 	bl	80017f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	201c      	movs	r0, #28
 80010ca:	f000 fadb 	bl	8001684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ce:	201c      	movs	r0, #28
 80010d0:	f000 faed 	bl	80016ae <HAL_NVIC_EnableIRQ>
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b00b      	add	sp, #44	; 0x2c
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40004400 	.word	0x40004400

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110c:	f000 f9ce 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <USART2_IRQHandler+0x14>)
 800111e:	0018      	movs	r0, r3
 8001120:	f001 fdac 	bl	8002c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	20000190 	.word	0x20000190

08001130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	return 1;
 8001134:	2301      	movs	r3, #1
}
 8001136:	0018      	movs	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_kill>:

int _kill(int pid, int sig)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001146:	f002 fd77 	bl	8003c38 <__errno>
 800114a:	0003      	movs	r3, r0
 800114c:	2216      	movs	r2, #22
 800114e:	601a      	str	r2, [r3, #0]
	return -1;
 8001150:	2301      	movs	r3, #1
 8001152:	425b      	negs	r3, r3
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}

0800115c <_exit>:

void _exit (int status)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001164:	2301      	movs	r3, #1
 8001166:	425a      	negs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0011      	movs	r1, r2
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff ffe5 	bl	800113c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001172:	e7fe      	b.n	8001172 <_exit+0x16>

08001174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	e00a      	b.n	800119c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001186:	e000      	b.n	800118a <_read+0x16>
 8001188:	bf00      	nop
 800118a:	0001      	movs	r1, r0
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	60ba      	str	r2, [r7, #8]
 8001192:	b2ca      	uxtb	r2, r1
 8001194:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbf0      	blt.n	8001186 <_read+0x12>
	}

return len;
 80011a4:	687b      	ldr	r3, [r7, #4]
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b006      	add	sp, #24
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	e009      	b.n	80011d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	60ba      	str	r2, [r7, #8]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	0018      	movs	r0, r3
 80011ca:	e000      	b.n	80011ce <_write+0x20>
 80011cc:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dbf1      	blt.n	80011c0 <_write+0x12>
	}
	return len;
 80011dc:	687b      	ldr	r3, [r7, #4]
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b006      	add	sp, #24
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_close>:

int _close(int file)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
	return -1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	425b      	negs	r3, r3
}
 80011f2:	0018      	movs	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b002      	add	sp, #8
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	0192      	lsls	r2, r2, #6
 800120a:	605a      	str	r2, [r3, #4]
	return 0;
 800120c:	2300      	movs	r3, #0
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}

08001216 <_isatty>:

int _isatty(int file)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
	return 1;
 800121e:	2301      	movs	r3, #1
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}

08001228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
	return 0;
 8001234:	2300      	movs	r3, #0
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b004      	add	sp, #16
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	18d3      	adds	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001270:	f002 fce2 	bl	8003c38 <__errno>
 8001274:	0003      	movs	r3, r0
 8001276:	220c      	movs	r2, #12
 8001278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127a:	2301      	movs	r3, #1
 800127c:	425b      	negs	r3, r3
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	18d2      	adds	r2, r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <_sbrk+0x64>)
 8001290:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b006      	add	sp, #24
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20002000 	.word	0x20002000
 80012a0:	00000400 	.word	0x00000400
 80012a4:	200000f8 	.word	0x200000f8
 80012a8:	20000328 	.word	0x20000328

080012ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <gsm_timeDate_parse>:
sensorPacket_t sensorPacket;
void gsm_timeDate_parse( gsm_t *gsm, sensorPacket_t *sensorPacket);
void gsm_imei_parse(gsm_t *gsm, sensorPacket_t *sensorPacket);

void gsm_timeDate_parse( gsm_t *gsm, sensorPacket_t *sensorPacket)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b09e      	sub	sp, #120	; 0x78
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
    //	"AT+QLTS\r\r\n+QLTS\0 \"23/02/26,16\015:39+12,0\"\r"
	char *pkomut;
	char *pbilgi;
	char komut[20];
	char bilgi[80];
	pkomut = strtok (gsm->data,"\"");
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a21      	ldr	r2, [pc, #132]	; (800134c <gsm_timeDate_parse+0x94>)
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f002 fe23 	bl	8003f14 <strtok>
 80012ce:	0003      	movs	r3, r0
 80012d0:	677b      	str	r3, [r7, #116]	; 0x74

	if(pkomut != NULL)
 80012d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <gsm_timeDate_parse+0x2e>
	{
		pkomut = strtok (NULL, "\"");
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <gsm_timeDate_parse+0x94>)
 80012da:	0019      	movs	r1, r3
 80012dc:	2000      	movs	r0, #0
 80012de:	f002 fe19 	bl	8003f14 <strtok>
 80012e2:	0003      	movs	r3, r0
 80012e4:	677b      	str	r3, [r7, #116]	; 0x74
	}
	if(pkomut != NULL)
 80012e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <gsm_timeDate_parse+0x42>
	{
		sprintf(bilgi,"%s",pkomut);
 80012ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80012ee:	4918      	ldr	r1, [pc, #96]	; (8001350 <gsm_timeDate_parse+0x98>)
 80012f0:	230c      	movs	r3, #12
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	0018      	movs	r0, r3
 80012f6:	f002 fdd9 	bl	8003eac <siprintf>
	}

	pbilgi = strtok (bilgi, ",");
 80012fa:	4a16      	ldr	r2, [pc, #88]	; (8001354 <gsm_timeDate_parse+0x9c>)
 80012fc:	230c      	movs	r3, #12
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	0011      	movs	r1, r2
 8001302:	0018      	movs	r0, r3
 8001304:	f002 fe06 	bl	8003f14 <strtok>
 8001308:	0003      	movs	r3, r0
 800130a:	673b      	str	r3, [r7, #112]	; 0x70
	if(pbilgi != NULL)
 800130c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00d      	beq.n	800132e <gsm_timeDate_parse+0x76>
	{
	  sprintf(sensorPacket->Date,"%s",pbilgi);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	331f      	adds	r3, #31
 8001316:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001318:	490d      	ldr	r1, [pc, #52]	; (8001350 <gsm_timeDate_parse+0x98>)
 800131a:	0018      	movs	r0, r3
 800131c:	f002 fdc6 	bl	8003eac <siprintf>
	  pbilgi = strtok (NULL, "+");
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <gsm_timeDate_parse+0xa0>)
 8001322:	0019      	movs	r1, r3
 8001324:	2000      	movs	r0, #0
 8001326:	f002 fdf5 	bl	8003f14 <strtok>
 800132a:	0003      	movs	r3, r0
 800132c:	673b      	str	r3, [r7, #112]	; 0x70
	}
	if(pbilgi != NULL)
 800132e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <gsm_timeDate_parse+0x8a>
	{
	  sprintf(sensorPacket->Time,"%s",pbilgi);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	332b      	adds	r3, #43	; 0x2b
 8001338:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800133a:	4905      	ldr	r1, [pc, #20]	; (8001350 <gsm_timeDate_parse+0x98>)
 800133c:	0018      	movs	r0, r3
 800133e:	f002 fdb5 	bl	8003eac <siprintf>
	}

}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b01e      	add	sp, #120	; 0x78
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	08005200 	.word	0x08005200
 8001350:	08005204 	.word	0x08005204
 8001354:	08005208 	.word	0x08005208
 8001358:	0800520c 	.word	0x0800520c

0800135c <gsm_imei_parse>:

void gsm_imei_parse(gsm_t *gsm, sensorPacket_t *sensorPacket)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b098      	sub	sp, #96	; 0x60
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
	//"AT+GSN\r\r\n865733020395836\r"
	char *pkomut;
	char *pbilgi;
	char bilgi[80];
	pkomut = strtok (gsm->data,"\n");
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <gsm_imei_parse+0x48>)
 800136a:	0011      	movs	r1, r2
 800136c:	0018      	movs	r0, r3
 800136e:	f002 fdd1 	bl	8003f14 <strtok>
 8001372:	0003      	movs	r3, r0
 8001374:	65fb      	str	r3, [r7, #92]	; 0x5c

	if(pkomut != NULL)
 8001376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <gsm_imei_parse+0x2e>
	{
		pkomut = strtok (NULL, "\r");
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <gsm_imei_parse+0x4c>)
 800137e:	0019      	movs	r1, r3
 8001380:	2000      	movs	r0, #0
 8001382:	f002 fdc7 	bl	8003f14 <strtok>
 8001386:	0003      	movs	r3, r0
 8001388:	65fb      	str	r3, [r7, #92]	; 0x5c
	}
	if(pkomut != NULL)
 800138a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <gsm_imei_parse+0x40>
	{
		sprintf(sensorPacket->DeviceID,"%s",pkomut);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001394:	4905      	ldr	r1, [pc, #20]	; (80013ac <gsm_imei_parse+0x50>)
 8001396:	0018      	movs	r0, r3
 8001398:	f002 fd88 	bl	8003eac <siprintf>
	}

}
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b018      	add	sp, #96	; 0x60
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08005210 	.word	0x08005210
 80013a8:	08005214 	.word	0x08005214
 80013ac:	08005204 	.word	0x08005204

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80013b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <LoopForever+0x6>)
  ldr r1, =_edata
 80013b6:	490e      	ldr	r1, [pc, #56]	; (80013f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <LoopForever+0xe>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013cc:	4c0b      	ldr	r4, [pc, #44]	; (80013fc <LoopForever+0x16>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013da:	f7ff ff67 	bl	80012ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f002 fc31 	bl	8003c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fb67 	bl	8000ab4 <main>

080013e6 <LoopForever>:

LoopForever:
    b LoopForever
 80013e6:	e7fe      	b.n	80013e6 <LoopForever>
   ldr   r0, =_estack
 80013e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80013f4:	080053dc 	.word	0x080053dc
  ldr r2, =_sbss
 80013f8:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80013fc:	20000324 	.word	0x20000324

08001400 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC1_COMP_IRQHandler>
	...

08001404 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_Init+0x3c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_Init+0x3c>)
 8001416:	2140      	movs	r1, #64	; 0x40
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f811 	bl	8001444 <HAL_InitTick>
 8001422:	1e03      	subs	r3, r0, #0
 8001424:	d003      	beq.n	800142e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	e001      	b.n	8001432 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800142e:	f7ff fdc9 	bl	8000fc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
}
 8001436:	0018      	movs	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	40022000 	.word	0x40022000

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_InitTick+0x5c>)
 800144e:	681c      	ldr	r4, [r3, #0]
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_InitTick+0x60>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	0019      	movs	r1, r3
 8001456:	23fa      	movs	r3, #250	; 0xfa
 8001458:	0098      	lsls	r0, r3, #2
 800145a:	f7fe fe67 	bl	800012c <__udivsi3>
 800145e:	0003      	movs	r3, r0
 8001460:	0019      	movs	r1, r3
 8001462:	0020      	movs	r0, r4
 8001464:	f7fe fe62 	bl	800012c <__udivsi3>
 8001468:	0003      	movs	r3, r0
 800146a:	0018      	movs	r0, r3
 800146c:	f000 f92f 	bl	80016ce <HAL_SYSTICK_Config>
 8001470:	1e03      	subs	r3, r0, #0
 8001472:	d001      	beq.n	8001478 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e00f      	b.n	8001498 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d80b      	bhi.n	8001496 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	2301      	movs	r3, #1
 8001482:	425b      	negs	r3, r3
 8001484:	2200      	movs	r2, #0
 8001486:	0018      	movs	r0, r3
 8001488:	f000 f8fc 	bl	8001684 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_InitTick+0x64>)
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b003      	add	sp, #12
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	2000006c 	.word	0x2000006c
 80014a4:	20000074 	.word	0x20000074
 80014a8:	20000070 	.word	0x20000070

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_IncTick+0x1c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	001a      	movs	r2, r3
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_IncTick+0x20>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	18d2      	adds	r2, r2, r3
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_IncTick+0x20>)
 80014be:	601a      	str	r2, [r3, #0]
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	20000074 	.word	0x20000074
 80014cc:	20000320 	.word	0x20000320

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b02      	ldr	r3, [pc, #8]	; (80014e0 <HAL_GetTick+0x10>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	20000320 	.word	0x20000320

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff fff0 	bl	80014d0 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3301      	adds	r3, #1
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	001a      	movs	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	189b      	adds	r3, r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	f7ff ffe0 	bl	80014d0 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	46c0      	nop			; (mov r8, r8)
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b004      	add	sp, #16
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	20000074 	.word	0x20000074

0800152c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	0002      	movs	r2, r0
 8001534:	1dfb      	adds	r3, r7, #7
 8001536:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001538:	1dfb      	adds	r3, r7, #7
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b7f      	cmp	r3, #127	; 0x7f
 800153e:	d809      	bhi.n	8001554 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	001a      	movs	r2, r3
 8001546:	231f      	movs	r3, #31
 8001548:	401a      	ands	r2, r3
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <__NVIC_EnableIRQ+0x30>)
 800154c:	2101      	movs	r1, #1
 800154e:	4091      	lsls	r1, r2
 8001550:	000a      	movs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
  }
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b002      	add	sp, #8
 800155a:	bd80      	pop	{r7, pc}
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	0002      	movs	r2, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b7f      	cmp	r3, #127	; 0x7f
 8001574:	d828      	bhi.n	80015c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001576:	4a2f      	ldr	r2, [pc, #188]	; (8001634 <__NVIC_SetPriority+0xd4>)
 8001578:	1dfb      	adds	r3, r7, #7
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b25b      	sxtb	r3, r3
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	33c0      	adds	r3, #192	; 0xc0
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	589b      	ldr	r3, [r3, r2]
 8001586:	1dfa      	adds	r2, r7, #7
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	0011      	movs	r1, r2
 800158c:	2203      	movs	r2, #3
 800158e:	400a      	ands	r2, r1
 8001590:	00d2      	lsls	r2, r2, #3
 8001592:	21ff      	movs	r1, #255	; 0xff
 8001594:	4091      	lsls	r1, r2
 8001596:	000a      	movs	r2, r1
 8001598:	43d2      	mvns	r2, r2
 800159a:	401a      	ands	r2, r3
 800159c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	22ff      	movs	r2, #255	; 0xff
 80015a4:	401a      	ands	r2, r3
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	0018      	movs	r0, r3
 80015ac:	2303      	movs	r3, #3
 80015ae:	4003      	ands	r3, r0
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b4:	481f      	ldr	r0, [pc, #124]	; (8001634 <__NVIC_SetPriority+0xd4>)
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	430a      	orrs	r2, r1
 80015c0:	33c0      	adds	r3, #192	; 0xc0
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015c6:	e031      	b.n	800162c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c8:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <__NVIC_SetPriority+0xd8>)
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	0019      	movs	r1, r3
 80015d0:	230f      	movs	r3, #15
 80015d2:	400b      	ands	r3, r1
 80015d4:	3b08      	subs	r3, #8
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3306      	adds	r3, #6
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	18d3      	adds	r3, r2, r3
 80015de:	3304      	adds	r3, #4
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1dfa      	adds	r2, r7, #7
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	0011      	movs	r1, r2
 80015e8:	2203      	movs	r2, #3
 80015ea:	400a      	ands	r2, r1
 80015ec:	00d2      	lsls	r2, r2, #3
 80015ee:	21ff      	movs	r1, #255	; 0xff
 80015f0:	4091      	lsls	r1, r2
 80015f2:	000a      	movs	r2, r1
 80015f4:	43d2      	mvns	r2, r2
 80015f6:	401a      	ands	r2, r3
 80015f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	019b      	lsls	r3, r3, #6
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	401a      	ands	r2, r3
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	0018      	movs	r0, r3
 8001608:	2303      	movs	r3, #3
 800160a:	4003      	ands	r3, r0
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001610:	4809      	ldr	r0, [pc, #36]	; (8001638 <__NVIC_SetPriority+0xd8>)
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	001c      	movs	r4, r3
 8001618:	230f      	movs	r3, #15
 800161a:	4023      	ands	r3, r4
 800161c:	3b08      	subs	r3, #8
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	430a      	orrs	r2, r1
 8001622:	3306      	adds	r3, #6
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	18c3      	adds	r3, r0, r3
 8001628:	3304      	adds	r3, #4
 800162a:	601a      	str	r2, [r3, #0]
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b003      	add	sp, #12
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	1e5a      	subs	r2, r3, #1
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	045b      	lsls	r3, r3, #17
 800164c:	429a      	cmp	r2, r3
 800164e:	d301      	bcc.n	8001654 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001650:	2301      	movs	r3, #1
 8001652:	e010      	b.n	8001676 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <SysTick_Config+0x44>)
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	3a01      	subs	r2, #1
 800165a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165c:	2301      	movs	r3, #1
 800165e:	425b      	negs	r3, r3
 8001660:	2103      	movs	r1, #3
 8001662:	0018      	movs	r0, r3
 8001664:	f7ff ff7c 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x44>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x44>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	210f      	movs	r1, #15
 8001690:	187b      	adds	r3, r7, r1
 8001692:	1c02      	adds	r2, r0, #0
 8001694:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	187b      	adds	r3, r7, r1
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b25b      	sxtb	r3, r3
 800169e:	0011      	movs	r1, r2
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff ff5d 	bl	8001560 <__NVIC_SetPriority>
}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b004      	add	sp, #16
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	0002      	movs	r2, r0
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff ff33 	bl	800152c <__NVIC_EnableIRQ>
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b002      	add	sp, #8
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff ffaf 	bl	800163c <SysTick_Config>
 80016de:	0003      	movs	r3, r0
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f0:	230f      	movs	r3, #15
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2225      	movs	r2, #37	; 0x25
 80016fc:	5c9b      	ldrb	r3, [r3, r2]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d008      	beq.n	8001716 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2204      	movs	r2, #4
 8001708:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2224      	movs	r2, #36	; 0x24
 800170e:	2100      	movs	r1, #0
 8001710:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e024      	b.n	8001760 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	210e      	movs	r1, #14
 8001722:	438a      	bics	r2, r1
 8001724:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2101      	movs	r1, #1
 8001732:	438a      	bics	r2, r1
 8001734:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	221c      	movs	r2, #28
 800173c:	401a      	ands	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2101      	movs	r1, #1
 8001744:	4091      	lsls	r1, r2
 8001746:	000a      	movs	r2, r1
 8001748:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2225      	movs	r2, #37	; 0x25
 800174e:	2101      	movs	r1, #1
 8001750:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2224      	movs	r2, #36	; 0x24
 8001756:	2100      	movs	r1, #0
 8001758:	5499      	strb	r1, [r3, r2]

    return status;
 800175a:	230f      	movs	r3, #15
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001760:	0018      	movs	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	b004      	add	sp, #16
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	210f      	movs	r1, #15
 8001772:	187b      	adds	r3, r7, r1
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2225      	movs	r2, #37	; 0x25
 800177c:	5c9b      	ldrb	r3, [r3, r2]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d006      	beq.n	8001792 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2204      	movs	r2, #4
 8001788:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e02a      	b.n	80017e8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	210e      	movs	r1, #14
 800179e:	438a      	bics	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	438a      	bics	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	221c      	movs	r2, #28
 80017b8:	401a      	ands	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	2101      	movs	r1, #1
 80017c0:	4091      	lsls	r1, r2
 80017c2:	000a      	movs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2225      	movs	r2, #37	; 0x25
 80017ca:	2101      	movs	r1, #1
 80017cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2224      	movs	r2, #36	; 0x24
 80017d2:	2100      	movs	r1, #0
 80017d4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	0010      	movs	r0, r2
 80017e6:	4798      	blx	r3
    }
  }
  return status;
 80017e8:	230f      	movs	r3, #15
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	781b      	ldrb	r3, [r3, #0]
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b004      	add	sp, #16
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800180e:	e14f      	b.n	8001ab0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4091      	lsls	r1, r2
 800181a:	000a      	movs	r2, r1
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d100      	bne.n	8001828 <HAL_GPIO_Init+0x30>
 8001826:	e140      	b.n	8001aaa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2203      	movs	r2, #3
 800182e:	4013      	ands	r3, r2
 8001830:	2b01      	cmp	r3, #1
 8001832:	d005      	beq.n	8001840 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2203      	movs	r2, #3
 800183a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800183c:	2b02      	cmp	r3, #2
 800183e:	d130      	bne.n	80018a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	409a      	lsls	r2, r3
 800184e:	0013      	movs	r3, r2
 8001850:	43da      	mvns	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	409a      	lsls	r2, r3
 8001862:	0013      	movs	r3, r2
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001876:	2201      	movs	r2, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	2201      	movs	r2, #1
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2203      	movs	r2, #3
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d017      	beq.n	80018de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	43da      	mvns	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d123      	bne.n	8001932 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	58d3      	ldr	r3, [r2, r3]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2207      	movs	r2, #7
 80018fc:	4013      	ands	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	409a      	lsls	r2, r3
 8001904:	0013      	movs	r3, r2
 8001906:	43da      	mvns	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2107      	movs	r1, #7
 8001916:	400b      	ands	r3, r1
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	409a      	lsls	r2, r3
 800191c:	0013      	movs	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	6939      	ldr	r1, [r7, #16]
 8001930:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	43da      	mvns	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	401a      	ands	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	23c0      	movs	r3, #192	; 0xc0
 800196c:	029b      	lsls	r3, r3, #10
 800196e:	4013      	ands	r3, r2
 8001970:	d100      	bne.n	8001974 <HAL_GPIO_Init+0x17c>
 8001972:	e09a      	b.n	8001aaa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001974:	4b54      	ldr	r3, [pc, #336]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 800197a:	2101      	movs	r1, #1
 800197c:	430a      	orrs	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001980:	4a52      	ldr	r2, [pc, #328]	; (8001acc <HAL_GPIO_Init+0x2d4>)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	589b      	ldr	r3, [r3, r2]
 800198c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2203      	movs	r2, #3
 8001992:	4013      	ands	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	409a      	lsls	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	43da      	mvns	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	23a0      	movs	r3, #160	; 0xa0
 80019a8:	05db      	lsls	r3, r3, #23
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x1ea>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a47      	ldr	r2, [pc, #284]	; (8001ad0 <HAL_GPIO_Init+0x2d8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x1e6>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a46      	ldr	r2, [pc, #280]	; (8001ad4 <HAL_GPIO_Init+0x2dc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x1e2>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a45      	ldr	r2, [pc, #276]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x1de>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a44      	ldr	r2, [pc, #272]	; (8001adc <HAL_GPIO_Init+0x2e4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x1da>
 80019ce:	2305      	movs	r3, #5
 80019d0:	e008      	b.n	80019e4 <HAL_GPIO_Init+0x1ec>
 80019d2:	2306      	movs	r3, #6
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x1ec>
 80019d6:	2303      	movs	r3, #3
 80019d8:	e004      	b.n	80019e4 <HAL_GPIO_Init+0x1ec>
 80019da:	2302      	movs	r3, #2
 80019dc:	e002      	b.n	80019e4 <HAL_GPIO_Init+0x1ec>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_GPIO_Init+0x1ec>
 80019e2:	2300      	movs	r3, #0
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	2103      	movs	r1, #3
 80019e8:	400a      	ands	r2, r1
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	4093      	lsls	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f4:	4935      	ldr	r1, [pc, #212]	; (8001acc <HAL_GPIO_Init+0x2d4>)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a02:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	025b      	lsls	r3, r3, #9
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43da      	mvns	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	029b      	lsls	r3, r3, #10
 8001a44:	4013      	ands	r3, r2
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	035b      	lsls	r3, r3, #13
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	039b      	lsls	r3, r3, #14
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	40da      	lsrs	r2, r3
 8001ab8:	1e13      	subs	r3, r2, #0
 8001aba:	d000      	beq.n	8001abe <HAL_GPIO_Init+0x2c6>
 8001abc:	e6a8      	b.n	8001810 <HAL_GPIO_Init+0x18>
  }
}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b006      	add	sp, #24
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	50000400 	.word	0x50000400
 8001ad4:	50000800 	.word	0x50000800
 8001ad8:	50000c00 	.word	0x50000c00
 8001adc:	50001c00 	.word	0x50001c00
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	0008      	movs	r0, r1
 8001aee:	0011      	movs	r1, r2
 8001af0:	1cbb      	adds	r3, r7, #2
 8001af2:	1c02      	adds	r2, r0, #0
 8001af4:	801a      	strh	r2, [r3, #0]
 8001af6:	1c7b      	adds	r3, r7, #1
 8001af8:	1c0a      	adds	r2, r1, #0
 8001afa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afc:	1c7b      	adds	r3, r7, #1
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b04:	1cbb      	adds	r3, r7, #2
 8001b06:	881a      	ldrh	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b0c:	e003      	b.n	8001b16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b0e:	1cbb      	adds	r3, r7, #2
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f000 fb5a 	bl	80021e8 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b34:	4bce      	ldr	r3, [pc, #824]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	220c      	movs	r2, #12
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b3e:	4bcc      	ldr	r3, [pc, #816]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	025b      	lsls	r3, r3, #9
 8001b46:	4013      	ands	r3, r2
 8001b48:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4013      	ands	r3, r2
 8001b52:	d100      	bne.n	8001b56 <HAL_RCC_OscConfig+0x36>
 8001b54:	e07c      	b.n	8001c50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d007      	beq.n	8001b6c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d111      	bne.n	8001b86 <HAL_RCC_OscConfig+0x66>
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	025b      	lsls	r3, r3, #9
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d10c      	bne.n	8001b86 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	4bc0      	ldr	r3, [pc, #768]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	029b      	lsls	r3, r3, #10
 8001b74:	4013      	ands	r3, r2
 8001b76:	d100      	bne.n	8001b7a <HAL_RCC_OscConfig+0x5a>
 8001b78:	e069      	b.n	8001c4e <HAL_RCC_OscConfig+0x12e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d165      	bne.n	8001c4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e330      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	025b      	lsls	r3, r3, #9
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x82>
 8001b92:	4bb7      	ldr	r3, [pc, #732]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4bb6      	ldr	r3, [pc, #728]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0249      	lsls	r1, r1, #9
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e027      	b.n	8001bf2 <HAL_RCC_OscConfig+0xd2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	23a0      	movs	r3, #160	; 0xa0
 8001ba8:	02db      	lsls	r3, r3, #11
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d10e      	bne.n	8001bcc <HAL_RCC_OscConfig+0xac>
 8001bae:	4bb0      	ldr	r3, [pc, #704]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4baf      	ldr	r3, [pc, #700]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	02c9      	lsls	r1, r1, #11
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	4bac      	ldr	r3, [pc, #688]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4bab      	ldr	r3, [pc, #684]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	0249      	lsls	r1, r1, #9
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e012      	b.n	8001bf2 <HAL_RCC_OscConfig+0xd2>
 8001bcc:	4ba8      	ldr	r3, [pc, #672]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4ba7      	ldr	r3, [pc, #668]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001bd2:	49a8      	ldr	r1, [pc, #672]	; (8001e74 <HAL_RCC_OscConfig+0x354>)
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	4ba5      	ldr	r3, [pc, #660]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	025b      	lsls	r3, r3, #9
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4ba2      	ldr	r3, [pc, #648]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4ba1      	ldr	r3, [pc, #644]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001bec:	49a2      	ldr	r1, [pc, #648]	; (8001e78 <HAL_RCC_OscConfig+0x358>)
 8001bee:	400a      	ands	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d014      	beq.n	8001c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fc69 	bl	80014d0 <HAL_GetTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fc64 	bl	80014d0 <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e2e8      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c16:	4b96      	ldr	r3, [pc, #600]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	029b      	lsls	r3, r3, #10
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xe4>
 8001c22:	e015      	b.n	8001c50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fc54 	bl	80014d0 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c2e:	f7ff fc4f 	bl	80014d0 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b64      	cmp	r3, #100	; 0x64
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e2d3      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c40:	4b8b      	ldr	r3, [pc, #556]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	029b      	lsls	r3, r3, #10
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x10e>
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2202      	movs	r2, #2
 8001c56:	4013      	ands	r3, r2
 8001c58:	d100      	bne.n	8001c5c <HAL_RCC_OscConfig+0x13c>
 8001c5a:	e08b      	b.n	8001d74 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d13e      	bne.n	8001cec <HAL_RCC_OscConfig+0x1cc>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d13b      	bne.n	8001cec <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c74:	4b7e      	ldr	r3, [pc, #504]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2204      	movs	r2, #4
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d004      	beq.n	8001c88 <HAL_RCC_OscConfig+0x168>
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e2af      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b79      	ldr	r3, [pc, #484]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4a7b      	ldr	r2, [pc, #492]	; (8001e7c <HAL_RCC_OscConfig+0x35c>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	021a      	lsls	r2, r3, #8
 8001c98:	4b75      	ldr	r3, [pc, #468]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c9e:	4b74      	ldr	r3, [pc, #464]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2209      	movs	r2, #9
 8001ca4:	4393      	bics	r3, r2
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	4b71      	ldr	r3, [pc, #452]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cb0:	f000 fbe8 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8001cb4:	0001      	movs	r1, r0
 8001cb6:	4b6e      	ldr	r3, [pc, #440]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	4a6f      	ldr	r2, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x360>)
 8001cc2:	5cd3      	ldrb	r3, [r2, r3]
 8001cc4:	000a      	movs	r2, r1
 8001cc6:	40da      	lsrs	r2, r3
 8001cc8:	4b6e      	ldr	r3, [pc, #440]	; (8001e84 <HAL_RCC_OscConfig+0x364>)
 8001cca:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001ccc:	4b6e      	ldr	r3, [pc, #440]	; (8001e88 <HAL_RCC_OscConfig+0x368>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2513      	movs	r5, #19
 8001cd2:	197c      	adds	r4, r7, r5
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7ff fbb5 	bl	8001444 <HAL_InitTick>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001cde:	197b      	adds	r3, r7, r5
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d046      	beq.n	8001d74 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8001ce6:	197b      	adds	r3, r7, r5
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	e27d      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d027      	beq.n	8001d42 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001cf2:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2209      	movs	r2, #9
 8001cf8:	4393      	bics	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fbe4 	bl	80014d0 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fbdf 	bl	80014d0 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e263      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d20:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2204      	movs	r2, #4
 8001d26:	4013      	ands	r3, r2
 8001d28:	d0f1      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4a53      	ldr	r2, [pc, #332]	; (8001e7c <HAL_RCC_OscConfig+0x35c>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	0019      	movs	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	021a      	lsls	r2, r3, #8
 8001d3a:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	e018      	b.n	8001d74 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	4b4b      	ldr	r3, [pc, #300]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001d48:	2101      	movs	r1, #1
 8001d4a:	438a      	bics	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fbbf 	bl	80014d0 <HAL_GetTick>
 8001d52:	0003      	movs	r3, r0
 8001d54:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff fbba 	bl	80014d0 <HAL_GetTick>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e23e      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d6a:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2204      	movs	r2, #4
 8001d70:	4013      	ands	r3, r2
 8001d72:	d1f1      	bne.n	8001d58 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2210      	movs	r2, #16
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d100      	bne.n	8001d80 <HAL_RCC_OscConfig+0x260>
 8001d7e:	e0a1      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d140      	bne.n	8001e08 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d86:	4b3a      	ldr	r3, [pc, #232]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d005      	beq.n	8001d9e <HAL_RCC_OscConfig+0x27e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e224      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d9e:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <HAL_RCC_OscConfig+0x36c>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1a      	ldr	r2, [r3, #32]
 8001dac:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001dae:	430a      	orrs	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001db2:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	0a19      	lsrs	r1, r3, #8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	061a      	lsls	r2, r3, #24
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	0b5b      	lsrs	r3, r3, #13
 8001dcc:	3301      	adds	r3, #1
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	0212      	lsls	r2, r2, #8
 8001dd2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001dd4:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	210f      	movs	r1, #15
 8001ddc:	400b      	ands	r3, r1
 8001dde:	4928      	ldr	r1, [pc, #160]	; (8001e80 <HAL_RCC_OscConfig+0x360>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x364>)
 8001de6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_RCC_OscConfig+0x368>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2513      	movs	r5, #19
 8001dee:	197c      	adds	r4, r7, r5
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff fb27 	bl	8001444 <HAL_InitTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001dfa:	197b      	adds	r3, r7, r5
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d060      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8001e02:	197b      	adds	r3, r7, r5
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	e1ef      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d03f      	beq.n	8001e90 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	0049      	lsls	r1, r1, #1
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fb57 	bl	80014d0 <HAL_GetTick>
 8001e22:	0003      	movs	r3, r0
 8001e24:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e28:	f7ff fb52 	bl	80014d0 <HAL_GetTick>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e1d6      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4013      	ands	r3, r2
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_RCC_OscConfig+0x36c>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1a      	ldr	r2, [r3, #32]
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	0a19      	lsrs	r1, r3, #8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	061a      	lsls	r2, r3, #24
 8001e68:	4b01      	ldr	r3, [pc, #4]	; (8001e70 <HAL_RCC_OscConfig+0x350>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	e029      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3a4>
 8001e70:	40021000 	.word	0x40021000
 8001e74:	fffeffff 	.word	0xfffeffff
 8001e78:	fffbffff 	.word	0xfffbffff
 8001e7c:	ffffe0ff 	.word	0xffffe0ff
 8001e80:	08005218 	.word	0x08005218
 8001e84:	2000006c 	.word	0x2000006c
 8001e88:	20000070 	.word	0x20000070
 8001e8c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e90:	4bbe      	ldr	r3, [pc, #760]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4bbd      	ldr	r3, [pc, #756]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001e96:	49be      	ldr	r1, [pc, #760]	; (8002190 <HAL_RCC_OscConfig+0x670>)
 8001e98:	400a      	ands	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fb18 	bl	80014d0 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fb13 	bl	80014d0 <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e197      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001eb8:	4bb4      	ldr	r3, [pc, #720]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d036      	beq.n	8001f3c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d019      	beq.n	8001f0a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed6:	4bad      	ldr	r3, [pc, #692]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eda:	4bac      	ldr	r3, [pc, #688]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff faf5 	bl	80014d0 <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff faf0 	bl	80014d0 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e174      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001efe:	4ba3      	ldr	r3, [pc, #652]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f02:	2202      	movs	r2, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d0f1      	beq.n	8001eec <HAL_RCC_OscConfig+0x3cc>
 8001f08:	e018      	b.n	8001f3c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0a:	4ba0      	ldr	r3, [pc, #640]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f0e:	4b9f      	ldr	r3, [pc, #636]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001f10:	2101      	movs	r1, #1
 8001f12:	438a      	bics	r2, r1
 8001f14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fadb 	bl	80014d0 <HAL_GetTick>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff fad6 	bl	80014d0 <HAL_GetTick>
 8001f24:	0002      	movs	r2, r0
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e15a      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f32:	4b96      	ldr	r3, [pc, #600]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f36:	2202      	movs	r2, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d1f1      	bne.n	8001f20 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2204      	movs	r2, #4
 8001f42:	4013      	ands	r3, r2
 8001f44:	d100      	bne.n	8001f48 <HAL_RCC_OscConfig+0x428>
 8001f46:	e0ae      	b.n	80020a6 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f48:	2027      	movs	r0, #39	; 0x27
 8001f4a:	183b      	adds	r3, r7, r0
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f50:	4b8e      	ldr	r3, [pc, #568]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	055b      	lsls	r3, r3, #21
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d109      	bne.n	8001f70 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	4b8b      	ldr	r3, [pc, #556]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f60:	4b8a      	ldr	r3, [pc, #552]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001f62:	2180      	movs	r1, #128	; 0x80
 8001f64:	0549      	lsls	r1, r1, #21
 8001f66:	430a      	orrs	r2, r1
 8001f68:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f6a:	183b      	adds	r3, r7, r0
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	4b88      	ldr	r3, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x674>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d11a      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7c:	4b85      	ldr	r3, [pc, #532]	; (8002194 <HAL_RCC_OscConfig+0x674>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b84      	ldr	r3, [pc, #528]	; (8002194 <HAL_RCC_OscConfig+0x674>)
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	0049      	lsls	r1, r1, #1
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff faa1 	bl	80014d0 <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f94:	f7ff fa9c 	bl	80014d0 <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e120      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b7b      	ldr	r3, [pc, #492]	; (8002194 <HAL_RCC_OscConfig+0x674>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_OscConfig+0x4ae>
 8001fbe:	4b73      	ldr	r3, [pc, #460]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc2:	4b72      	ldr	r3, [pc, #456]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	0049      	lsls	r1, r1, #1
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	651a      	str	r2, [r3, #80]	; 0x50
 8001fcc:	e031      	b.n	8002032 <HAL_RCC_OscConfig+0x512>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4d0>
 8001fd6:	4b6d      	ldr	r3, [pc, #436]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fda:	4b6c      	ldr	r3, [pc, #432]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001fdc:	496c      	ldr	r1, [pc, #432]	; (8002190 <HAL_RCC_OscConfig+0x670>)
 8001fde:	400a      	ands	r2, r1
 8001fe0:	651a      	str	r2, [r3, #80]	; 0x50
 8001fe2:	4b6a      	ldr	r3, [pc, #424]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe6:	4b69      	ldr	r3, [pc, #420]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001fe8:	496b      	ldr	r1, [pc, #428]	; (8002198 <HAL_RCC_OscConfig+0x678>)
 8001fea:	400a      	ands	r2, r1
 8001fec:	651a      	str	r2, [r3, #80]	; 0x50
 8001fee:	e020      	b.n	8002032 <HAL_RCC_OscConfig+0x512>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	23a0      	movs	r3, #160	; 0xa0
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d10e      	bne.n	800201a <HAL_RCC_OscConfig+0x4fa>
 8001ffc:	4b63      	ldr	r3, [pc, #396]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8001ffe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002000:	4b62      	ldr	r3, [pc, #392]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	00c9      	lsls	r1, r1, #3
 8002006:	430a      	orrs	r2, r1
 8002008:	651a      	str	r2, [r3, #80]	; 0x50
 800200a:	4b60      	ldr	r3, [pc, #384]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 800200c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800200e:	4b5f      	ldr	r3, [pc, #380]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	0049      	lsls	r1, r1, #1
 8002014:	430a      	orrs	r2, r1
 8002016:	651a      	str	r2, [r3, #80]	; 0x50
 8002018:	e00b      	b.n	8002032 <HAL_RCC_OscConfig+0x512>
 800201a:	4b5c      	ldr	r3, [pc, #368]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 800201c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800201e:	4b5b      	ldr	r3, [pc, #364]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8002020:	495b      	ldr	r1, [pc, #364]	; (8002190 <HAL_RCC_OscConfig+0x670>)
 8002022:	400a      	ands	r2, r1
 8002024:	651a      	str	r2, [r3, #80]	; 0x50
 8002026:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8002028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800202a:	4b58      	ldr	r3, [pc, #352]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 800202c:	495a      	ldr	r1, [pc, #360]	; (8002198 <HAL_RCC_OscConfig+0x678>)
 800202e:	400a      	ands	r2, r1
 8002030:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d015      	beq.n	8002066 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7ff fa49 	bl	80014d0 <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002042:	e009      	b.n	8002058 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f7ff fa44 	bl	80014d0 <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	4a53      	ldr	r2, [pc, #332]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0c7      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002058:	4b4c      	ldr	r3, [pc, #304]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 800205a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4013      	ands	r3, r2
 8002062:	d0ef      	beq.n	8002044 <HAL_RCC_OscConfig+0x524>
 8002064:	e014      	b.n	8002090 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7ff fa33 	bl	80014d0 <HAL_GetTick>
 800206a:	0003      	movs	r3, r0
 800206c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800206e:	e009      	b.n	8002084 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7ff fa2e 	bl	80014d0 <HAL_GetTick>
 8002074:	0002      	movs	r2, r0
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	4a48      	ldr	r2, [pc, #288]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e0b1      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002084:	4b41      	ldr	r3, [pc, #260]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8002086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4013      	ands	r3, r2
 800208e:	d1ef      	bne.n	8002070 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002090:	2327      	movs	r3, #39	; 0x27
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b3c      	ldr	r3, [pc, #240]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 800209c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 80020a0:	493f      	ldr	r1, [pc, #252]	; (80021a0 <HAL_RCC_OscConfig+0x680>)
 80020a2:	400a      	ands	r2, r1
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d100      	bne.n	80020b0 <HAL_RCC_OscConfig+0x590>
 80020ae:	e09a      	b.n	80021e6 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	d064      	beq.n	8002180 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d145      	bne.n	800214a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020be:	4b33      	ldr	r3, [pc, #204]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b32      	ldr	r3, [pc, #200]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 80020c4:	4937      	ldr	r1, [pc, #220]	; (80021a4 <HAL_RCC_OscConfig+0x684>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff fa01 	bl	80014d0 <HAL_GetTick>
 80020ce:	0003      	movs	r3, r0
 80020d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff f9fc 	bl	80014d0 <HAL_GetTick>
 80020d8:	0002      	movs	r2, r0
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e080      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	049b      	lsls	r3, r3, #18
 80020ee:	4013      	ands	r3, r2
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	4a2c      	ldr	r2, [pc, #176]	; (80021a8 <HAL_RCC_OscConfig+0x688>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	431a      	orrs	r2, r3
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 800210e:	430a      	orrs	r2, r1
 8002110:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	0449      	lsls	r1, r1, #17
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff f9d6 	bl	80014d0 <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212a:	f7ff f9d1 	bl	80014d0 <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e055      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	049b      	lsls	r3, r3, #18
 8002144:	4013      	ands	r3, r2
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x60a>
 8002148:	e04d      	b.n	80021e6 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8002150:	4914      	ldr	r1, [pc, #80]	; (80021a4 <HAL_RCC_OscConfig+0x684>)
 8002152:	400a      	ands	r2, r1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7ff f9bb 	bl	80014d0 <HAL_GetTick>
 800215a:	0003      	movs	r3, r0
 800215c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff f9b6 	bl	80014d0 <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e03a      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCC_OscConfig+0x66c>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	049b      	lsls	r3, r3, #18
 800217a:	4013      	ands	r3, r2
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x640>
 800217e:	e032      	b.n	80021e6 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	2b01      	cmp	r3, #1
 8002186:	d111      	bne.n	80021ac <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e02d      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
 800218c:	40021000 	.word	0x40021000
 8002190:	fffffeff 	.word	0xfffffeff
 8002194:	40007000 	.word	0x40007000
 8002198:	fffffbff 	.word	0xfffffbff
 800219c:	00001388 	.word	0x00001388
 80021a0:	efffffff 	.word	0xefffffff
 80021a4:	feffffff 	.word	0xfeffffff
 80021a8:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_RCC_OscConfig+0x6d0>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	025b      	lsls	r3, r3, #9
 80021b8:	401a      	ands	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	429a      	cmp	r2, r3
 80021c0:	d10f      	bne.n	80021e2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	23f0      	movs	r3, #240	; 0xf0
 80021c6:	039b      	lsls	r3, r3, #14
 80021c8:	401a      	ands	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	23c0      	movs	r3, #192	; 0xc0
 80021d6:	041b      	lsls	r3, r3, #16
 80021d8:	401a      	ands	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b00a      	add	sp, #40	; 0x28
 80021ee:	bdb0      	pop	{r4, r5, r7, pc}
 80021f0:	40021000 	.word	0x40021000

080021f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b5b0      	push	{r4, r5, r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e128      	b.n	800245a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b96      	ldr	r3, [pc, #600]	; (8002464 <HAL_RCC_ClockConfig+0x270>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2201      	movs	r2, #1
 800220e:	4013      	ands	r3, r2
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d91e      	bls.n	8002254 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b93      	ldr	r3, [pc, #588]	; (8002464 <HAL_RCC_ClockConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2201      	movs	r2, #1
 800221c:	4393      	bics	r3, r2
 800221e:	0019      	movs	r1, r3
 8002220:	4b90      	ldr	r3, [pc, #576]	; (8002464 <HAL_RCC_ClockConfig+0x270>)
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002228:	f7ff f952 	bl	80014d0 <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002230:	e009      	b.n	8002246 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002232:	f7ff f94d 	bl	80014d0 <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	4a8a      	ldr	r2, [pc, #552]	; (8002468 <HAL_RCC_ClockConfig+0x274>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e109      	b.n	800245a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b87      	ldr	r3, [pc, #540]	; (8002464 <HAL_RCC_ClockConfig+0x270>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	4013      	ands	r3, r2
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d1ee      	bne.n	8002232 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2202      	movs	r2, #2
 800225a:	4013      	ands	r3, r2
 800225c:	d009      	beq.n	8002272 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225e:	4b83      	ldr	r3, [pc, #524]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	22f0      	movs	r2, #240	; 0xf0
 8002264:	4393      	bics	r3, r2
 8002266:	0019      	movs	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4b7f      	ldr	r3, [pc, #508]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 800226e:	430a      	orrs	r2, r1
 8002270:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2201      	movs	r2, #1
 8002278:	4013      	ands	r3, r2
 800227a:	d100      	bne.n	800227e <HAL_RCC_ClockConfig+0x8a>
 800227c:	e089      	b.n	8002392 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002286:	4b79      	ldr	r3, [pc, #484]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	029b      	lsls	r3, r3, #10
 800228e:	4013      	ands	r3, r2
 8002290:	d120      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0e1      	b.n	800245a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b03      	cmp	r3, #3
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800229e:	4b73      	ldr	r3, [pc, #460]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	049b      	lsls	r3, r3, #18
 80022a6:	4013      	ands	r3, r2
 80022a8:	d114      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0d5      	b.n	800245a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d106      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022b6:	4b6d      	ldr	r3, [pc, #436]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2204      	movs	r2, #4
 80022bc:	4013      	ands	r3, r2
 80022be:	d109      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0ca      	b.n	800245a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022c4:	4b69      	ldr	r3, [pc, #420]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4013      	ands	r3, r2
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0c2      	b.n	800245a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d4:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2203      	movs	r2, #3
 80022da:	4393      	bics	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	4b62      	ldr	r3, [pc, #392]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 80022e4:	430a      	orrs	r2, r1
 80022e6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7ff f8f2 	bl	80014d0 <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d111      	bne.n	800231c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f8:	e009      	b.n	800230e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fa:	f7ff f8e9 	bl	80014d0 <HAL_GetTick>
 80022fe:	0002      	movs	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	4a58      	ldr	r2, [pc, #352]	; (8002468 <HAL_RCC_ClockConfig+0x274>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e0a5      	b.n	800245a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800230e:	4b57      	ldr	r3, [pc, #348]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	220c      	movs	r2, #12
 8002314:	4013      	ands	r3, r2
 8002316:	2b08      	cmp	r3, #8
 8002318:	d1ef      	bne.n	80022fa <HAL_RCC_ClockConfig+0x106>
 800231a:	e03a      	b.n	8002392 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d111      	bne.n	8002348 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002324:	e009      	b.n	800233a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002326:	f7ff f8d3 	bl	80014d0 <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	4a4d      	ldr	r2, [pc, #308]	; (8002468 <HAL_RCC_ClockConfig+0x274>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e08f      	b.n	800245a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800233a:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	220c      	movs	r2, #12
 8002340:	4013      	ands	r3, r2
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d1ef      	bne.n	8002326 <HAL_RCC_ClockConfig+0x132>
 8002346:	e024      	b.n	8002392 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d11b      	bne.n	8002388 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002350:	e009      	b.n	8002366 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002352:	f7ff f8bd 	bl	80014d0 <HAL_GetTick>
 8002356:	0002      	movs	r2, r0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	4a42      	ldr	r2, [pc, #264]	; (8002468 <HAL_RCC_ClockConfig+0x274>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e079      	b.n	800245a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002366:	4b41      	ldr	r3, [pc, #260]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	220c      	movs	r2, #12
 800236c:	4013      	ands	r3, r2
 800236e:	2b04      	cmp	r3, #4
 8002370:	d1ef      	bne.n	8002352 <HAL_RCC_ClockConfig+0x15e>
 8002372:	e00e      	b.n	8002392 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7ff f8ac 	bl	80014d0 <HAL_GetTick>
 8002378:	0002      	movs	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	4a3a      	ldr	r2, [pc, #232]	; (8002468 <HAL_RCC_ClockConfig+0x274>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e068      	b.n	800245a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002388:	4b38      	ldr	r3, [pc, #224]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	220c      	movs	r2, #12
 800238e:	4013      	ands	r3, r2
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002392:	4b34      	ldr	r3, [pc, #208]	; (8002464 <HAL_RCC_ClockConfig+0x270>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2201      	movs	r2, #1
 8002398:	4013      	ands	r3, r2
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d21e      	bcs.n	80023de <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a0:	4b30      	ldr	r3, [pc, #192]	; (8002464 <HAL_RCC_ClockConfig+0x270>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2201      	movs	r2, #1
 80023a6:	4393      	bics	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_RCC_ClockConfig+0x270>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023b2:	f7ff f88d 	bl	80014d0 <HAL_GetTick>
 80023b6:	0003      	movs	r3, r0
 80023b8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	e009      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023bc:	f7ff f888 	bl	80014d0 <HAL_GetTick>
 80023c0:	0002      	movs	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	4a28      	ldr	r2, [pc, #160]	; (8002468 <HAL_RCC_ClockConfig+0x274>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e044      	b.n	800245a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCC_ClockConfig+0x270>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d1ee      	bne.n	80023bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2204      	movs	r2, #4
 80023e4:	4013      	ands	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a20      	ldr	r2, [pc, #128]	; (8002470 <HAL_RCC_ClockConfig+0x27c>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2208      	movs	r2, #8
 8002402:	4013      	ands	r3, r2
 8002404:	d00a      	beq.n	800241c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002406:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <HAL_RCC_ClockConfig+0x280>)
 800240c:	4013      	ands	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	00da      	lsls	r2, r3, #3
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 8002418:	430a      	orrs	r2, r1
 800241a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800241c:	f000 f832 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8002420:	0001      	movs	r1, r0
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_RCC_ClockConfig+0x278>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	220f      	movs	r2, #15
 800242a:	4013      	ands	r3, r2
 800242c:	4a12      	ldr	r2, [pc, #72]	; (8002478 <HAL_RCC_ClockConfig+0x284>)
 800242e:	5cd3      	ldrb	r3, [r2, r3]
 8002430:	000a      	movs	r2, r1
 8002432:	40da      	lsrs	r2, r3
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 8002436:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_RCC_ClockConfig+0x28c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	250b      	movs	r5, #11
 800243e:	197c      	adds	r4, r7, r5
 8002440:	0018      	movs	r0, r3
 8002442:	f7fe ffff 	bl	8001444 <HAL_InitTick>
 8002446:	0003      	movs	r3, r0
 8002448:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800244a:	197b      	adds	r3, r7, r5
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002452:	197b      	adds	r3, r7, r5
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	e000      	b.n	800245a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b004      	add	sp, #16
 8002460:	bdb0      	pop	{r4, r5, r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	40022000 	.word	0x40022000
 8002468:	00001388 	.word	0x00001388
 800246c:	40021000 	.word	0x40021000
 8002470:	fffff8ff 	.word	0xfffff8ff
 8002474:	ffffc7ff 	.word	0xffffc7ff
 8002478:	08005218 	.word	0x08005218
 800247c:	2000006c 	.word	0x2000006c
 8002480:	20000070 	.word	0x20000070

08002484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002484:	b5b0      	push	{r4, r5, r7, lr}
 8002486:	b08e      	sub	sp, #56	; 0x38
 8002488:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800248a:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <HAL_RCC_GetSysClockFreq+0x138>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002492:	230c      	movs	r3, #12
 8002494:	4013      	ands	r3, r2
 8002496:	2b0c      	cmp	r3, #12
 8002498:	d014      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x40>
 800249a:	d900      	bls.n	800249e <HAL_RCC_GetSysClockFreq+0x1a>
 800249c:	e07b      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x112>
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d002      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x24>
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d00b      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0x3a>
 80024a6:	e076      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024a8:	4b44      	ldr	r3, [pc, #272]	; (80025bc <HAL_RCC_GetSysClockFreq+0x138>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2210      	movs	r2, #16
 80024ae:	4013      	ands	r3, r2
 80024b0:	d002      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80024b2:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80024b6:	e07c      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80024b8:	4b42      	ldr	r3, [pc, #264]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x140>)
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024bc:	e079      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024be:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024c2:	e076      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	0c9a      	lsrs	r2, r3, #18
 80024c8:	230f      	movs	r3, #15
 80024ca:	401a      	ands	r2, r3
 80024cc:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <HAL_RCC_GetSysClockFreq+0x148>)
 80024ce:	5c9b      	ldrb	r3, [r3, r2]
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	0d9a      	lsrs	r2, r3, #22
 80024d6:	2303      	movs	r3, #3
 80024d8:	4013      	ands	r3, r2
 80024da:	3301      	adds	r3, #1
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024de:	4b37      	ldr	r3, [pc, #220]	; (80025bc <HAL_RCC_GetSysClockFreq+0x138>)
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	025b      	lsls	r3, r3, #9
 80024e6:	4013      	ands	r3, r2
 80024e8:	d01a      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	4a35      	ldr	r2, [pc, #212]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80024f4:	2300      	movs	r3, #0
 80024f6:	69b8      	ldr	r0, [r7, #24]
 80024f8:	69f9      	ldr	r1, [r7, #28]
 80024fa:	f7fd fec3 	bl	8000284 <__aeabi_lmul>
 80024fe:	0002      	movs	r2, r0
 8002500:	000b      	movs	r3, r1
 8002502:	0010      	movs	r0, r2
 8002504:	0019      	movs	r1, r3
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f7fd fe97 	bl	8000244 <__aeabi_uldivmod>
 8002516:	0002      	movs	r2, r0
 8002518:	000b      	movs	r3, r1
 800251a:	0013      	movs	r3, r2
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
 800251e:	e037      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002520:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_RCC_GetSysClockFreq+0x138>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2210      	movs	r2, #16
 8002526:	4013      	ands	r3, r2
 8002528:	d01a      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800252a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4a23      	ldr	r2, [pc, #140]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002534:	2300      	movs	r3, #0
 8002536:	68b8      	ldr	r0, [r7, #8]
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	f7fd fea3 	bl	8000284 <__aeabi_lmul>
 800253e:	0002      	movs	r2, r0
 8002540:	000b      	movs	r3, r1
 8002542:	0010      	movs	r0, r2
 8002544:	0019      	movs	r1, r3
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f7fd fe77 	bl	8000244 <__aeabi_uldivmod>
 8002556:	0002      	movs	r2, r0
 8002558:	000b      	movs	r3, r1
 800255a:	0013      	movs	r3, r2
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
 800255e:	e017      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	0018      	movs	r0, r3
 8002564:	2300      	movs	r3, #0
 8002566:	0019      	movs	r1, r3
 8002568:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x140>)
 800256a:	2300      	movs	r3, #0
 800256c:	f7fd fe8a 	bl	8000284 <__aeabi_lmul>
 8002570:	0002      	movs	r2, r0
 8002572:	000b      	movs	r3, r1
 8002574:	0010      	movs	r0, r2
 8002576:	0019      	movs	r1, r3
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	001c      	movs	r4, r3
 800257c:	2300      	movs	r3, #0
 800257e:	001d      	movs	r5, r3
 8002580:	0022      	movs	r2, r4
 8002582:	002b      	movs	r3, r5
 8002584:	f7fd fe5e 	bl	8000244 <__aeabi_uldivmod>
 8002588:	0002      	movs	r2, r0
 800258a:	000b      	movs	r3, r1
 800258c:	0013      	movs	r3, r2
 800258e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002594:	e00d      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_RCC_GetSysClockFreq+0x138>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	0b5b      	lsrs	r3, r3, #13
 800259c:	2207      	movs	r2, #7
 800259e:	4013      	ands	r3, r2
 80025a0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	3301      	adds	r3, #1
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	0212      	lsls	r2, r2, #8
 80025aa:	409a      	lsls	r2, r3
 80025ac:	0013      	movs	r3, r2
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025b0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b00e      	add	sp, #56	; 0x38
 80025ba:	bdb0      	pop	{r4, r5, r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	003d0900 	.word	0x003d0900
 80025c4:	00f42400 	.word	0x00f42400
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	08005230 	.word	0x08005230

080025d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	2000006c 	.word	0x2000006c

080025e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e8:	f7ff fff2 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 80025ec:	0001      	movs	r1, r0
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	2207      	movs	r2, #7
 80025f6:	4013      	ands	r3, r2
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_RCC_GetPCLK1Freq+0x28>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	40d9      	lsrs	r1, r3
 80025fe:	000b      	movs	r3, r1
}
 8002600:	0018      	movs	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	40021000 	.word	0x40021000
 800260c:	08005228 	.word	0x08005228

08002610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002614:	f7ff ffdc 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 8002618:	0001      	movs	r1, r0
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x24>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	0adb      	lsrs	r3, r3, #11
 8002620:	2207      	movs	r2, #7
 8002622:	4013      	ands	r3, r2
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	40d9      	lsrs	r1, r3
 800262a:	000b      	movs	r3, r1
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	40021000 	.word	0x40021000
 8002638:	08005228 	.word	0x08005228

0800263c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002644:	2017      	movs	r0, #23
 8002646:	183b      	adds	r3, r7, r0
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2220      	movs	r2, #32
 8002652:	4013      	ands	r3, r2
 8002654:	d100      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002656:	e0c2      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002658:	4b89      	ldr	r3, [pc, #548]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800265a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	055b      	lsls	r3, r3, #21
 8002660:	4013      	ands	r3, r2
 8002662:	d109      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002664:	4b86      	ldr	r3, [pc, #536]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002668:	4b85      	ldr	r3, [pc, #532]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	0549      	lsls	r1, r1, #21
 800266e:	430a      	orrs	r2, r1
 8002670:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002672:	183b      	adds	r3, r7, r0
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	4b82      	ldr	r3, [pc, #520]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4013      	ands	r3, r2
 8002682:	d11a      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002684:	4b7f      	ldr	r3, [pc, #508]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b7e      	ldr	r3, [pc, #504]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	0049      	lsls	r1, r1, #1
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe ff1d 	bl	80014d0 <HAL_GetTick>
 8002696:	0003      	movs	r3, r0
 8002698:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269a:	e008      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269c:	f7fe ff18 	bl	80014d0 <HAL_GetTick>
 80026a0:	0002      	movs	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e0e3      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x23a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b75      	ldr	r3, [pc, #468]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4013      	ands	r3, r2
 80026b8:	d0f0      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80026ba:	4b71      	ldr	r3, [pc, #452]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	23c0      	movs	r3, #192	; 0xc0
 80026c0:	039b      	lsls	r3, r3, #14
 80026c2:	4013      	ands	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	23c0      	movs	r3, #192	; 0xc0
 80026cc:	039b      	lsls	r3, r3, #14
 80026ce:	4013      	ands	r3, r2
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d013      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	23c0      	movs	r3, #192	; 0xc0
 80026dc:	029b      	lsls	r3, r3, #10
 80026de:	401a      	ands	r2, r3
 80026e0:	23c0      	movs	r3, #192	; 0xc0
 80026e2:	029b      	lsls	r3, r3, #10
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d10a      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80026e8:	4b65      	ldr	r3, [pc, #404]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	029b      	lsls	r3, r3, #10
 80026f0:	401a      	ands	r2, r3
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	029b      	lsls	r3, r3, #10
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d101      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0bb      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80026fe:	4b60      	ldr	r3, [pc, #384]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002702:	23c0      	movs	r3, #192	; 0xc0
 8002704:	029b      	lsls	r3, r3, #10
 8002706:	4013      	ands	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d03b      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	23c0      	movs	r3, #192	; 0xc0
 8002716:	029b      	lsls	r3, r3, #10
 8002718:	4013      	ands	r3, r2
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	429a      	cmp	r2, r3
 800271e:	d033      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2220      	movs	r2, #32
 8002726:	4013      	ands	r3, r2
 8002728:	d02e      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800272a:	4b55      	ldr	r3, [pc, #340]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800272c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272e:	4a56      	ldr	r2, [pc, #344]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002734:	4b52      	ldr	r3, [pc, #328]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002738:	4b51      	ldr	r3, [pc, #324]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	0309      	lsls	r1, r1, #12
 800273e:	430a      	orrs	r2, r1
 8002740:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002742:	4b4f      	ldr	r3, [pc, #316]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002746:	4b4e      	ldr	r3, [pc, #312]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002748:	4950      	ldr	r1, [pc, #320]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800274a:	400a      	ands	r2, r1
 800274c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800274e:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4013      	ands	r3, r2
 800275c:	d014      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7fe feb7 	bl	80014d0 <HAL_GetTick>
 8002762:	0003      	movs	r3, r0
 8002764:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002766:	e009      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7fe feb2 	bl	80014d0 <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	4a47      	ldr	r2, [pc, #284]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e07c      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800277c:	4b40      	ldr	r3, [pc, #256]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800277e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4013      	ands	r3, r2
 8002786:	d0ef      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	23c0      	movs	r3, #192	; 0xc0
 800278e:	029b      	lsls	r3, r3, #10
 8002790:	401a      	ands	r2, r3
 8002792:	23c0      	movs	r3, #192	; 0xc0
 8002794:	029b      	lsls	r3, r3, #10
 8002796:	429a      	cmp	r2, r3
 8002798:	d10c      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800279a:	4b39      	ldr	r3, [pc, #228]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a3d      	ldr	r2, [pc, #244]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	0019      	movs	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	23c0      	movs	r3, #192	; 0xc0
 80027aa:	039b      	lsls	r3, r3, #14
 80027ac:	401a      	ands	r2, r3
 80027ae:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	4b32      	ldr	r3, [pc, #200]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027b6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	23c0      	movs	r3, #192	; 0xc0
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	401a      	ands	r2, r3
 80027c2:	4b2f      	ldr	r3, [pc, #188]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027c4:	430a      	orrs	r2, r1
 80027c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027c8:	2317      	movs	r3, #23
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027d6:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027d8:	492f      	ldr	r1, [pc, #188]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027da:	400a      	ands	r2, r1
 80027dc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	4013      	ands	r3, r2
 80027e6:	d009      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ec:	2203      	movs	r2, #3
 80027ee:	4393      	bics	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027f8:	430a      	orrs	r2, r1
 80027fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2202      	movs	r2, #2
 8002802:	4013      	ands	r3, r2
 8002804:	d009      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002806:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	220c      	movs	r2, #12
 800280c:	4393      	bics	r3, r2
 800280e:	0019      	movs	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002816:	430a      	orrs	r2, r1
 8002818:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2204      	movs	r2, #4
 8002820:	4013      	ands	r3, r2
 8002822:	d009      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002828:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282a:	4013      	ands	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002834:	430a      	orrs	r2, r1
 8002836:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2208      	movs	r2, #8
 800283e:	4013      	ands	r3, r2
 8002840:	d009      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002848:	4013      	ands	r3, r2
 800284a:	0019      	movs	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002852:	430a      	orrs	r2, r1
 8002854:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	4013      	ands	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002870:	430a      	orrs	r2, r1
 8002872:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	0018      	movs	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	b006      	add	sp, #24
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
 8002888:	fffcffff 	.word	0xfffcffff
 800288c:	fff7ffff 	.word	0xfff7ffff
 8002890:	00001388 	.word	0x00001388
 8002894:	ffcfffff 	.word	0xffcfffff
 8002898:	efffffff 	.word	0xefffffff
 800289c:	fffff3ff 	.word	0xfffff3ff
 80028a0:	ffffcfff 	.word	0xffffcfff
 80028a4:	fff3ffff 	.word	0xfff3ffff

080028a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e044      	b.n	8002944 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d107      	bne.n	80028d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2274      	movs	r2, #116	; 0x74
 80028c6:	2100      	movs	r1, #0
 80028c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f7fe fb8d 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2224      	movs	r2, #36	; 0x24
 80028d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2101      	movs	r1, #1
 80028e4:	438a      	bics	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 fcb4 	bl	8003258 <UART_SetConfig>
 80028f0:	0003      	movs	r3, r0
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e024      	b.n	8002944 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f000 ff2b 	bl	8003760 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	490d      	ldr	r1, [pc, #52]	; (800294c <HAL_UART_Init+0xa4>)
 8002916:	400a      	ands	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	212a      	movs	r1, #42	; 0x2a
 8002926:	438a      	bics	r2, r1
 8002928:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	430a      	orrs	r2, r1
 8002938:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 ffc3 	bl	80038c8 <UART_CheckIdleState>
 8002942:	0003      	movs	r3, r0
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}
 800294c:	ffffb7ff 	.word	0xffffb7ff

08002950 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	1dbb      	adds	r3, r7, #6
 800295e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002964:	2b20      	cmp	r3, #32
 8002966:	d000      	beq.n	800296a <HAL_UART_Transmit+0x1a>
 8002968:	e095      	b.n	8002a96 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_UART_Transmit+0x28>
 8002970:	1dbb      	adds	r3, r7, #6
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e08d      	b.n	8002a98 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	015b      	lsls	r3, r3, #5
 8002984:	429a      	cmp	r2, r3
 8002986:	d109      	bne.n	800299c <HAL_UART_Transmit+0x4c>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2201      	movs	r2, #1
 8002994:	4013      	ands	r3, r2
 8002996:	d001      	beq.n	800299c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e07d      	b.n	8002a98 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2274      	movs	r2, #116	; 0x74
 80029a0:	5c9b      	ldrb	r3, [r3, r2]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Transmit+0x5a>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e076      	b.n	8002a98 <HAL_UART_Transmit+0x148>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2274      	movs	r2, #116	; 0x74
 80029ae:	2101      	movs	r1, #1
 80029b0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	2100      	movs	r1, #0
 80029b8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2221      	movs	r2, #33	; 0x21
 80029be:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029c0:	f7fe fd86 	bl	80014d0 <HAL_GetTick>
 80029c4:	0003      	movs	r3, r0
 80029c6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1dba      	adds	r2, r7, #6
 80029cc:	2150      	movs	r1, #80	; 0x50
 80029ce:	8812      	ldrh	r2, [r2, #0]
 80029d0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1dba      	adds	r2, r7, #6
 80029d6:	2152      	movs	r1, #82	; 0x52
 80029d8:	8812      	ldrh	r2, [r2, #0]
 80029da:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	015b      	lsls	r3, r3, #5
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d108      	bne.n	80029fa <HAL_UART_Transmit+0xaa>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	e003      	b.n	8002a02 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2274      	movs	r2, #116	; 0x74
 8002a06:	2100      	movs	r1, #0
 8002a08:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002a0a:	e02c      	b.n	8002a66 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	0013      	movs	r3, r2
 8002a16:	2200      	movs	r2, #0
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	f000 ff9d 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 8002a1e:	1e03      	subs	r3, r0, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e038      	b.n	8002a98 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	001a      	movs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	05d2      	lsls	r2, r2, #23
 8002a38:	0dd2      	lsrs	r2, r2, #23
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	3302      	adds	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	e007      	b.n	8002a54 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	781a      	ldrb	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2252      	movs	r2, #82	; 0x52
 8002a58:	5a9b      	ldrh	r3, [r3, r2]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b299      	uxth	r1, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2252      	movs	r2, #82	; 0x52
 8002a64:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2252      	movs	r2, #82	; 0x52
 8002a6a:	5a9b      	ldrh	r3, [r3, r2]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1cc      	bne.n	8002a0c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	0013      	movs	r3, r2
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2140      	movs	r1, #64	; 0x40
 8002a80:	f000 ff6a 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 8002a84:	1e03      	subs	r3, r0, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e005      	b.n	8002a98 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e000      	b.n	8002a98 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
  }
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b008      	add	sp, #32
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	1dbb      	adds	r3, r7, #6
 8002aae:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d000      	beq.n	8002aba <HAL_UART_Receive+0x1a>
 8002ab8:	e0d9      	b.n	8002c6e <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_UART_Receive+0x28>
 8002ac0:	1dbb      	adds	r3, r7, #6
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0d1      	b.n	8002c70 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	015b      	lsls	r3, r3, #5
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d109      	bne.n	8002aec <HAL_UART_Receive+0x4c>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d001      	beq.n	8002aec <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0c1      	b.n	8002c70 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2274      	movs	r2, #116	; 0x74
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_UART_Receive+0x5a>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e0ba      	b.n	8002c70 <HAL_UART_Receive+0x1d0>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2274      	movs	r2, #116	; 0x74
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	2100      	movs	r1, #0
 8002b08:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2222      	movs	r2, #34	; 0x22
 8002b0e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b16:	f7fe fcdb 	bl	80014d0 <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1dba      	adds	r2, r7, #6
 8002b22:	2158      	movs	r1, #88	; 0x58
 8002b24:	8812      	ldrh	r2, [r2, #0]
 8002b26:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1dba      	adds	r2, r7, #6
 8002b2c:	215a      	movs	r1, #90	; 0x5a
 8002b2e:	8812      	ldrh	r2, [r2, #0]
 8002b30:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	015b      	lsls	r3, r3, #5
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d10d      	bne.n	8002b5a <HAL_UART_Receive+0xba>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d104      	bne.n	8002b50 <HAL_UART_Receive+0xb0>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	225c      	movs	r2, #92	; 0x5c
 8002b4a:	494b      	ldr	r1, [pc, #300]	; (8002c78 <HAL_UART_Receive+0x1d8>)
 8002b4c:	5299      	strh	r1, [r3, r2]
 8002b4e:	e02e      	b.n	8002bae <HAL_UART_Receive+0x10e>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	225c      	movs	r2, #92	; 0x5c
 8002b54:	21ff      	movs	r1, #255	; 0xff
 8002b56:	5299      	strh	r1, [r3, r2]
 8002b58:	e029      	b.n	8002bae <HAL_UART_Receive+0x10e>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10d      	bne.n	8002b7e <HAL_UART_Receive+0xde>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d104      	bne.n	8002b74 <HAL_UART_Receive+0xd4>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	225c      	movs	r2, #92	; 0x5c
 8002b6e:	21ff      	movs	r1, #255	; 0xff
 8002b70:	5299      	strh	r1, [r3, r2]
 8002b72:	e01c      	b.n	8002bae <HAL_UART_Receive+0x10e>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	225c      	movs	r2, #92	; 0x5c
 8002b78:	217f      	movs	r1, #127	; 0x7f
 8002b7a:	5299      	strh	r1, [r3, r2]
 8002b7c:	e017      	b.n	8002bae <HAL_UART_Receive+0x10e>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	055b      	lsls	r3, r3, #21
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d10d      	bne.n	8002ba6 <HAL_UART_Receive+0x106>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d104      	bne.n	8002b9c <HAL_UART_Receive+0xfc>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	225c      	movs	r2, #92	; 0x5c
 8002b96:	217f      	movs	r1, #127	; 0x7f
 8002b98:	5299      	strh	r1, [r3, r2]
 8002b9a:	e008      	b.n	8002bae <HAL_UART_Receive+0x10e>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	225c      	movs	r2, #92	; 0x5c
 8002ba0:	213f      	movs	r1, #63	; 0x3f
 8002ba2:	5299      	strh	r1, [r3, r2]
 8002ba4:	e003      	b.n	8002bae <HAL_UART_Receive+0x10e>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	225c      	movs	r2, #92	; 0x5c
 8002baa:	2100      	movs	r1, #0
 8002bac:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002bae:	2312      	movs	r3, #18
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	215c      	movs	r1, #92	; 0x5c
 8002bb6:	5a52      	ldrh	r2, [r2, r1]
 8002bb8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	015b      	lsls	r3, r3, #5
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d108      	bne.n	8002bd8 <HAL_UART_Receive+0x138>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d104      	bne.n	8002bd8 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	e003      	b.n	8002be0 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2274      	movs	r2, #116	; 0x74
 8002be4:	2100      	movs	r1, #0
 8002be6:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002be8:	e036      	b.n	8002c58 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	0013      	movs	r3, r2
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2120      	movs	r1, #32
 8002bf8:	f000 feae 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 8002bfc:	1e03      	subs	r3, r0, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e035      	b.n	8002c70 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10e      	bne.n	8002c28 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2212      	movs	r2, #18
 8002c14:	18ba      	adds	r2, r7, r2
 8002c16:	8812      	ldrh	r2, [r2, #0]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	3302      	adds	r3, #2
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e00e      	b.n	8002c46 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2212      	movs	r2, #18
 8002c32:	18ba      	adds	r2, r7, r2
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	3301      	adds	r3, #1
 8002c44:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	225a      	movs	r2, #90	; 0x5a
 8002c4a:	5a9b      	ldrh	r3, [r3, r2]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b299      	uxth	r1, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	225a      	movs	r2, #90	; 0x5a
 8002c56:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	225a      	movs	r2, #90	; 0x5a
 8002c5c:	5a9b      	ldrh	r3, [r3, r2]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1c2      	bne.n	8002bea <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e000      	b.n	8002c70 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
  }
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b008      	add	sp, #32
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	000001ff 	.word	0x000001ff

08002c7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b0ab      	sub	sp, #172	; 0xac
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	22a4      	movs	r2, #164	; 0xa4
 8002c8c:	18b9      	adds	r1, r7, r2
 8002c8e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	20a0      	movs	r0, #160	; 0xa0
 8002c98:	1839      	adds	r1, r7, r0
 8002c9a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	219c      	movs	r1, #156	; 0x9c
 8002ca4:	1879      	adds	r1, r7, r1
 8002ca6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ca8:	0011      	movs	r1, r2
 8002caa:	18bb      	adds	r3, r7, r2
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a99      	ldr	r2, [pc, #612]	; (8002f14 <HAL_UART_IRQHandler+0x298>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2298      	movs	r2, #152	; 0x98
 8002cb4:	18bc      	adds	r4, r7, r2
 8002cb6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002cb8:	18bb      	adds	r3, r7, r2
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d114      	bne.n	8002cea <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d00f      	beq.n	8002cea <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cca:	183b      	adds	r3, r7, r0
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d00a      	beq.n	8002cea <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d100      	bne.n	8002cde <HAL_UART_IRQHandler+0x62>
 8002cdc:	e298      	b.n	8003210 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	0010      	movs	r0, r2
 8002ce6:	4798      	blx	r3
      }
      return;
 8002ce8:	e292      	b.n	8003210 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cea:	2398      	movs	r3, #152	; 0x98
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d100      	bne.n	8002cf6 <HAL_UART_IRQHandler+0x7a>
 8002cf4:	e114      	b.n	8002f20 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cf6:	239c      	movs	r3, #156	; 0x9c
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d106      	bne.n	8002d10 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d02:	23a0      	movs	r3, #160	; 0xa0
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a83      	ldr	r2, [pc, #524]	; (8002f18 <HAL_UART_IRQHandler+0x29c>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d100      	bne.n	8002d10 <HAL_UART_IRQHandler+0x94>
 8002d0e:	e107      	b.n	8002f20 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d10:	23a4      	movs	r3, #164	; 0xa4
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2201      	movs	r2, #1
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d012      	beq.n	8002d42 <HAL_UART_IRQHandler+0xc6>
 8002d1c:	23a0      	movs	r3, #160	; 0xa0
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4013      	ands	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2280      	movs	r2, #128	; 0x80
 8002d36:	589b      	ldr	r3, [r3, r2]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d42:	23a4      	movs	r3, #164	; 0xa4
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d011      	beq.n	8002d72 <HAL_UART_IRQHandler+0xf6>
 8002d4e:	239c      	movs	r3, #156	; 0x9c
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2201      	movs	r2, #1
 8002d56:	4013      	ands	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2280      	movs	r2, #128	; 0x80
 8002d66:	589b      	ldr	r3, [r3, r2]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d72:	23a4      	movs	r3, #164	; 0xa4
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2204      	movs	r2, #4
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d011      	beq.n	8002da2 <HAL_UART_IRQHandler+0x126>
 8002d7e:	239c      	movs	r3, #156	; 0x9c
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2201      	movs	r2, #1
 8002d86:	4013      	ands	r3, r2
 8002d88:	d00b      	beq.n	8002da2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2204      	movs	r2, #4
 8002d90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	589b      	ldr	r3, [r3, r2]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2180      	movs	r1, #128	; 0x80
 8002da0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002da2:	23a4      	movs	r3, #164	; 0xa4
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2208      	movs	r2, #8
 8002daa:	4013      	ands	r3, r2
 8002dac:	d017      	beq.n	8002dde <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002dae:	23a0      	movs	r3, #160	; 0xa0
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2220      	movs	r2, #32
 8002db6:	4013      	ands	r3, r2
 8002db8:	d105      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002dba:	239c      	movs	r3, #156	; 0x9c
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002dc4:	d00b      	beq.n	8002dde <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2208      	movs	r2, #8
 8002dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	589b      	ldr	r3, [r3, r2]
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002dde:	23a4      	movs	r3, #164	; 0xa4
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4013      	ands	r3, r2
 8002dea:	d013      	beq.n	8002e14 <HAL_UART_IRQHandler+0x198>
 8002dec:	23a0      	movs	r3, #160	; 0xa0
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	04db      	lsls	r3, r3, #19
 8002df6:	4013      	ands	r3, r2
 8002df8:	d00c      	beq.n	8002e14 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	0112      	lsls	r2, r2, #4
 8002e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2280      	movs	r2, #128	; 0x80
 8002e08:	589b      	ldr	r3, [r3, r2]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	589b      	ldr	r3, [r3, r2]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d100      	bne.n	8002e20 <HAL_UART_IRQHandler+0x1a4>
 8002e1e:	e1f9      	b.n	8003214 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e20:	23a4      	movs	r3, #164	; 0xa4
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2220      	movs	r2, #32
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d00e      	beq.n	8002e4a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e2c:	23a0      	movs	r3, #160	; 0xa0
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2220      	movs	r2, #32
 8002e34:	4013      	ands	r3, r2
 8002e36:	d008      	beq.n	8002e4a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d004      	beq.n	8002e4a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	0010      	movs	r0, r2
 8002e48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2280      	movs	r2, #128	; 0x80
 8002e4e:	589b      	ldr	r3, [r3, r2]
 8002e50:	2194      	movs	r1, #148	; 0x94
 8002e52:	187a      	adds	r2, r7, r1
 8002e54:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2240      	movs	r2, #64	; 0x40
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b40      	cmp	r3, #64	; 0x40
 8002e62:	d004      	beq.n	8002e6e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2228      	movs	r2, #40	; 0x28
 8002e6a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e6c:	d047      	beq.n	8002efe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f000 fe35 	bl	8003ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2240      	movs	r2, #64	; 0x40
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b40      	cmp	r3, #64	; 0x40
 8002e82:	d137      	bne.n	8002ef4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e84:	f3ef 8310 	mrs	r3, PRIMASK
 8002e88:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8c:	2090      	movs	r0, #144	; 0x90
 8002e8e:	183a      	adds	r2, r7, r0
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	2301      	movs	r3, #1
 8002e94:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e98:	f383 8810 	msr	PRIMASK, r3
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2140      	movs	r1, #64	; 0x40
 8002eaa:	438a      	bics	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	183b      	adds	r3, r7, r0
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eb6:	f383 8810 	msr	PRIMASK, r3
}
 8002eba:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d012      	beq.n	8002eea <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <HAL_UART_IRQHandler+0x2a0>)
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7fe fc49 	bl	8001768 <HAL_DMA_Abort_IT>
 8002ed6:	1e03      	subs	r3, r0, #0
 8002ed8:	d01a      	beq.n	8002f10 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee8:	e012      	b.n	8002f10 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7fd faed 	bl	80004cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef2:	e00d      	b.n	8002f10 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f7fd fae8 	bl	80004cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efc:	e008      	b.n	8002f10 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7fd fae3 	bl	80004cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002f0e:	e181      	b.n	8003214 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f10:	46c0      	nop			; (mov r8, r8)
    return;
 8002f12:	e17f      	b.n	8003214 <HAL_UART_IRQHandler+0x598>
 8002f14:	0000080f 	.word	0x0000080f
 8002f18:	04000120 	.word	0x04000120
 8002f1c:	08003ba5 	.word	0x08003ba5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d000      	beq.n	8002f2a <HAL_UART_IRQHandler+0x2ae>
 8002f28:	e133      	b.n	8003192 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f2a:	23a4      	movs	r3, #164	; 0xa4
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2210      	movs	r2, #16
 8002f32:	4013      	ands	r3, r2
 8002f34:	d100      	bne.n	8002f38 <HAL_UART_IRQHandler+0x2bc>
 8002f36:	e12c      	b.n	8003192 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f38:	23a0      	movs	r3, #160	; 0xa0
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2210      	movs	r2, #16
 8002f40:	4013      	ands	r3, r2
 8002f42:	d100      	bne.n	8002f46 <HAL_UART_IRQHandler+0x2ca>
 8002f44:	e125      	b.n	8003192 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2240      	movs	r2, #64	; 0x40
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d000      	beq.n	8002f5e <HAL_UART_IRQHandler+0x2e2>
 8002f5c:	e09d      	b.n	800309a <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	217e      	movs	r1, #126	; 0x7e
 8002f68:	187b      	adds	r3, r7, r1
 8002f6a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d100      	bne.n	8002f76 <HAL_UART_IRQHandler+0x2fa>
 8002f74:	e150      	b.n	8003218 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2258      	movs	r2, #88	; 0x58
 8002f7a:	5a9b      	ldrh	r3, [r3, r2]
 8002f7c:	187a      	adds	r2, r7, r1
 8002f7e:	8812      	ldrh	r2, [r2, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d300      	bcc.n	8002f86 <HAL_UART_IRQHandler+0x30a>
 8002f84:	e148      	b.n	8003218 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	187a      	adds	r2, r7, r1
 8002f8a:	215a      	movs	r1, #90	; 0x5a
 8002f8c:	8812      	ldrh	r2, [r2, #0]
 8002f8e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d16e      	bne.n	800307c <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fa8:	2301      	movs	r3, #1
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	f383 8810 	msr	PRIMASK, r3
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	499a      	ldr	r1, [pc, #616]	; (8003228 <HAL_UART_IRQHandler+0x5ac>)
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	f383 8810 	msr	PRIMASK, r3
}
 8002fce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd8:	677b      	str	r3, [r7, #116]	; 0x74
 8002fda:	2301      	movs	r3, #1
 8002fdc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe0:	f383 8810 	msr	PRIMASK, r3
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	438a      	bics	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
 8002ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffc:	f383 8810 	msr	PRIMASK, r3
}
 8003000:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003002:	f3ef 8310 	mrs	r3, PRIMASK
 8003006:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003008:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800300a:	673b      	str	r3, [r7, #112]	; 0x70
 800300c:	2301      	movs	r3, #1
 800300e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003012:	f383 8810 	msr	PRIMASK, r3
}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2140      	movs	r1, #64	; 0x40
 8003024:	438a      	bics	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800302a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302e:	f383 8810 	msr	PRIMASK, r3
}
 8003032:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003040:	f3ef 8310 	mrs	r3, PRIMASK
 8003044:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003046:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003048:	66fb      	str	r3, [r7, #108]	; 0x6c
 800304a:	2301      	movs	r3, #1
 800304c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003050:	f383 8810 	msr	PRIMASK, r3
}
 8003054:	46c0      	nop			; (mov r8, r8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2110      	movs	r1, #16
 8003062:	438a      	bics	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003068:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800306c:	f383 8810 	msr	PRIMASK, r3
}
 8003070:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	0018      	movs	r0, r3
 8003078:	f7fe fb36 	bl	80016e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2258      	movs	r2, #88	; 0x58
 8003080:	5a9a      	ldrh	r2, [r3, r2]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	215a      	movs	r1, #90	; 0x5a
 8003086:	5a5b      	ldrh	r3, [r3, r1]
 8003088:	b29b      	uxth	r3, r3
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	b29a      	uxth	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0011      	movs	r1, r2
 8003092:	0018      	movs	r0, r3
 8003094:	f000 f8d4 	bl	8003240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003098:	e0be      	b.n	8003218 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2258      	movs	r2, #88	; 0x58
 800309e:	5a99      	ldrh	r1, [r3, r2]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	225a      	movs	r2, #90	; 0x5a
 80030a4:	5a9b      	ldrh	r3, [r3, r2]
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	208e      	movs	r0, #142	; 0x8e
 80030aa:	183b      	adds	r3, r7, r0
 80030ac:	1a8a      	subs	r2, r1, r2
 80030ae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	225a      	movs	r2, #90	; 0x5a
 80030b4:	5a9b      	ldrh	r3, [r3, r2]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d100      	bne.n	80030be <HAL_UART_IRQHandler+0x442>
 80030bc:	e0ae      	b.n	800321c <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 80030be:	183b      	adds	r3, r7, r0
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d100      	bne.n	80030c8 <HAL_UART_IRQHandler+0x44c>
 80030c6:	e0a9      	b.n	800321c <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c8:	f3ef 8310 	mrs	r3, PRIMASK
 80030cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80030ce:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030d0:	2488      	movs	r4, #136	; 0x88
 80030d2:	193a      	adds	r2, r7, r4
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	2301      	movs	r3, #1
 80030d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f383 8810 	msr	PRIMASK, r3
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	494f      	ldr	r1, [pc, #316]	; (800322c <HAL_UART_IRQHandler+0x5b0>)
 80030ee:	400a      	ands	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	193b      	adds	r3, r7, r4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f383 8810 	msr	PRIMASK, r3
}
 80030fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003100:	f3ef 8310 	mrs	r3, PRIMASK
 8003104:	61bb      	str	r3, [r7, #24]
  return(result);
 8003106:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003108:	2484      	movs	r4, #132	; 0x84
 800310a:	193a      	adds	r2, r7, r4
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	2301      	movs	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f383 8810 	msr	PRIMASK, r3
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2101      	movs	r1, #1
 8003126:	438a      	bics	r2, r1
 8003128:	609a      	str	r2, [r3, #8]
 800312a:	193b      	adds	r3, r7, r4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	f383 8810 	msr	PRIMASK, r3
}
 8003136:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314a:	f3ef 8310 	mrs	r3, PRIMASK
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003152:	2480      	movs	r4, #128	; 0x80
 8003154:	193a      	adds	r2, r7, r4
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	2301      	movs	r3, #1
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	f383 8810 	msr	PRIMASK, r3
}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2110      	movs	r1, #16
 8003170:	438a      	bics	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	193b      	adds	r3, r7, r4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	f383 8810 	msr	PRIMASK, r3
}
 8003180:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003182:	183b      	adds	r3, r7, r0
 8003184:	881a      	ldrh	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0011      	movs	r1, r2
 800318a:	0018      	movs	r0, r3
 800318c:	f000 f858 	bl	8003240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003190:	e044      	b.n	800321c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003192:	23a4      	movs	r3, #164	; 0xa4
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	035b      	lsls	r3, r3, #13
 800319c:	4013      	ands	r3, r2
 800319e:	d010      	beq.n	80031c2 <HAL_UART_IRQHandler+0x546>
 80031a0:	239c      	movs	r3, #156	; 0x9c
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	03db      	lsls	r3, r3, #15
 80031aa:	4013      	ands	r3, r2
 80031ac:	d009      	beq.n	80031c2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	0352      	lsls	r2, r2, #13
 80031b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	0018      	movs	r0, r3
 80031bc:	f000 fd34 	bl	8003c28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031c0:	e02f      	b.n	8003222 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80031c2:	23a4      	movs	r3, #164	; 0xa4
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	4013      	ands	r3, r2
 80031cc:	d00f      	beq.n	80031ee <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80031ce:	23a0      	movs	r3, #160	; 0xa0
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2280      	movs	r2, #128	; 0x80
 80031d6:	4013      	ands	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01e      	beq.n	8003220 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	0010      	movs	r0, r2
 80031ea:	4798      	blx	r3
    }
    return;
 80031ec:	e018      	b.n	8003220 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031ee:	23a4      	movs	r3, #164	; 0xa4
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2240      	movs	r2, #64	; 0x40
 80031f6:	4013      	ands	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_UART_IRQHandler+0x5a6>
 80031fa:	23a0      	movs	r3, #160	; 0xa0
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2240      	movs	r2, #64	; 0x40
 8003202:	4013      	ands	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	0018      	movs	r0, r3
 800320a:	f000 fce2 	bl	8003bd2 <UART_EndTransmit_IT>
    return;
 800320e:	e008      	b.n	8003222 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	e006      	b.n	8003222 <HAL_UART_IRQHandler+0x5a6>
    return;
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	e004      	b.n	8003222 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	e002      	b.n	8003222 <HAL_UART_IRQHandler+0x5a6>
      return;
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	e000      	b.n	8003222 <HAL_UART_IRQHandler+0x5a6>
    return;
 8003220:	46c0      	nop			; (mov r8, r8)
  }

}
 8003222:	46bd      	mov	sp, r7
 8003224:	b02b      	add	sp, #172	; 0xac
 8003226:	bd90      	pop	{r4, r7, pc}
 8003228:	fffffeff 	.word	0xfffffeff
 800322c:	fffffedf 	.word	0xfffffedf

08003230 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	000a      	movs	r2, r1
 800324a:	1cbb      	adds	r3, r7, #2
 800324c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b002      	add	sp, #8
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b08e      	sub	sp, #56	; 0x38
 800325c:	af00      	add	r7, sp, #0
 800325e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003260:	231a      	movs	r3, #26
 8003262:	2218      	movs	r2, #24
 8003264:	189b      	adds	r3, r3, r2
 8003266:	19db      	adds	r3, r3, r7
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	431a      	orrs	r2, r3
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	431a      	orrs	r2, r3
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	4313      	orrs	r3, r2
 8003282:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4ac6      	ldr	r2, [pc, #792]	; (80035a4 <UART_SetConfig+0x34c>)
 800328c:	4013      	ands	r3, r2
 800328e:	0019      	movs	r1, r3
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4ac1      	ldr	r2, [pc, #772]	; (80035a8 <UART_SetConfig+0x350>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	0019      	movs	r1, r3
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4abb      	ldr	r2, [pc, #748]	; (80035ac <UART_SetConfig+0x354>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c8:	4313      	orrs	r3, r2
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	4ab7      	ldr	r2, [pc, #732]	; (80035b0 <UART_SetConfig+0x358>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032de:	430a      	orrs	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4ab3      	ldr	r2, [pc, #716]	; (80035b4 <UART_SetConfig+0x35c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d131      	bne.n	8003350 <UART_SetConfig+0xf8>
 80032ec:	4bb2      	ldr	r3, [pc, #712]	; (80035b8 <UART_SetConfig+0x360>)
 80032ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f0:	2203      	movs	r2, #3
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d01d      	beq.n	8003334 <UART_SetConfig+0xdc>
 80032f8:	d823      	bhi.n	8003342 <UART_SetConfig+0xea>
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d00c      	beq.n	8003318 <UART_SetConfig+0xc0>
 80032fe:	d820      	bhi.n	8003342 <UART_SetConfig+0xea>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <UART_SetConfig+0xb2>
 8003304:	2b01      	cmp	r3, #1
 8003306:	d00e      	beq.n	8003326 <UART_SetConfig+0xce>
 8003308:	e01b      	b.n	8003342 <UART_SetConfig+0xea>
 800330a:	231b      	movs	r3, #27
 800330c:	2218      	movs	r2, #24
 800330e:	189b      	adds	r3, r3, r2
 8003310:	19db      	adds	r3, r3, r7
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e09c      	b.n	8003452 <UART_SetConfig+0x1fa>
 8003318:	231b      	movs	r3, #27
 800331a:	2218      	movs	r2, #24
 800331c:	189b      	adds	r3, r3, r2
 800331e:	19db      	adds	r3, r3, r7
 8003320:	2202      	movs	r2, #2
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e095      	b.n	8003452 <UART_SetConfig+0x1fa>
 8003326:	231b      	movs	r3, #27
 8003328:	2218      	movs	r2, #24
 800332a:	189b      	adds	r3, r3, r2
 800332c:	19db      	adds	r3, r3, r7
 800332e:	2204      	movs	r2, #4
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e08e      	b.n	8003452 <UART_SetConfig+0x1fa>
 8003334:	231b      	movs	r3, #27
 8003336:	2218      	movs	r2, #24
 8003338:	189b      	adds	r3, r3, r2
 800333a:	19db      	adds	r3, r3, r7
 800333c:	2208      	movs	r2, #8
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	e087      	b.n	8003452 <UART_SetConfig+0x1fa>
 8003342:	231b      	movs	r3, #27
 8003344:	2218      	movs	r2, #24
 8003346:	189b      	adds	r3, r3, r2
 8003348:	19db      	adds	r3, r3, r7
 800334a:	2210      	movs	r2, #16
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e080      	b.n	8003452 <UART_SetConfig+0x1fa>
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a99      	ldr	r2, [pc, #612]	; (80035bc <UART_SetConfig+0x364>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d131      	bne.n	80033be <UART_SetConfig+0x166>
 800335a:	4b97      	ldr	r3, [pc, #604]	; (80035b8 <UART_SetConfig+0x360>)
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	220c      	movs	r2, #12
 8003360:	4013      	ands	r3, r2
 8003362:	2b0c      	cmp	r3, #12
 8003364:	d01d      	beq.n	80033a2 <UART_SetConfig+0x14a>
 8003366:	d823      	bhi.n	80033b0 <UART_SetConfig+0x158>
 8003368:	2b08      	cmp	r3, #8
 800336a:	d00c      	beq.n	8003386 <UART_SetConfig+0x12e>
 800336c:	d820      	bhi.n	80033b0 <UART_SetConfig+0x158>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <UART_SetConfig+0x120>
 8003372:	2b04      	cmp	r3, #4
 8003374:	d00e      	beq.n	8003394 <UART_SetConfig+0x13c>
 8003376:	e01b      	b.n	80033b0 <UART_SetConfig+0x158>
 8003378:	231b      	movs	r3, #27
 800337a:	2218      	movs	r2, #24
 800337c:	189b      	adds	r3, r3, r2
 800337e:	19db      	adds	r3, r3, r7
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e065      	b.n	8003452 <UART_SetConfig+0x1fa>
 8003386:	231b      	movs	r3, #27
 8003388:	2218      	movs	r2, #24
 800338a:	189b      	adds	r3, r3, r2
 800338c:	19db      	adds	r3, r3, r7
 800338e:	2202      	movs	r2, #2
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e05e      	b.n	8003452 <UART_SetConfig+0x1fa>
 8003394:	231b      	movs	r3, #27
 8003396:	2218      	movs	r2, #24
 8003398:	189b      	adds	r3, r3, r2
 800339a:	19db      	adds	r3, r3, r7
 800339c:	2204      	movs	r2, #4
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e057      	b.n	8003452 <UART_SetConfig+0x1fa>
 80033a2:	231b      	movs	r3, #27
 80033a4:	2218      	movs	r2, #24
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	19db      	adds	r3, r3, r7
 80033aa:	2208      	movs	r2, #8
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e050      	b.n	8003452 <UART_SetConfig+0x1fa>
 80033b0:	231b      	movs	r3, #27
 80033b2:	2218      	movs	r2, #24
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	19db      	adds	r3, r3, r7
 80033b8:	2210      	movs	r2, #16
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e049      	b.n	8003452 <UART_SetConfig+0x1fa>
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a7a      	ldr	r2, [pc, #488]	; (80035ac <UART_SetConfig+0x354>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d13e      	bne.n	8003446 <UART_SetConfig+0x1ee>
 80033c8:	4b7b      	ldr	r3, [pc, #492]	; (80035b8 <UART_SetConfig+0x360>)
 80033ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033cc:	23c0      	movs	r3, #192	; 0xc0
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	4013      	ands	r3, r2
 80033d2:	22c0      	movs	r2, #192	; 0xc0
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d027      	beq.n	800342a <UART_SetConfig+0x1d2>
 80033da:	22c0      	movs	r2, #192	; 0xc0
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	4293      	cmp	r3, r2
 80033e0:	d82a      	bhi.n	8003438 <UART_SetConfig+0x1e0>
 80033e2:	2280      	movs	r2, #128	; 0x80
 80033e4:	0112      	lsls	r2, r2, #4
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d011      	beq.n	800340e <UART_SetConfig+0x1b6>
 80033ea:	2280      	movs	r2, #128	; 0x80
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d822      	bhi.n	8003438 <UART_SetConfig+0x1e0>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d004      	beq.n	8003400 <UART_SetConfig+0x1a8>
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	00d2      	lsls	r2, r2, #3
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00e      	beq.n	800341c <UART_SetConfig+0x1c4>
 80033fe:	e01b      	b.n	8003438 <UART_SetConfig+0x1e0>
 8003400:	231b      	movs	r3, #27
 8003402:	2218      	movs	r2, #24
 8003404:	189b      	adds	r3, r3, r2
 8003406:	19db      	adds	r3, r3, r7
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	e021      	b.n	8003452 <UART_SetConfig+0x1fa>
 800340e:	231b      	movs	r3, #27
 8003410:	2218      	movs	r2, #24
 8003412:	189b      	adds	r3, r3, r2
 8003414:	19db      	adds	r3, r3, r7
 8003416:	2202      	movs	r2, #2
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	e01a      	b.n	8003452 <UART_SetConfig+0x1fa>
 800341c:	231b      	movs	r3, #27
 800341e:	2218      	movs	r2, #24
 8003420:	189b      	adds	r3, r3, r2
 8003422:	19db      	adds	r3, r3, r7
 8003424:	2204      	movs	r2, #4
 8003426:	701a      	strb	r2, [r3, #0]
 8003428:	e013      	b.n	8003452 <UART_SetConfig+0x1fa>
 800342a:	231b      	movs	r3, #27
 800342c:	2218      	movs	r2, #24
 800342e:	189b      	adds	r3, r3, r2
 8003430:	19db      	adds	r3, r3, r7
 8003432:	2208      	movs	r2, #8
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	e00c      	b.n	8003452 <UART_SetConfig+0x1fa>
 8003438:	231b      	movs	r3, #27
 800343a:	2218      	movs	r2, #24
 800343c:	189b      	adds	r3, r3, r2
 800343e:	19db      	adds	r3, r3, r7
 8003440:	2210      	movs	r2, #16
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	e005      	b.n	8003452 <UART_SetConfig+0x1fa>
 8003446:	231b      	movs	r3, #27
 8003448:	2218      	movs	r2, #24
 800344a:	189b      	adds	r3, r3, r2
 800344c:	19db      	adds	r3, r3, r7
 800344e:	2210      	movs	r2, #16
 8003450:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a55      	ldr	r2, [pc, #340]	; (80035ac <UART_SetConfig+0x354>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d000      	beq.n	800345e <UART_SetConfig+0x206>
 800345c:	e084      	b.n	8003568 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800345e:	231b      	movs	r3, #27
 8003460:	2218      	movs	r2, #24
 8003462:	189b      	adds	r3, r3, r2
 8003464:	19db      	adds	r3, r3, r7
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d01d      	beq.n	80034a8 <UART_SetConfig+0x250>
 800346c:	dc20      	bgt.n	80034b0 <UART_SetConfig+0x258>
 800346e:	2b04      	cmp	r3, #4
 8003470:	d015      	beq.n	800349e <UART_SetConfig+0x246>
 8003472:	dc1d      	bgt.n	80034b0 <UART_SetConfig+0x258>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <UART_SetConfig+0x226>
 8003478:	2b02      	cmp	r3, #2
 800347a:	d005      	beq.n	8003488 <UART_SetConfig+0x230>
 800347c:	e018      	b.n	80034b0 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800347e:	f7ff f8b1 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 8003482:	0003      	movs	r3, r0
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003486:	e01c      	b.n	80034c2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003488:	4b4b      	ldr	r3, [pc, #300]	; (80035b8 <UART_SetConfig+0x360>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2210      	movs	r2, #16
 800348e:	4013      	ands	r3, r2
 8003490:	d002      	beq.n	8003498 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003492:	4b4b      	ldr	r3, [pc, #300]	; (80035c0 <UART_SetConfig+0x368>)
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003496:	e014      	b.n	80034c2 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003498:	4b4a      	ldr	r3, [pc, #296]	; (80035c4 <UART_SetConfig+0x36c>)
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800349c:	e011      	b.n	80034c2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349e:	f7fe fff1 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 80034a2:	0003      	movs	r3, r0
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034a6:	e00c      	b.n	80034c2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034ae:	e008      	b.n	80034c2 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80034b4:	231a      	movs	r3, #26
 80034b6:	2218      	movs	r2, #24
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	19db      	adds	r3, r3, r7
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
        break;
 80034c0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d100      	bne.n	80034ca <UART_SetConfig+0x272>
 80034c8:	e133      	b.n	8003732 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	0013      	movs	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d305      	bcc.n	80034e6 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d906      	bls.n	80034f4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80034e6:	231a      	movs	r3, #26
 80034e8:	2218      	movs	r2, #24
 80034ea:	189b      	adds	r3, r3, r2
 80034ec:	19db      	adds	r3, r3, r7
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e11e      	b.n	8003732 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	6939      	ldr	r1, [r7, #16]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	000b      	movs	r3, r1
 8003502:	0e1b      	lsrs	r3, r3, #24
 8003504:	0010      	movs	r0, r2
 8003506:	0205      	lsls	r5, r0, #8
 8003508:	431d      	orrs	r5, r3
 800350a:	000b      	movs	r3, r1
 800350c:	021c      	lsls	r4, r3, #8
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68b8      	ldr	r0, [r7, #8]
 800351c:	68f9      	ldr	r1, [r7, #12]
 800351e:	1900      	adds	r0, r0, r4
 8003520:	4169      	adcs	r1, r5
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	2300      	movs	r3, #0
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f7fc fe88 	bl	8000244 <__aeabi_uldivmod>
 8003534:	0002      	movs	r2, r0
 8003536:	000b      	movs	r3, r1
 8003538:	0013      	movs	r3, r2
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800353c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800353e:	23c0      	movs	r3, #192	; 0xc0
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	429a      	cmp	r2, r3
 8003544:	d309      	bcc.n	800355a <UART_SetConfig+0x302>
 8003546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	035b      	lsls	r3, r3, #13
 800354c:	429a      	cmp	r2, r3
 800354e:	d204      	bcs.n	800355a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003556:	60da      	str	r2, [r3, #12]
 8003558:	e0eb      	b.n	8003732 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 800355a:	231a      	movs	r3, #26
 800355c:	2218      	movs	r2, #24
 800355e:	189b      	adds	r3, r3, r2
 8003560:	19db      	adds	r3, r3, r7
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e0e4      	b.n	8003732 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	429a      	cmp	r2, r3
 8003572:	d000      	beq.n	8003576 <UART_SetConfig+0x31e>
 8003574:	e086      	b.n	8003684 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8003576:	231b      	movs	r3, #27
 8003578:	2218      	movs	r2, #24
 800357a:	189b      	adds	r3, r3, r2
 800357c:	19db      	adds	r3, r3, r7
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d837      	bhi.n	80035f4 <UART_SetConfig+0x39c>
 8003584:	009a      	lsls	r2, r3, #2
 8003586:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <UART_SetConfig+0x370>)
 8003588:	18d3      	adds	r3, r2, r3
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800358e:	f7ff f829 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 8003592:	0003      	movs	r3, r0
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003596:	e036      	b.n	8003606 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003598:	f7ff f83a 	bl	8002610 <HAL_RCC_GetPCLK2Freq>
 800359c:	0003      	movs	r3, r0
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035a0:	e031      	b.n	8003606 <UART_SetConfig+0x3ae>
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	efff69f3 	.word	0xefff69f3
 80035a8:	ffffcfff 	.word	0xffffcfff
 80035ac:	40004800 	.word	0x40004800
 80035b0:	fffff4ff 	.word	0xfffff4ff
 80035b4:	40013800 	.word	0x40013800
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40004400 	.word	0x40004400
 80035c0:	003d0900 	.word	0x003d0900
 80035c4:	00f42400 	.word	0x00f42400
 80035c8:	0800523c 	.word	0x0800523c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035cc:	4b60      	ldr	r3, [pc, #384]	; (8003750 <UART_SetConfig+0x4f8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2210      	movs	r2, #16
 80035d2:	4013      	ands	r3, r2
 80035d4:	d002      	beq.n	80035dc <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035d6:	4b5f      	ldr	r3, [pc, #380]	; (8003754 <UART_SetConfig+0x4fc>)
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035da:	e014      	b.n	8003606 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80035dc:	4b5e      	ldr	r3, [pc, #376]	; (8003758 <UART_SetConfig+0x500>)
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035e0:	e011      	b.n	8003606 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e2:	f7fe ff4f 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 80035e6:	0003      	movs	r3, r0
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035ea:	e00c      	b.n	8003606 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035f2:	e008      	b.n	8003606 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80035f8:	231a      	movs	r3, #26
 80035fa:	2218      	movs	r2, #24
 80035fc:	189b      	adds	r3, r3, r2
 80035fe:	19db      	adds	r3, r3, r7
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
        break;
 8003604:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d100      	bne.n	800360e <UART_SetConfig+0x3b6>
 800360c:	e091      	b.n	8003732 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	005a      	lsls	r2, r3, #1
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	18d2      	adds	r2, r2, r3
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	0019      	movs	r1, r3
 8003620:	0010      	movs	r0, r2
 8003622:	f7fc fd83 	bl	800012c <__udivsi3>
 8003626:	0003      	movs	r3, r0
 8003628:	b29b      	uxth	r3, r3
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	2b0f      	cmp	r3, #15
 8003630:	d921      	bls.n	8003676 <UART_SetConfig+0x41e>
 8003632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	025b      	lsls	r3, r3, #9
 8003638:	429a      	cmp	r2, r3
 800363a:	d21c      	bcs.n	8003676 <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	b29a      	uxth	r2, r3
 8003640:	200e      	movs	r0, #14
 8003642:	2418      	movs	r4, #24
 8003644:	1903      	adds	r3, r0, r4
 8003646:	19db      	adds	r3, r3, r7
 8003648:	210f      	movs	r1, #15
 800364a:	438a      	bics	r2, r1
 800364c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	b29b      	uxth	r3, r3
 8003654:	2207      	movs	r2, #7
 8003656:	4013      	ands	r3, r2
 8003658:	b299      	uxth	r1, r3
 800365a:	1903      	adds	r3, r0, r4
 800365c:	19db      	adds	r3, r3, r7
 800365e:	1902      	adds	r2, r0, r4
 8003660:	19d2      	adds	r2, r2, r7
 8003662:	8812      	ldrh	r2, [r2, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	1902      	adds	r2, r0, r4
 800366e:	19d2      	adds	r2, r2, r7
 8003670:	8812      	ldrh	r2, [r2, #0]
 8003672:	60da      	str	r2, [r3, #12]
 8003674:	e05d      	b.n	8003732 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8003676:	231a      	movs	r3, #26
 8003678:	2218      	movs	r2, #24
 800367a:	189b      	adds	r3, r3, r2
 800367c:	19db      	adds	r3, r3, r7
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e056      	b.n	8003732 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003684:	231b      	movs	r3, #27
 8003686:	2218      	movs	r2, #24
 8003688:	189b      	adds	r3, r3, r2
 800368a:	19db      	adds	r3, r3, r7
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b08      	cmp	r3, #8
 8003690:	d822      	bhi.n	80036d8 <UART_SetConfig+0x480>
 8003692:	009a      	lsls	r2, r3, #2
 8003694:	4b31      	ldr	r3, [pc, #196]	; (800375c <UART_SetConfig+0x504>)
 8003696:	18d3      	adds	r3, r2, r3
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800369c:	f7fe ffa2 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 80036a0:	0003      	movs	r3, r0
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036a4:	e021      	b.n	80036ea <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a6:	f7fe ffb3 	bl	8002610 <HAL_RCC_GetPCLK2Freq>
 80036aa:	0003      	movs	r3, r0
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036ae:	e01c      	b.n	80036ea <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036b0:	4b27      	ldr	r3, [pc, #156]	; (8003750 <UART_SetConfig+0x4f8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2210      	movs	r2, #16
 80036b6:	4013      	ands	r3, r2
 80036b8:	d002      	beq.n	80036c0 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <UART_SetConfig+0x4fc>)
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80036be:	e014      	b.n	80036ea <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 80036c0:	4b25      	ldr	r3, [pc, #148]	; (8003758 <UART_SetConfig+0x500>)
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036c4:	e011      	b.n	80036ea <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036c6:	f7fe fedd 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 80036ca:	0003      	movs	r3, r0
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036ce:	e00c      	b.n	80036ea <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036d6:	e008      	b.n	80036ea <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80036dc:	231a      	movs	r3, #26
 80036de:	2218      	movs	r2, #24
 80036e0:	189b      	adds	r3, r3, r2
 80036e2:	19db      	adds	r3, r3, r7
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
        break;
 80036e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	085a      	lsrs	r2, r3, #1
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	18d2      	adds	r2, r2, r3
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	0019      	movs	r1, r3
 8003700:	0010      	movs	r0, r2
 8003702:	f7fc fd13 	bl	800012c <__udivsi3>
 8003706:	0003      	movs	r3, r0
 8003708:	b29b      	uxth	r3, r3
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	2b0f      	cmp	r3, #15
 8003710:	d909      	bls.n	8003726 <UART_SetConfig+0x4ce>
 8003712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	025b      	lsls	r3, r3, #9
 8003718:	429a      	cmp	r2, r3
 800371a:	d204      	bcs.n	8003726 <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003722:	60da      	str	r2, [r3, #12]
 8003724:	e005      	b.n	8003732 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8003726:	231a      	movs	r3, #26
 8003728:	2218      	movs	r2, #24
 800372a:	189b      	adds	r3, r3, r2
 800372c:	19db      	adds	r3, r3, r7
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2200      	movs	r2, #0
 8003736:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2200      	movs	r2, #0
 800373c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800373e:	231a      	movs	r3, #26
 8003740:	2218      	movs	r2, #24
 8003742:	189b      	adds	r3, r3, r2
 8003744:	19db      	adds	r3, r3, r7
 8003746:	781b      	ldrb	r3, [r3, #0]
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b00e      	add	sp, #56	; 0x38
 800374e:	bdb0      	pop	{r4, r5, r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	003d0900 	.word	0x003d0900
 8003758:	00f42400 	.word	0x00f42400
 800375c:	08005260 	.word	0x08005260

08003760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	2201      	movs	r2, #1
 800376e:	4013      	ands	r3, r2
 8003770:	d00b      	beq.n	800378a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4a4a      	ldr	r2, [pc, #296]	; (80038a4 <UART_AdvFeatureConfig+0x144>)
 800377a:	4013      	ands	r3, r2
 800377c:	0019      	movs	r1, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	2202      	movs	r2, #2
 8003790:	4013      	ands	r3, r2
 8003792:	d00b      	beq.n	80037ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4a43      	ldr	r2, [pc, #268]	; (80038a8 <UART_AdvFeatureConfig+0x148>)
 800379c:	4013      	ands	r3, r2
 800379e:	0019      	movs	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	2204      	movs	r2, #4
 80037b2:	4013      	ands	r3, r2
 80037b4:	d00b      	beq.n	80037ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a3b      	ldr	r2, [pc, #236]	; (80038ac <UART_AdvFeatureConfig+0x14c>)
 80037be:	4013      	ands	r3, r2
 80037c0:	0019      	movs	r1, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	2208      	movs	r2, #8
 80037d4:	4013      	ands	r3, r2
 80037d6:	d00b      	beq.n	80037f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4a34      	ldr	r2, [pc, #208]	; (80038b0 <UART_AdvFeatureConfig+0x150>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	0019      	movs	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	2210      	movs	r2, #16
 80037f6:	4013      	ands	r3, r2
 80037f8:	d00b      	beq.n	8003812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a2c      	ldr	r2, [pc, #176]	; (80038b4 <UART_AdvFeatureConfig+0x154>)
 8003802:	4013      	ands	r3, r2
 8003804:	0019      	movs	r1, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2220      	movs	r2, #32
 8003818:	4013      	ands	r3, r2
 800381a:	d00b      	beq.n	8003834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	4a25      	ldr	r2, [pc, #148]	; (80038b8 <UART_AdvFeatureConfig+0x158>)
 8003824:	4013      	ands	r3, r2
 8003826:	0019      	movs	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	2240      	movs	r2, #64	; 0x40
 800383a:	4013      	ands	r3, r2
 800383c:	d01d      	beq.n	800387a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <UART_AdvFeatureConfig+0x15c>)
 8003846:	4013      	ands	r3, r2
 8003848:	0019      	movs	r1, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	035b      	lsls	r3, r3, #13
 800385e:	429a      	cmp	r2, r3
 8003860:	d10b      	bne.n	800387a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <UART_AdvFeatureConfig+0x160>)
 800386a:	4013      	ands	r3, r2
 800386c:	0019      	movs	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	4013      	ands	r3, r2
 8003882:	d00b      	beq.n	800389c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4a0e      	ldr	r2, [pc, #56]	; (80038c4 <UART_AdvFeatureConfig+0x164>)
 800388c:	4013      	ands	r3, r2
 800388e:	0019      	movs	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
  }
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	fffdffff 	.word	0xfffdffff
 80038a8:	fffeffff 	.word	0xfffeffff
 80038ac:	fffbffff 	.word	0xfffbffff
 80038b0:	ffff7fff 	.word	0xffff7fff
 80038b4:	ffffefff 	.word	0xffffefff
 80038b8:	ffffdfff 	.word	0xffffdfff
 80038bc:	ffefffff 	.word	0xffefffff
 80038c0:	ff9fffff 	.word	0xff9fffff
 80038c4:	fff7ffff 	.word	0xfff7ffff

080038c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	2100      	movs	r1, #0
 80038d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038d8:	f7fd fdfa 	bl	80014d0 <HAL_GetTick>
 80038dc:	0003      	movs	r3, r0
 80038de:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2208      	movs	r2, #8
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d10c      	bne.n	8003908 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2280      	movs	r2, #128	; 0x80
 80038f2:	0391      	lsls	r1, r2, #14
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	4a17      	ldr	r2, [pc, #92]	; (8003954 <UART_CheckIdleState+0x8c>)
 80038f8:	9200      	str	r2, [sp, #0]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f000 f82c 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 8003900:	1e03      	subs	r3, r0, #0
 8003902:	d001      	beq.n	8003908 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e021      	b.n	800394c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2204      	movs	r2, #4
 8003910:	4013      	ands	r3, r2
 8003912:	2b04      	cmp	r3, #4
 8003914:	d10c      	bne.n	8003930 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2280      	movs	r2, #128	; 0x80
 800391a:	03d1      	lsls	r1, r2, #15
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4a0d      	ldr	r2, [pc, #52]	; (8003954 <UART_CheckIdleState+0x8c>)
 8003920:	9200      	str	r2, [sp, #0]
 8003922:	2200      	movs	r2, #0
 8003924:	f000 f818 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 8003928:	1e03      	subs	r3, r0, #0
 800392a:	d001      	beq.n	8003930 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e00d      	b.n	800394c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2274      	movs	r2, #116	; 0x74
 8003946:	2100      	movs	r1, #0
 8003948:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b004      	add	sp, #16
 8003952:	bd80      	pop	{r7, pc}
 8003954:	01ffffff 	.word	0x01ffffff

08003958 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b094      	sub	sp, #80	; 0x50
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	1dfb      	adds	r3, r7, #7
 8003966:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003968:	e0a3      	b.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800396c:	3301      	adds	r3, #1
 800396e:	d100      	bne.n	8003972 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003970:	e09f      	b.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fd fdad 	bl	80014d0 <HAL_GetTick>
 8003976:	0002      	movs	r2, r0
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <UART_WaitOnFlagUntilTimeout+0x30>
 8003982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003984:	2b00      	cmp	r3, #0
 8003986:	d13d      	bne.n	8003a04 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003988:	f3ef 8310 	mrs	r3, PRIMASK
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003990:	647b      	str	r3, [r7, #68]	; 0x44
 8003992:	2301      	movs	r3, #1
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	f383 8810 	msr	PRIMASK, r3
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	494c      	ldr	r1, [pc, #304]	; (8003adc <UART_WaitOnFlagUntilTimeout+0x184>)
 80039aa:	400a      	ands	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	f383 8810 	msr	PRIMASK, r3
}
 80039b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ba:	f3ef 8310 	mrs	r3, PRIMASK
 80039be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c2:	643b      	str	r3, [r7, #64]	; 0x40
 80039c4:	2301      	movs	r3, #1
 80039c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	f383 8810 	msr	PRIMASK, r3
}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2101      	movs	r1, #1
 80039dc:	438a      	bics	r2, r1
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e6:	f383 8810 	msr	PRIMASK, r3
}
 80039ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2274      	movs	r2, #116	; 0x74
 80039fc:	2100      	movs	r1, #0
 80039fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e067      	b.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d050      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69da      	ldr	r2, [r3, #28]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d146      	bne.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	0112      	lsls	r2, r2, #4
 8003a2c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a32:	613b      	str	r3, [r7, #16]
  return(result);
 8003a34:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a38:	2301      	movs	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f383 8810 	msr	PRIMASK, r3
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4923      	ldr	r1, [pc, #140]	; (8003adc <UART_WaitOnFlagUntilTimeout+0x184>)
 8003a50:	400a      	ands	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f383 8810 	msr	PRIMASK, r3
}
 8003a5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a60:	f3ef 8310 	mrs	r3, PRIMASK
 8003a64:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a66:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	f383 8810 	msr	PRIMASK, r3
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2101      	movs	r1, #1
 8003a82:	438a      	bics	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]
 8003a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	f383 8810 	msr	PRIMASK, r3
}
 8003a90:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2280      	movs	r2, #128	; 0x80
 8003aa2:	2120      	movs	r1, #32
 8003aa4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2274      	movs	r2, #116	; 0x74
 8003aaa:	2100      	movs	r1, #0
 8003aac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e010      	b.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	4013      	ands	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	425a      	negs	r2, r3
 8003ac2:	4153      	adcs	r3, r2
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	001a      	movs	r2, r3
 8003ac8:	1dfb      	adds	r3, r7, #7
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d100      	bne.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003ad0:	e74b      	b.n	800396a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b014      	add	sp, #80	; 0x50
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	fffffe5f 	.word	0xfffffe5f

08003ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	; 0x38
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8003aec:	617b      	str	r3, [r7, #20]
  return(result);
 8003aee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
 8003af2:	2301      	movs	r3, #1
 8003af4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f383 8810 	msr	PRIMASK, r3
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4925      	ldr	r1, [pc, #148]	; (8003ba0 <UART_EndRxTransfer+0xc0>)
 8003b0a:	400a      	ands	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f383 8810 	msr	PRIMASK, r3
}
 8003b18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1e:	623b      	str	r3, [r7, #32]
  return(result);
 8003b20:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	633b      	str	r3, [r7, #48]	; 0x30
 8003b24:	2301      	movs	r3, #1
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	f383 8810 	msr	PRIMASK, r3
}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	f383 8810 	msr	PRIMASK, r3
}
 8003b4a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d118      	bne.n	8003b86 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b54:	f3ef 8310 	mrs	r3, PRIMASK
 8003b58:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b5e:	2301      	movs	r3, #1
 8003b60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f383 8810 	msr	PRIMASK, r3
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2110      	movs	r1, #16
 8003b76:	438a      	bics	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f383 8810 	msr	PRIMASK, r3
}
 8003b84:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b00e      	add	sp, #56	; 0x38
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	fffffedf 	.word	0xfffffedf

08003ba4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	225a      	movs	r2, #90	; 0x5a
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2252      	movs	r2, #82	; 0x52
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f7fc fc81 	bl	80004cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b004      	add	sp, #16
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b086      	sub	sp, #24
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bda:	f3ef 8310 	mrs	r3, PRIMASK
 8003bde:	60bb      	str	r3, [r7, #8]
  return(result);
 8003be0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	2301      	movs	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f383 8810 	msr	PRIMASK, r3
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2140      	movs	r1, #64	; 0x40
 8003bfc:	438a      	bics	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f383 8810 	msr	PRIMASK, r3
}
 8003c0a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f7ff fb08 	bl	8003230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b006      	add	sp, #24
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b002      	add	sp, #8
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <__errno>:
 8003c38:	4b01      	ldr	r3, [pc, #4]	; (8003c40 <__errno+0x8>)
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	4770      	bx	lr
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	20000078 	.word	0x20000078

08003c44 <__libc_init_array>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	2600      	movs	r6, #0
 8003c48:	4d0c      	ldr	r5, [pc, #48]	; (8003c7c <__libc_init_array+0x38>)
 8003c4a:	4c0d      	ldr	r4, [pc, #52]	; (8003c80 <__libc_init_array+0x3c>)
 8003c4c:	1b64      	subs	r4, r4, r5
 8003c4e:	10a4      	asrs	r4, r4, #2
 8003c50:	42a6      	cmp	r6, r4
 8003c52:	d109      	bne.n	8003c68 <__libc_init_array+0x24>
 8003c54:	2600      	movs	r6, #0
 8003c56:	f001 fab7 	bl	80051c8 <_init>
 8003c5a:	4d0a      	ldr	r5, [pc, #40]	; (8003c84 <__libc_init_array+0x40>)
 8003c5c:	4c0a      	ldr	r4, [pc, #40]	; (8003c88 <__libc_init_array+0x44>)
 8003c5e:	1b64      	subs	r4, r4, r5
 8003c60:	10a4      	asrs	r4, r4, #2
 8003c62:	42a6      	cmp	r6, r4
 8003c64:	d105      	bne.n	8003c72 <__libc_init_array+0x2e>
 8003c66:	bd70      	pop	{r4, r5, r6, pc}
 8003c68:	00b3      	lsls	r3, r6, #2
 8003c6a:	58eb      	ldr	r3, [r5, r3]
 8003c6c:	4798      	blx	r3
 8003c6e:	3601      	adds	r6, #1
 8003c70:	e7ee      	b.n	8003c50 <__libc_init_array+0xc>
 8003c72:	00b3      	lsls	r3, r6, #2
 8003c74:	58eb      	ldr	r3, [r5, r3]
 8003c76:	4798      	blx	r3
 8003c78:	3601      	adds	r6, #1
 8003c7a:	e7f2      	b.n	8003c62 <__libc_init_array+0x1e>
 8003c7c:	080053d4 	.word	0x080053d4
 8003c80:	080053d4 	.word	0x080053d4
 8003c84:	080053d4 	.word	0x080053d4
 8003c88:	080053d8 	.word	0x080053d8

08003c8c <malloc>:
 8003c8c:	b510      	push	{r4, lr}
 8003c8e:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <malloc+0x10>)
 8003c90:	0001      	movs	r1, r0
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	f000 f882 	bl	8003d9c <_malloc_r>
 8003c98:	bd10      	pop	{r4, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	20000078 	.word	0x20000078

08003ca0 <memcpy>:
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	b510      	push	{r4, lr}
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d100      	bne.n	8003caa <memcpy+0xa>
 8003ca8:	bd10      	pop	{r4, pc}
 8003caa:	5ccc      	ldrb	r4, [r1, r3]
 8003cac:	54c4      	strb	r4, [r0, r3]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	e7f8      	b.n	8003ca4 <memcpy+0x4>

08003cb2 <memset>:
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	1882      	adds	r2, r0, r2
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d100      	bne.n	8003cbc <memset+0xa>
 8003cba:	4770      	bx	lr
 8003cbc:	7019      	strb	r1, [r3, #0]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	e7f9      	b.n	8003cb6 <memset+0x4>
	...

08003cc4 <_free_r>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	0005      	movs	r5, r0
 8003cc8:	2900      	cmp	r1, #0
 8003cca:	d010      	beq.n	8003cee <_free_r+0x2a>
 8003ccc:	1f0c      	subs	r4, r1, #4
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	da00      	bge.n	8003cd6 <_free_r+0x12>
 8003cd4:	18e4      	adds	r4, r4, r3
 8003cd6:	0028      	movs	r0, r5
 8003cd8:	f000 f9ae 	bl	8004038 <__malloc_lock>
 8003cdc:	4a1d      	ldr	r2, [pc, #116]	; (8003d54 <_free_r+0x90>)
 8003cde:	6813      	ldr	r3, [r2, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <_free_r+0x2c>
 8003ce4:	6063      	str	r3, [r4, #4]
 8003ce6:	6014      	str	r4, [r2, #0]
 8003ce8:	0028      	movs	r0, r5
 8003cea:	f000 f9ad 	bl	8004048 <__malloc_unlock>
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	42a3      	cmp	r3, r4
 8003cf2:	d908      	bls.n	8003d06 <_free_r+0x42>
 8003cf4:	6821      	ldr	r1, [r4, #0]
 8003cf6:	1860      	adds	r0, r4, r1
 8003cf8:	4283      	cmp	r3, r0
 8003cfa:	d1f3      	bne.n	8003ce4 <_free_r+0x20>
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	1841      	adds	r1, r0, r1
 8003d02:	6021      	str	r1, [r4, #0]
 8003d04:	e7ee      	b.n	8003ce4 <_free_r+0x20>
 8003d06:	001a      	movs	r2, r3
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <_free_r+0x4e>
 8003d0e:	42a3      	cmp	r3, r4
 8003d10:	d9f9      	bls.n	8003d06 <_free_r+0x42>
 8003d12:	6811      	ldr	r1, [r2, #0]
 8003d14:	1850      	adds	r0, r2, r1
 8003d16:	42a0      	cmp	r0, r4
 8003d18:	d10b      	bne.n	8003d32 <_free_r+0x6e>
 8003d1a:	6820      	ldr	r0, [r4, #0]
 8003d1c:	1809      	adds	r1, r1, r0
 8003d1e:	1850      	adds	r0, r2, r1
 8003d20:	6011      	str	r1, [r2, #0]
 8003d22:	4283      	cmp	r3, r0
 8003d24:	d1e0      	bne.n	8003ce8 <_free_r+0x24>
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	1841      	adds	r1, r0, r1
 8003d2c:	6011      	str	r1, [r2, #0]
 8003d2e:	6053      	str	r3, [r2, #4]
 8003d30:	e7da      	b.n	8003ce8 <_free_r+0x24>
 8003d32:	42a0      	cmp	r0, r4
 8003d34:	d902      	bls.n	8003d3c <_free_r+0x78>
 8003d36:	230c      	movs	r3, #12
 8003d38:	602b      	str	r3, [r5, #0]
 8003d3a:	e7d5      	b.n	8003ce8 <_free_r+0x24>
 8003d3c:	6821      	ldr	r1, [r4, #0]
 8003d3e:	1860      	adds	r0, r4, r1
 8003d40:	4283      	cmp	r3, r0
 8003d42:	d103      	bne.n	8003d4c <_free_r+0x88>
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	1841      	adds	r1, r0, r1
 8003d4a:	6021      	str	r1, [r4, #0]
 8003d4c:	6063      	str	r3, [r4, #4]
 8003d4e:	6054      	str	r4, [r2, #4]
 8003d50:	e7ca      	b.n	8003ce8 <_free_r+0x24>
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	200000fc 	.word	0x200000fc

08003d58 <sbrk_aligned>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	4e0f      	ldr	r6, [pc, #60]	; (8003d98 <sbrk_aligned+0x40>)
 8003d5c:	000d      	movs	r5, r1
 8003d5e:	6831      	ldr	r1, [r6, #0]
 8003d60:	0004      	movs	r4, r0
 8003d62:	2900      	cmp	r1, #0
 8003d64:	d102      	bne.n	8003d6c <sbrk_aligned+0x14>
 8003d66:	f000 f88f 	bl	8003e88 <_sbrk_r>
 8003d6a:	6030      	str	r0, [r6, #0]
 8003d6c:	0029      	movs	r1, r5
 8003d6e:	0020      	movs	r0, r4
 8003d70:	f000 f88a 	bl	8003e88 <_sbrk_r>
 8003d74:	1c43      	adds	r3, r0, #1
 8003d76:	d00a      	beq.n	8003d8e <sbrk_aligned+0x36>
 8003d78:	2303      	movs	r3, #3
 8003d7a:	1cc5      	adds	r5, r0, #3
 8003d7c:	439d      	bics	r5, r3
 8003d7e:	42a8      	cmp	r0, r5
 8003d80:	d007      	beq.n	8003d92 <sbrk_aligned+0x3a>
 8003d82:	1a29      	subs	r1, r5, r0
 8003d84:	0020      	movs	r0, r4
 8003d86:	f000 f87f 	bl	8003e88 <_sbrk_r>
 8003d8a:	1c43      	adds	r3, r0, #1
 8003d8c:	d101      	bne.n	8003d92 <sbrk_aligned+0x3a>
 8003d8e:	2501      	movs	r5, #1
 8003d90:	426d      	negs	r5, r5
 8003d92:	0028      	movs	r0, r5
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	20000100 	.word	0x20000100

08003d9c <_malloc_r>:
 8003d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d9e:	2203      	movs	r2, #3
 8003da0:	1ccb      	adds	r3, r1, #3
 8003da2:	4393      	bics	r3, r2
 8003da4:	3308      	adds	r3, #8
 8003da6:	0006      	movs	r6, r0
 8003da8:	001f      	movs	r7, r3
 8003daa:	2b0c      	cmp	r3, #12
 8003dac:	d232      	bcs.n	8003e14 <_malloc_r+0x78>
 8003dae:	270c      	movs	r7, #12
 8003db0:	42b9      	cmp	r1, r7
 8003db2:	d831      	bhi.n	8003e18 <_malloc_r+0x7c>
 8003db4:	0030      	movs	r0, r6
 8003db6:	f000 f93f 	bl	8004038 <__malloc_lock>
 8003dba:	4d32      	ldr	r5, [pc, #200]	; (8003e84 <_malloc_r+0xe8>)
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	001c      	movs	r4, r3
 8003dc0:	2c00      	cmp	r4, #0
 8003dc2:	d12e      	bne.n	8003e22 <_malloc_r+0x86>
 8003dc4:	0039      	movs	r1, r7
 8003dc6:	0030      	movs	r0, r6
 8003dc8:	f7ff ffc6 	bl	8003d58 <sbrk_aligned>
 8003dcc:	0004      	movs	r4, r0
 8003dce:	1c43      	adds	r3, r0, #1
 8003dd0:	d11e      	bne.n	8003e10 <_malloc_r+0x74>
 8003dd2:	682c      	ldr	r4, [r5, #0]
 8003dd4:	0025      	movs	r5, r4
 8003dd6:	2d00      	cmp	r5, #0
 8003dd8:	d14a      	bne.n	8003e70 <_malloc_r+0xd4>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	0029      	movs	r1, r5
 8003dde:	18e3      	adds	r3, r4, r3
 8003de0:	0030      	movs	r0, r6
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	f000 f850 	bl	8003e88 <_sbrk_r>
 8003de8:	9b01      	ldr	r3, [sp, #4]
 8003dea:	4283      	cmp	r3, r0
 8003dec:	d143      	bne.n	8003e76 <_malloc_r+0xda>
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	3703      	adds	r7, #3
 8003df2:	1aff      	subs	r7, r7, r3
 8003df4:	2303      	movs	r3, #3
 8003df6:	439f      	bics	r7, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	2f0c      	cmp	r7, #12
 8003dfc:	d200      	bcs.n	8003e00 <_malloc_r+0x64>
 8003dfe:	270c      	movs	r7, #12
 8003e00:	0039      	movs	r1, r7
 8003e02:	0030      	movs	r0, r6
 8003e04:	f7ff ffa8 	bl	8003d58 <sbrk_aligned>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d034      	beq.n	8003e76 <_malloc_r+0xda>
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	19df      	adds	r7, r3, r7
 8003e10:	6027      	str	r7, [r4, #0]
 8003e12:	e013      	b.n	8003e3c <_malloc_r+0xa0>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	dacb      	bge.n	8003db0 <_malloc_r+0x14>
 8003e18:	230c      	movs	r3, #12
 8003e1a:	2500      	movs	r5, #0
 8003e1c:	6033      	str	r3, [r6, #0]
 8003e1e:	0028      	movs	r0, r5
 8003e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e22:	6822      	ldr	r2, [r4, #0]
 8003e24:	1bd1      	subs	r1, r2, r7
 8003e26:	d420      	bmi.n	8003e6a <_malloc_r+0xce>
 8003e28:	290b      	cmp	r1, #11
 8003e2a:	d917      	bls.n	8003e5c <_malloc_r+0xc0>
 8003e2c:	19e2      	adds	r2, r4, r7
 8003e2e:	6027      	str	r7, [r4, #0]
 8003e30:	42a3      	cmp	r3, r4
 8003e32:	d111      	bne.n	8003e58 <_malloc_r+0xbc>
 8003e34:	602a      	str	r2, [r5, #0]
 8003e36:	6863      	ldr	r3, [r4, #4]
 8003e38:	6011      	str	r1, [r2, #0]
 8003e3a:	6053      	str	r3, [r2, #4]
 8003e3c:	0030      	movs	r0, r6
 8003e3e:	0025      	movs	r5, r4
 8003e40:	f000 f902 	bl	8004048 <__malloc_unlock>
 8003e44:	2207      	movs	r2, #7
 8003e46:	350b      	adds	r5, #11
 8003e48:	1d23      	adds	r3, r4, #4
 8003e4a:	4395      	bics	r5, r2
 8003e4c:	1aea      	subs	r2, r5, r3
 8003e4e:	429d      	cmp	r5, r3
 8003e50:	d0e5      	beq.n	8003e1e <_malloc_r+0x82>
 8003e52:	1b5b      	subs	r3, r3, r5
 8003e54:	50a3      	str	r3, [r4, r2]
 8003e56:	e7e2      	b.n	8003e1e <_malloc_r+0x82>
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	e7ec      	b.n	8003e36 <_malloc_r+0x9a>
 8003e5c:	6862      	ldr	r2, [r4, #4]
 8003e5e:	42a3      	cmp	r3, r4
 8003e60:	d101      	bne.n	8003e66 <_malloc_r+0xca>
 8003e62:	602a      	str	r2, [r5, #0]
 8003e64:	e7ea      	b.n	8003e3c <_malloc_r+0xa0>
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	e7e8      	b.n	8003e3c <_malloc_r+0xa0>
 8003e6a:	0023      	movs	r3, r4
 8003e6c:	6864      	ldr	r4, [r4, #4]
 8003e6e:	e7a7      	b.n	8003dc0 <_malloc_r+0x24>
 8003e70:	002c      	movs	r4, r5
 8003e72:	686d      	ldr	r5, [r5, #4]
 8003e74:	e7af      	b.n	8003dd6 <_malloc_r+0x3a>
 8003e76:	230c      	movs	r3, #12
 8003e78:	0030      	movs	r0, r6
 8003e7a:	6033      	str	r3, [r6, #0]
 8003e7c:	f000 f8e4 	bl	8004048 <__malloc_unlock>
 8003e80:	e7cd      	b.n	8003e1e <_malloc_r+0x82>
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	200000fc 	.word	0x200000fc

08003e88 <_sbrk_r>:
 8003e88:	2300      	movs	r3, #0
 8003e8a:	b570      	push	{r4, r5, r6, lr}
 8003e8c:	4d06      	ldr	r5, [pc, #24]	; (8003ea8 <_sbrk_r+0x20>)
 8003e8e:	0004      	movs	r4, r0
 8003e90:	0008      	movs	r0, r1
 8003e92:	602b      	str	r3, [r5, #0]
 8003e94:	f7fd f9d4 	bl	8001240 <_sbrk>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d103      	bne.n	8003ea4 <_sbrk_r+0x1c>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d000      	beq.n	8003ea4 <_sbrk_r+0x1c>
 8003ea2:	6023      	str	r3, [r4, #0]
 8003ea4:	bd70      	pop	{r4, r5, r6, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	20000104 	.word	0x20000104

08003eac <siprintf>:
 8003eac:	b40e      	push	{r1, r2, r3}
 8003eae:	b500      	push	{lr}
 8003eb0:	490b      	ldr	r1, [pc, #44]	; (8003ee0 <siprintf+0x34>)
 8003eb2:	b09c      	sub	sp, #112	; 0x70
 8003eb4:	ab1d      	add	r3, sp, #116	; 0x74
 8003eb6:	9002      	str	r0, [sp, #8]
 8003eb8:	9006      	str	r0, [sp, #24]
 8003eba:	9107      	str	r1, [sp, #28]
 8003ebc:	9104      	str	r1, [sp, #16]
 8003ebe:	4809      	ldr	r0, [pc, #36]	; (8003ee4 <siprintf+0x38>)
 8003ec0:	4909      	ldr	r1, [pc, #36]	; (8003ee8 <siprintf+0x3c>)
 8003ec2:	cb04      	ldmia	r3!, {r2}
 8003ec4:	9105      	str	r1, [sp, #20]
 8003ec6:	6800      	ldr	r0, [r0, #0]
 8003ec8:	a902      	add	r1, sp, #8
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	f000 f926 	bl	800411c <_svfiprintf_r>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9a02      	ldr	r2, [sp, #8]
 8003ed4:	7013      	strb	r3, [r2, #0]
 8003ed6:	b01c      	add	sp, #112	; 0x70
 8003ed8:	bc08      	pop	{r3}
 8003eda:	b003      	add	sp, #12
 8003edc:	4718      	bx	r3
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	7fffffff 	.word	0x7fffffff
 8003ee4:	20000078 	.word	0x20000078
 8003ee8:	ffff0208 	.word	0xffff0208

08003eec <strncpy>:
 8003eec:	0003      	movs	r3, r0
 8003eee:	b530      	push	{r4, r5, lr}
 8003ef0:	001d      	movs	r5, r3
 8003ef2:	2a00      	cmp	r2, #0
 8003ef4:	d006      	beq.n	8003f04 <strncpy+0x18>
 8003ef6:	780c      	ldrb	r4, [r1, #0]
 8003ef8:	3a01      	subs	r2, #1
 8003efa:	3301      	adds	r3, #1
 8003efc:	702c      	strb	r4, [r5, #0]
 8003efe:	3101      	adds	r1, #1
 8003f00:	2c00      	cmp	r4, #0
 8003f02:	d1f5      	bne.n	8003ef0 <strncpy+0x4>
 8003f04:	2100      	movs	r1, #0
 8003f06:	189a      	adds	r2, r3, r2
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d100      	bne.n	8003f0e <strncpy+0x22>
 8003f0c:	bd30      	pop	{r4, r5, pc}
 8003f0e:	7019      	strb	r1, [r3, #0]
 8003f10:	3301      	adds	r3, #1
 8003f12:	e7f9      	b.n	8003f08 <strncpy+0x1c>

08003f14 <strtok>:
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f16:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <strtok+0x5c>)
 8003f18:	0005      	movs	r5, r0
 8003f1a:	681f      	ldr	r7, [r3, #0]
 8003f1c:	000e      	movs	r6, r1
 8003f1e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003f20:	2c00      	cmp	r4, #0
 8003f22:	d11d      	bne.n	8003f60 <strtok+0x4c>
 8003f24:	2050      	movs	r0, #80	; 0x50
 8003f26:	f7ff feb1 	bl	8003c8c <malloc>
 8003f2a:	1e02      	subs	r2, r0, #0
 8003f2c:	65b8      	str	r0, [r7, #88]	; 0x58
 8003f2e:	d104      	bne.n	8003f3a <strtok+0x26>
 8003f30:	2157      	movs	r1, #87	; 0x57
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <strtok+0x60>)
 8003f34:	4810      	ldr	r0, [pc, #64]	; (8003f78 <strtok+0x64>)
 8003f36:	f000 f851 	bl	8003fdc <__assert_func>
 8003f3a:	6004      	str	r4, [r0, #0]
 8003f3c:	6044      	str	r4, [r0, #4]
 8003f3e:	6084      	str	r4, [r0, #8]
 8003f40:	60c4      	str	r4, [r0, #12]
 8003f42:	6104      	str	r4, [r0, #16]
 8003f44:	6144      	str	r4, [r0, #20]
 8003f46:	6184      	str	r4, [r0, #24]
 8003f48:	6284      	str	r4, [r0, #40]	; 0x28
 8003f4a:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003f4c:	6304      	str	r4, [r0, #48]	; 0x30
 8003f4e:	6344      	str	r4, [r0, #52]	; 0x34
 8003f50:	6384      	str	r4, [r0, #56]	; 0x38
 8003f52:	63c4      	str	r4, [r0, #60]	; 0x3c
 8003f54:	6404      	str	r4, [r0, #64]	; 0x40
 8003f56:	6444      	str	r4, [r0, #68]	; 0x44
 8003f58:	6484      	str	r4, [r0, #72]	; 0x48
 8003f5a:	64c4      	str	r4, [r0, #76]	; 0x4c
 8003f5c:	7704      	strb	r4, [r0, #28]
 8003f5e:	6244      	str	r4, [r0, #36]	; 0x24
 8003f60:	0031      	movs	r1, r6
 8003f62:	0028      	movs	r0, r5
 8003f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f66:	2301      	movs	r3, #1
 8003f68:	f000 f808 	bl	8003f7c <__strtok_r>
 8003f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	20000078 	.word	0x20000078
 8003f74:	08005288 	.word	0x08005288
 8003f78:	0800529f 	.word	0x0800529f

08003f7c <__strtok_r>:
 8003f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d102      	bne.n	8003f88 <__strtok_r+0xc>
 8003f82:	6810      	ldr	r0, [r2, #0]
 8003f84:	2800      	cmp	r0, #0
 8003f86:	d013      	beq.n	8003fb0 <__strtok_r+0x34>
 8003f88:	0004      	movs	r4, r0
 8003f8a:	0020      	movs	r0, r4
 8003f8c:	000e      	movs	r6, r1
 8003f8e:	7805      	ldrb	r5, [r0, #0]
 8003f90:	3401      	adds	r4, #1
 8003f92:	7837      	ldrb	r7, [r6, #0]
 8003f94:	2f00      	cmp	r7, #0
 8003f96:	d104      	bne.n	8003fa2 <__strtok_r+0x26>
 8003f98:	2d00      	cmp	r5, #0
 8003f9a:	d10f      	bne.n	8003fbc <__strtok_r+0x40>
 8003f9c:	0028      	movs	r0, r5
 8003f9e:	6015      	str	r5, [r2, #0]
 8003fa0:	e006      	b.n	8003fb0 <__strtok_r+0x34>
 8003fa2:	3601      	adds	r6, #1
 8003fa4:	42bd      	cmp	r5, r7
 8003fa6:	d1f4      	bne.n	8003f92 <__strtok_r+0x16>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1ee      	bne.n	8003f8a <__strtok_r+0xe>
 8003fac:	6014      	str	r4, [r2, #0]
 8003fae:	7003      	strb	r3, [r0, #0]
 8003fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb2:	002f      	movs	r7, r5
 8003fb4:	e00f      	b.n	8003fd6 <__strtok_r+0x5a>
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	2e00      	cmp	r6, #0
 8003fba:	d104      	bne.n	8003fc6 <__strtok_r+0x4a>
 8003fbc:	0023      	movs	r3, r4
 8003fbe:	3401      	adds	r4, #1
 8003fc0:	781d      	ldrb	r5, [r3, #0]
 8003fc2:	0027      	movs	r7, r4
 8003fc4:	000b      	movs	r3, r1
 8003fc6:	781e      	ldrb	r6, [r3, #0]
 8003fc8:	42b5      	cmp	r5, r6
 8003fca:	d1f4      	bne.n	8003fb6 <__strtok_r+0x3a>
 8003fcc:	2d00      	cmp	r5, #0
 8003fce:	d0f0      	beq.n	8003fb2 <__strtok_r+0x36>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	3c01      	subs	r4, #1
 8003fd4:	7023      	strb	r3, [r4, #0]
 8003fd6:	6017      	str	r7, [r2, #0]
 8003fd8:	e7ea      	b.n	8003fb0 <__strtok_r+0x34>
	...

08003fdc <__assert_func>:
 8003fdc:	b530      	push	{r4, r5, lr}
 8003fde:	0014      	movs	r4, r2
 8003fe0:	001a      	movs	r2, r3
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <__assert_func+0x2c>)
 8003fe4:	0005      	movs	r5, r0
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	b085      	sub	sp, #20
 8003fea:	68d8      	ldr	r0, [r3, #12]
 8003fec:	4b07      	ldr	r3, [pc, #28]	; (800400c <__assert_func+0x30>)
 8003fee:	2c00      	cmp	r4, #0
 8003ff0:	d101      	bne.n	8003ff6 <__assert_func+0x1a>
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <__assert_func+0x34>)
 8003ff4:	001c      	movs	r4, r3
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	9100      	str	r1, [sp, #0]
 8003ffa:	002b      	movs	r3, r5
 8003ffc:	4905      	ldr	r1, [pc, #20]	; (8004014 <__assert_func+0x38>)
 8003ffe:	9402      	str	r4, [sp, #8]
 8004000:	f000 f80a 	bl	8004018 <fiprintf>
 8004004:	f000 fd3c 	bl	8004a80 <abort>
 8004008:	20000078 	.word	0x20000078
 800400c:	080052fc 	.word	0x080052fc
 8004010:	08005337 	.word	0x08005337
 8004014:	08005309 	.word	0x08005309

08004018 <fiprintf>:
 8004018:	b40e      	push	{r1, r2, r3}
 800401a:	b503      	push	{r0, r1, lr}
 800401c:	0001      	movs	r1, r0
 800401e:	ab03      	add	r3, sp, #12
 8004020:	4804      	ldr	r0, [pc, #16]	; (8004034 <fiprintf+0x1c>)
 8004022:	cb04      	ldmia	r3!, {r2}
 8004024:	6800      	ldr	r0, [r0, #0]
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	f000 f9a0 	bl	800436c <_vfiprintf_r>
 800402c:	b002      	add	sp, #8
 800402e:	bc08      	pop	{r3}
 8004030:	b003      	add	sp, #12
 8004032:	4718      	bx	r3
 8004034:	20000078 	.word	0x20000078

08004038 <__malloc_lock>:
 8004038:	b510      	push	{r4, lr}
 800403a:	4802      	ldr	r0, [pc, #8]	; (8004044 <__malloc_lock+0xc>)
 800403c:	f000 fef7 	bl	8004e2e <__retarget_lock_acquire_recursive>
 8004040:	bd10      	pop	{r4, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	20000108 	.word	0x20000108

08004048 <__malloc_unlock>:
 8004048:	b510      	push	{r4, lr}
 800404a:	4802      	ldr	r0, [pc, #8]	; (8004054 <__malloc_unlock+0xc>)
 800404c:	f000 fef0 	bl	8004e30 <__retarget_lock_release_recursive>
 8004050:	bd10      	pop	{r4, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	20000108 	.word	0x20000108

08004058 <__ssputs_r>:
 8004058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405a:	688e      	ldr	r6, [r1, #8]
 800405c:	b085      	sub	sp, #20
 800405e:	0007      	movs	r7, r0
 8004060:	000c      	movs	r4, r1
 8004062:	9203      	str	r2, [sp, #12]
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	429e      	cmp	r6, r3
 8004068:	d83c      	bhi.n	80040e4 <__ssputs_r+0x8c>
 800406a:	2390      	movs	r3, #144	; 0x90
 800406c:	898a      	ldrh	r2, [r1, #12]
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	421a      	tst	r2, r3
 8004072:	d034      	beq.n	80040de <__ssputs_r+0x86>
 8004074:	6909      	ldr	r1, [r1, #16]
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	6960      	ldr	r0, [r4, #20]
 800407a:	1a5b      	subs	r3, r3, r1
 800407c:	9302      	str	r3, [sp, #8]
 800407e:	2303      	movs	r3, #3
 8004080:	4343      	muls	r3, r0
 8004082:	0fdd      	lsrs	r5, r3, #31
 8004084:	18ed      	adds	r5, r5, r3
 8004086:	9b01      	ldr	r3, [sp, #4]
 8004088:	9802      	ldr	r0, [sp, #8]
 800408a:	3301      	adds	r3, #1
 800408c:	181b      	adds	r3, r3, r0
 800408e:	106d      	asrs	r5, r5, #1
 8004090:	42ab      	cmp	r3, r5
 8004092:	d900      	bls.n	8004096 <__ssputs_r+0x3e>
 8004094:	001d      	movs	r5, r3
 8004096:	0553      	lsls	r3, r2, #21
 8004098:	d532      	bpl.n	8004100 <__ssputs_r+0xa8>
 800409a:	0029      	movs	r1, r5
 800409c:	0038      	movs	r0, r7
 800409e:	f7ff fe7d 	bl	8003d9c <_malloc_r>
 80040a2:	1e06      	subs	r6, r0, #0
 80040a4:	d109      	bne.n	80040ba <__ssputs_r+0x62>
 80040a6:	230c      	movs	r3, #12
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	2340      	movs	r3, #64	; 0x40
 80040ac:	2001      	movs	r0, #1
 80040ae:	89a2      	ldrh	r2, [r4, #12]
 80040b0:	4240      	negs	r0, r0
 80040b2:	4313      	orrs	r3, r2
 80040b4:	81a3      	strh	r3, [r4, #12]
 80040b6:	b005      	add	sp, #20
 80040b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ba:	9a02      	ldr	r2, [sp, #8]
 80040bc:	6921      	ldr	r1, [r4, #16]
 80040be:	f7ff fdef 	bl	8003ca0 <memcpy>
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	4a14      	ldr	r2, [pc, #80]	; (8004118 <__ssputs_r+0xc0>)
 80040c6:	401a      	ands	r2, r3
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	4313      	orrs	r3, r2
 80040cc:	81a3      	strh	r3, [r4, #12]
 80040ce:	9b02      	ldr	r3, [sp, #8]
 80040d0:	6126      	str	r6, [r4, #16]
 80040d2:	18f6      	adds	r6, r6, r3
 80040d4:	6026      	str	r6, [r4, #0]
 80040d6:	6165      	str	r5, [r4, #20]
 80040d8:	9e01      	ldr	r6, [sp, #4]
 80040da:	1aed      	subs	r5, r5, r3
 80040dc:	60a5      	str	r5, [r4, #8]
 80040de:	9b01      	ldr	r3, [sp, #4]
 80040e0:	429e      	cmp	r6, r3
 80040e2:	d900      	bls.n	80040e6 <__ssputs_r+0x8e>
 80040e4:	9e01      	ldr	r6, [sp, #4]
 80040e6:	0032      	movs	r2, r6
 80040e8:	9903      	ldr	r1, [sp, #12]
 80040ea:	6820      	ldr	r0, [r4, #0]
 80040ec:	f000 ff19 	bl	8004f22 <memmove>
 80040f0:	68a3      	ldr	r3, [r4, #8]
 80040f2:	2000      	movs	r0, #0
 80040f4:	1b9b      	subs	r3, r3, r6
 80040f6:	60a3      	str	r3, [r4, #8]
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	199e      	adds	r6, r3, r6
 80040fc:	6026      	str	r6, [r4, #0]
 80040fe:	e7da      	b.n	80040b6 <__ssputs_r+0x5e>
 8004100:	002a      	movs	r2, r5
 8004102:	0038      	movs	r0, r7
 8004104:	f000 ff20 	bl	8004f48 <_realloc_r>
 8004108:	1e06      	subs	r6, r0, #0
 800410a:	d1e0      	bne.n	80040ce <__ssputs_r+0x76>
 800410c:	0038      	movs	r0, r7
 800410e:	6921      	ldr	r1, [r4, #16]
 8004110:	f7ff fdd8 	bl	8003cc4 <_free_r>
 8004114:	e7c7      	b.n	80040a6 <__ssputs_r+0x4e>
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	fffffb7f 	.word	0xfffffb7f

0800411c <_svfiprintf_r>:
 800411c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800411e:	b0a1      	sub	sp, #132	; 0x84
 8004120:	9003      	str	r0, [sp, #12]
 8004122:	001d      	movs	r5, r3
 8004124:	898b      	ldrh	r3, [r1, #12]
 8004126:	000f      	movs	r7, r1
 8004128:	0016      	movs	r6, r2
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	d511      	bpl.n	8004152 <_svfiprintf_r+0x36>
 800412e:	690b      	ldr	r3, [r1, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10e      	bne.n	8004152 <_svfiprintf_r+0x36>
 8004134:	2140      	movs	r1, #64	; 0x40
 8004136:	f7ff fe31 	bl	8003d9c <_malloc_r>
 800413a:	6038      	str	r0, [r7, #0]
 800413c:	6138      	str	r0, [r7, #16]
 800413e:	2800      	cmp	r0, #0
 8004140:	d105      	bne.n	800414e <_svfiprintf_r+0x32>
 8004142:	230c      	movs	r3, #12
 8004144:	9a03      	ldr	r2, [sp, #12]
 8004146:	3801      	subs	r0, #1
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	b021      	add	sp, #132	; 0x84
 800414c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800414e:	2340      	movs	r3, #64	; 0x40
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	2300      	movs	r3, #0
 8004154:	ac08      	add	r4, sp, #32
 8004156:	6163      	str	r3, [r4, #20]
 8004158:	3320      	adds	r3, #32
 800415a:	7663      	strb	r3, [r4, #25]
 800415c:	3310      	adds	r3, #16
 800415e:	76a3      	strb	r3, [r4, #26]
 8004160:	9507      	str	r5, [sp, #28]
 8004162:	0035      	movs	r5, r6
 8004164:	782b      	ldrb	r3, [r5, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <_svfiprintf_r+0x52>
 800416a:	2b25      	cmp	r3, #37	; 0x25
 800416c:	d147      	bne.n	80041fe <_svfiprintf_r+0xe2>
 800416e:	1bab      	subs	r3, r5, r6
 8004170:	9305      	str	r3, [sp, #20]
 8004172:	42b5      	cmp	r5, r6
 8004174:	d00c      	beq.n	8004190 <_svfiprintf_r+0x74>
 8004176:	0032      	movs	r2, r6
 8004178:	0039      	movs	r1, r7
 800417a:	9803      	ldr	r0, [sp, #12]
 800417c:	f7ff ff6c 	bl	8004058 <__ssputs_r>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d100      	bne.n	8004186 <_svfiprintf_r+0x6a>
 8004184:	e0ae      	b.n	80042e4 <_svfiprintf_r+0x1c8>
 8004186:	6962      	ldr	r2, [r4, #20]
 8004188:	9b05      	ldr	r3, [sp, #20]
 800418a:	4694      	mov	ip, r2
 800418c:	4463      	add	r3, ip
 800418e:	6163      	str	r3, [r4, #20]
 8004190:	782b      	ldrb	r3, [r5, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d100      	bne.n	8004198 <_svfiprintf_r+0x7c>
 8004196:	e0a5      	b.n	80042e4 <_svfiprintf_r+0x1c8>
 8004198:	2201      	movs	r2, #1
 800419a:	2300      	movs	r3, #0
 800419c:	4252      	negs	r2, r2
 800419e:	6062      	str	r2, [r4, #4]
 80041a0:	a904      	add	r1, sp, #16
 80041a2:	3254      	adds	r2, #84	; 0x54
 80041a4:	1852      	adds	r2, r2, r1
 80041a6:	1c6e      	adds	r6, r5, #1
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	60e3      	str	r3, [r4, #12]
 80041ac:	60a3      	str	r3, [r4, #8]
 80041ae:	7013      	strb	r3, [r2, #0]
 80041b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80041b2:	2205      	movs	r2, #5
 80041b4:	7831      	ldrb	r1, [r6, #0]
 80041b6:	4854      	ldr	r0, [pc, #336]	; (8004308 <_svfiprintf_r+0x1ec>)
 80041b8:	f000 fea8 	bl	8004f0c <memchr>
 80041bc:	1c75      	adds	r5, r6, #1
 80041be:	2800      	cmp	r0, #0
 80041c0:	d11f      	bne.n	8004202 <_svfiprintf_r+0xe6>
 80041c2:	6822      	ldr	r2, [r4, #0]
 80041c4:	06d3      	lsls	r3, r2, #27
 80041c6:	d504      	bpl.n	80041d2 <_svfiprintf_r+0xb6>
 80041c8:	2353      	movs	r3, #83	; 0x53
 80041ca:	a904      	add	r1, sp, #16
 80041cc:	185b      	adds	r3, r3, r1
 80041ce:	2120      	movs	r1, #32
 80041d0:	7019      	strb	r1, [r3, #0]
 80041d2:	0713      	lsls	r3, r2, #28
 80041d4:	d504      	bpl.n	80041e0 <_svfiprintf_r+0xc4>
 80041d6:	2353      	movs	r3, #83	; 0x53
 80041d8:	a904      	add	r1, sp, #16
 80041da:	185b      	adds	r3, r3, r1
 80041dc:	212b      	movs	r1, #43	; 0x2b
 80041de:	7019      	strb	r1, [r3, #0]
 80041e0:	7833      	ldrb	r3, [r6, #0]
 80041e2:	2b2a      	cmp	r3, #42	; 0x2a
 80041e4:	d016      	beq.n	8004214 <_svfiprintf_r+0xf8>
 80041e6:	0035      	movs	r5, r6
 80041e8:	2100      	movs	r1, #0
 80041ea:	200a      	movs	r0, #10
 80041ec:	68e3      	ldr	r3, [r4, #12]
 80041ee:	782a      	ldrb	r2, [r5, #0]
 80041f0:	1c6e      	adds	r6, r5, #1
 80041f2:	3a30      	subs	r2, #48	; 0x30
 80041f4:	2a09      	cmp	r2, #9
 80041f6:	d94e      	bls.n	8004296 <_svfiprintf_r+0x17a>
 80041f8:	2900      	cmp	r1, #0
 80041fa:	d111      	bne.n	8004220 <_svfiprintf_r+0x104>
 80041fc:	e017      	b.n	800422e <_svfiprintf_r+0x112>
 80041fe:	3501      	adds	r5, #1
 8004200:	e7b0      	b.n	8004164 <_svfiprintf_r+0x48>
 8004202:	4b41      	ldr	r3, [pc, #260]	; (8004308 <_svfiprintf_r+0x1ec>)
 8004204:	6822      	ldr	r2, [r4, #0]
 8004206:	1ac0      	subs	r0, r0, r3
 8004208:	2301      	movs	r3, #1
 800420a:	4083      	lsls	r3, r0
 800420c:	4313      	orrs	r3, r2
 800420e:	002e      	movs	r6, r5
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	e7ce      	b.n	80041b2 <_svfiprintf_r+0x96>
 8004214:	9b07      	ldr	r3, [sp, #28]
 8004216:	1d19      	adds	r1, r3, #4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	9107      	str	r1, [sp, #28]
 800421c:	2b00      	cmp	r3, #0
 800421e:	db01      	blt.n	8004224 <_svfiprintf_r+0x108>
 8004220:	930b      	str	r3, [sp, #44]	; 0x2c
 8004222:	e004      	b.n	800422e <_svfiprintf_r+0x112>
 8004224:	425b      	negs	r3, r3
 8004226:	60e3      	str	r3, [r4, #12]
 8004228:	2302      	movs	r3, #2
 800422a:	4313      	orrs	r3, r2
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	782b      	ldrb	r3, [r5, #0]
 8004230:	2b2e      	cmp	r3, #46	; 0x2e
 8004232:	d10a      	bne.n	800424a <_svfiprintf_r+0x12e>
 8004234:	786b      	ldrb	r3, [r5, #1]
 8004236:	2b2a      	cmp	r3, #42	; 0x2a
 8004238:	d135      	bne.n	80042a6 <_svfiprintf_r+0x18a>
 800423a:	9b07      	ldr	r3, [sp, #28]
 800423c:	3502      	adds	r5, #2
 800423e:	1d1a      	adds	r2, r3, #4
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	9207      	str	r2, [sp, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	db2b      	blt.n	80042a0 <_svfiprintf_r+0x184>
 8004248:	9309      	str	r3, [sp, #36]	; 0x24
 800424a:	4e30      	ldr	r6, [pc, #192]	; (800430c <_svfiprintf_r+0x1f0>)
 800424c:	2203      	movs	r2, #3
 800424e:	0030      	movs	r0, r6
 8004250:	7829      	ldrb	r1, [r5, #0]
 8004252:	f000 fe5b 	bl	8004f0c <memchr>
 8004256:	2800      	cmp	r0, #0
 8004258:	d006      	beq.n	8004268 <_svfiprintf_r+0x14c>
 800425a:	2340      	movs	r3, #64	; 0x40
 800425c:	1b80      	subs	r0, r0, r6
 800425e:	4083      	lsls	r3, r0
 8004260:	6822      	ldr	r2, [r4, #0]
 8004262:	3501      	adds	r5, #1
 8004264:	4313      	orrs	r3, r2
 8004266:	6023      	str	r3, [r4, #0]
 8004268:	7829      	ldrb	r1, [r5, #0]
 800426a:	2206      	movs	r2, #6
 800426c:	4828      	ldr	r0, [pc, #160]	; (8004310 <_svfiprintf_r+0x1f4>)
 800426e:	1c6e      	adds	r6, r5, #1
 8004270:	7621      	strb	r1, [r4, #24]
 8004272:	f000 fe4b 	bl	8004f0c <memchr>
 8004276:	2800      	cmp	r0, #0
 8004278:	d03c      	beq.n	80042f4 <_svfiprintf_r+0x1d8>
 800427a:	4b26      	ldr	r3, [pc, #152]	; (8004314 <_svfiprintf_r+0x1f8>)
 800427c:	2b00      	cmp	r3, #0
 800427e:	d125      	bne.n	80042cc <_svfiprintf_r+0x1b0>
 8004280:	2207      	movs	r2, #7
 8004282:	9b07      	ldr	r3, [sp, #28]
 8004284:	3307      	adds	r3, #7
 8004286:	4393      	bics	r3, r2
 8004288:	3308      	adds	r3, #8
 800428a:	9307      	str	r3, [sp, #28]
 800428c:	6963      	ldr	r3, [r4, #20]
 800428e:	9a04      	ldr	r2, [sp, #16]
 8004290:	189b      	adds	r3, r3, r2
 8004292:	6163      	str	r3, [r4, #20]
 8004294:	e765      	b.n	8004162 <_svfiprintf_r+0x46>
 8004296:	4343      	muls	r3, r0
 8004298:	0035      	movs	r5, r6
 800429a:	2101      	movs	r1, #1
 800429c:	189b      	adds	r3, r3, r2
 800429e:	e7a6      	b.n	80041ee <_svfiprintf_r+0xd2>
 80042a0:	2301      	movs	r3, #1
 80042a2:	425b      	negs	r3, r3
 80042a4:	e7d0      	b.n	8004248 <_svfiprintf_r+0x12c>
 80042a6:	2300      	movs	r3, #0
 80042a8:	200a      	movs	r0, #10
 80042aa:	001a      	movs	r2, r3
 80042ac:	3501      	adds	r5, #1
 80042ae:	6063      	str	r3, [r4, #4]
 80042b0:	7829      	ldrb	r1, [r5, #0]
 80042b2:	1c6e      	adds	r6, r5, #1
 80042b4:	3930      	subs	r1, #48	; 0x30
 80042b6:	2909      	cmp	r1, #9
 80042b8:	d903      	bls.n	80042c2 <_svfiprintf_r+0x1a6>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0c5      	beq.n	800424a <_svfiprintf_r+0x12e>
 80042be:	9209      	str	r2, [sp, #36]	; 0x24
 80042c0:	e7c3      	b.n	800424a <_svfiprintf_r+0x12e>
 80042c2:	4342      	muls	r2, r0
 80042c4:	0035      	movs	r5, r6
 80042c6:	2301      	movs	r3, #1
 80042c8:	1852      	adds	r2, r2, r1
 80042ca:	e7f1      	b.n	80042b0 <_svfiprintf_r+0x194>
 80042cc:	ab07      	add	r3, sp, #28
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	003a      	movs	r2, r7
 80042d2:	0021      	movs	r1, r4
 80042d4:	4b10      	ldr	r3, [pc, #64]	; (8004318 <_svfiprintf_r+0x1fc>)
 80042d6:	9803      	ldr	r0, [sp, #12]
 80042d8:	e000      	b.n	80042dc <_svfiprintf_r+0x1c0>
 80042da:	bf00      	nop
 80042dc:	9004      	str	r0, [sp, #16]
 80042de:	9b04      	ldr	r3, [sp, #16]
 80042e0:	3301      	adds	r3, #1
 80042e2:	d1d3      	bne.n	800428c <_svfiprintf_r+0x170>
 80042e4:	89bb      	ldrh	r3, [r7, #12]
 80042e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80042e8:	065b      	lsls	r3, r3, #25
 80042ea:	d400      	bmi.n	80042ee <_svfiprintf_r+0x1d2>
 80042ec:	e72d      	b.n	800414a <_svfiprintf_r+0x2e>
 80042ee:	2001      	movs	r0, #1
 80042f0:	4240      	negs	r0, r0
 80042f2:	e72a      	b.n	800414a <_svfiprintf_r+0x2e>
 80042f4:	ab07      	add	r3, sp, #28
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	003a      	movs	r2, r7
 80042fa:	0021      	movs	r1, r4
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <_svfiprintf_r+0x1fc>)
 80042fe:	9803      	ldr	r0, [sp, #12]
 8004300:	f000 f9de 	bl	80046c0 <_printf_i>
 8004304:	e7ea      	b.n	80042dc <_svfiprintf_r+0x1c0>
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	08005338 	.word	0x08005338
 800430c:	0800533e 	.word	0x0800533e
 8004310:	08005342 	.word	0x08005342
 8004314:	00000000 	.word	0x00000000
 8004318:	08004059 	.word	0x08004059

0800431c <__sfputc_r>:
 800431c:	6893      	ldr	r3, [r2, #8]
 800431e:	b510      	push	{r4, lr}
 8004320:	3b01      	subs	r3, #1
 8004322:	6093      	str	r3, [r2, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	da04      	bge.n	8004332 <__sfputc_r+0x16>
 8004328:	6994      	ldr	r4, [r2, #24]
 800432a:	42a3      	cmp	r3, r4
 800432c:	db07      	blt.n	800433e <__sfputc_r+0x22>
 800432e:	290a      	cmp	r1, #10
 8004330:	d005      	beq.n	800433e <__sfputc_r+0x22>
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	1c58      	adds	r0, r3, #1
 8004336:	6010      	str	r0, [r2, #0]
 8004338:	7019      	strb	r1, [r3, #0]
 800433a:	0008      	movs	r0, r1
 800433c:	bd10      	pop	{r4, pc}
 800433e:	f000 fad1 	bl	80048e4 <__swbuf_r>
 8004342:	0001      	movs	r1, r0
 8004344:	e7f9      	b.n	800433a <__sfputc_r+0x1e>

08004346 <__sfputs_r>:
 8004346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004348:	0006      	movs	r6, r0
 800434a:	000f      	movs	r7, r1
 800434c:	0014      	movs	r4, r2
 800434e:	18d5      	adds	r5, r2, r3
 8004350:	42ac      	cmp	r4, r5
 8004352:	d101      	bne.n	8004358 <__sfputs_r+0x12>
 8004354:	2000      	movs	r0, #0
 8004356:	e007      	b.n	8004368 <__sfputs_r+0x22>
 8004358:	7821      	ldrb	r1, [r4, #0]
 800435a:	003a      	movs	r2, r7
 800435c:	0030      	movs	r0, r6
 800435e:	f7ff ffdd 	bl	800431c <__sfputc_r>
 8004362:	3401      	adds	r4, #1
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d1f3      	bne.n	8004350 <__sfputs_r+0xa>
 8004368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800436c <_vfiprintf_r>:
 800436c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800436e:	b0a1      	sub	sp, #132	; 0x84
 8004370:	0006      	movs	r6, r0
 8004372:	000c      	movs	r4, r1
 8004374:	001f      	movs	r7, r3
 8004376:	9203      	str	r2, [sp, #12]
 8004378:	2800      	cmp	r0, #0
 800437a:	d004      	beq.n	8004386 <_vfiprintf_r+0x1a>
 800437c:	6983      	ldr	r3, [r0, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <_vfiprintf_r+0x1a>
 8004382:	f000 fcb3 	bl	8004cec <__sinit>
 8004386:	4b8e      	ldr	r3, [pc, #568]	; (80045c0 <_vfiprintf_r+0x254>)
 8004388:	429c      	cmp	r4, r3
 800438a:	d11c      	bne.n	80043c6 <_vfiprintf_r+0x5a>
 800438c:	6874      	ldr	r4, [r6, #4]
 800438e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004390:	07db      	lsls	r3, r3, #31
 8004392:	d405      	bmi.n	80043a0 <_vfiprintf_r+0x34>
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	059b      	lsls	r3, r3, #22
 8004398:	d402      	bmi.n	80043a0 <_vfiprintf_r+0x34>
 800439a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800439c:	f000 fd47 	bl	8004e2e <__retarget_lock_acquire_recursive>
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	071b      	lsls	r3, r3, #28
 80043a4:	d502      	bpl.n	80043ac <_vfiprintf_r+0x40>
 80043a6:	6923      	ldr	r3, [r4, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d11d      	bne.n	80043e8 <_vfiprintf_r+0x7c>
 80043ac:	0021      	movs	r1, r4
 80043ae:	0030      	movs	r0, r6
 80043b0:	f000 faee 	bl	8004990 <__swsetup_r>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d017      	beq.n	80043e8 <_vfiprintf_r+0x7c>
 80043b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043ba:	07db      	lsls	r3, r3, #31
 80043bc:	d50d      	bpl.n	80043da <_vfiprintf_r+0x6e>
 80043be:	2001      	movs	r0, #1
 80043c0:	4240      	negs	r0, r0
 80043c2:	b021      	add	sp, #132	; 0x84
 80043c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c6:	4b7f      	ldr	r3, [pc, #508]	; (80045c4 <_vfiprintf_r+0x258>)
 80043c8:	429c      	cmp	r4, r3
 80043ca:	d101      	bne.n	80043d0 <_vfiprintf_r+0x64>
 80043cc:	68b4      	ldr	r4, [r6, #8]
 80043ce:	e7de      	b.n	800438e <_vfiprintf_r+0x22>
 80043d0:	4b7d      	ldr	r3, [pc, #500]	; (80045c8 <_vfiprintf_r+0x25c>)
 80043d2:	429c      	cmp	r4, r3
 80043d4:	d1db      	bne.n	800438e <_vfiprintf_r+0x22>
 80043d6:	68f4      	ldr	r4, [r6, #12]
 80043d8:	e7d9      	b.n	800438e <_vfiprintf_r+0x22>
 80043da:	89a3      	ldrh	r3, [r4, #12]
 80043dc:	059b      	lsls	r3, r3, #22
 80043de:	d4ee      	bmi.n	80043be <_vfiprintf_r+0x52>
 80043e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043e2:	f000 fd25 	bl	8004e30 <__retarget_lock_release_recursive>
 80043e6:	e7ea      	b.n	80043be <_vfiprintf_r+0x52>
 80043e8:	2300      	movs	r3, #0
 80043ea:	ad08      	add	r5, sp, #32
 80043ec:	616b      	str	r3, [r5, #20]
 80043ee:	3320      	adds	r3, #32
 80043f0:	766b      	strb	r3, [r5, #25]
 80043f2:	3310      	adds	r3, #16
 80043f4:	76ab      	strb	r3, [r5, #26]
 80043f6:	9707      	str	r7, [sp, #28]
 80043f8:	9f03      	ldr	r7, [sp, #12]
 80043fa:	783b      	ldrb	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <_vfiprintf_r+0x98>
 8004400:	2b25      	cmp	r3, #37	; 0x25
 8004402:	d14e      	bne.n	80044a2 <_vfiprintf_r+0x136>
 8004404:	9b03      	ldr	r3, [sp, #12]
 8004406:	1afb      	subs	r3, r7, r3
 8004408:	9305      	str	r3, [sp, #20]
 800440a:	9b03      	ldr	r3, [sp, #12]
 800440c:	429f      	cmp	r7, r3
 800440e:	d00d      	beq.n	800442c <_vfiprintf_r+0xc0>
 8004410:	9b05      	ldr	r3, [sp, #20]
 8004412:	0021      	movs	r1, r4
 8004414:	0030      	movs	r0, r6
 8004416:	9a03      	ldr	r2, [sp, #12]
 8004418:	f7ff ff95 	bl	8004346 <__sfputs_r>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d100      	bne.n	8004422 <_vfiprintf_r+0xb6>
 8004420:	e0b5      	b.n	800458e <_vfiprintf_r+0x222>
 8004422:	696a      	ldr	r2, [r5, #20]
 8004424:	9b05      	ldr	r3, [sp, #20]
 8004426:	4694      	mov	ip, r2
 8004428:	4463      	add	r3, ip
 800442a:	616b      	str	r3, [r5, #20]
 800442c:	783b      	ldrb	r3, [r7, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d100      	bne.n	8004434 <_vfiprintf_r+0xc8>
 8004432:	e0ac      	b.n	800458e <_vfiprintf_r+0x222>
 8004434:	2201      	movs	r2, #1
 8004436:	1c7b      	adds	r3, r7, #1
 8004438:	9303      	str	r3, [sp, #12]
 800443a:	2300      	movs	r3, #0
 800443c:	4252      	negs	r2, r2
 800443e:	606a      	str	r2, [r5, #4]
 8004440:	a904      	add	r1, sp, #16
 8004442:	3254      	adds	r2, #84	; 0x54
 8004444:	1852      	adds	r2, r2, r1
 8004446:	602b      	str	r3, [r5, #0]
 8004448:	60eb      	str	r3, [r5, #12]
 800444a:	60ab      	str	r3, [r5, #8]
 800444c:	7013      	strb	r3, [r2, #0]
 800444e:	65ab      	str	r3, [r5, #88]	; 0x58
 8004450:	9b03      	ldr	r3, [sp, #12]
 8004452:	2205      	movs	r2, #5
 8004454:	7819      	ldrb	r1, [r3, #0]
 8004456:	485d      	ldr	r0, [pc, #372]	; (80045cc <_vfiprintf_r+0x260>)
 8004458:	f000 fd58 	bl	8004f0c <memchr>
 800445c:	9b03      	ldr	r3, [sp, #12]
 800445e:	1c5f      	adds	r7, r3, #1
 8004460:	2800      	cmp	r0, #0
 8004462:	d120      	bne.n	80044a6 <_vfiprintf_r+0x13a>
 8004464:	682a      	ldr	r2, [r5, #0]
 8004466:	06d3      	lsls	r3, r2, #27
 8004468:	d504      	bpl.n	8004474 <_vfiprintf_r+0x108>
 800446a:	2353      	movs	r3, #83	; 0x53
 800446c:	a904      	add	r1, sp, #16
 800446e:	185b      	adds	r3, r3, r1
 8004470:	2120      	movs	r1, #32
 8004472:	7019      	strb	r1, [r3, #0]
 8004474:	0713      	lsls	r3, r2, #28
 8004476:	d504      	bpl.n	8004482 <_vfiprintf_r+0x116>
 8004478:	2353      	movs	r3, #83	; 0x53
 800447a:	a904      	add	r1, sp, #16
 800447c:	185b      	adds	r3, r3, r1
 800447e:	212b      	movs	r1, #43	; 0x2b
 8004480:	7019      	strb	r1, [r3, #0]
 8004482:	9b03      	ldr	r3, [sp, #12]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b2a      	cmp	r3, #42	; 0x2a
 8004488:	d016      	beq.n	80044b8 <_vfiprintf_r+0x14c>
 800448a:	2100      	movs	r1, #0
 800448c:	68eb      	ldr	r3, [r5, #12]
 800448e:	9f03      	ldr	r7, [sp, #12]
 8004490:	783a      	ldrb	r2, [r7, #0]
 8004492:	1c78      	adds	r0, r7, #1
 8004494:	3a30      	subs	r2, #48	; 0x30
 8004496:	4684      	mov	ip, r0
 8004498:	2a09      	cmp	r2, #9
 800449a:	d94f      	bls.n	800453c <_vfiprintf_r+0x1d0>
 800449c:	2900      	cmp	r1, #0
 800449e:	d111      	bne.n	80044c4 <_vfiprintf_r+0x158>
 80044a0:	e017      	b.n	80044d2 <_vfiprintf_r+0x166>
 80044a2:	3701      	adds	r7, #1
 80044a4:	e7a9      	b.n	80043fa <_vfiprintf_r+0x8e>
 80044a6:	4b49      	ldr	r3, [pc, #292]	; (80045cc <_vfiprintf_r+0x260>)
 80044a8:	682a      	ldr	r2, [r5, #0]
 80044aa:	1ac0      	subs	r0, r0, r3
 80044ac:	2301      	movs	r3, #1
 80044ae:	4083      	lsls	r3, r0
 80044b0:	4313      	orrs	r3, r2
 80044b2:	602b      	str	r3, [r5, #0]
 80044b4:	9703      	str	r7, [sp, #12]
 80044b6:	e7cb      	b.n	8004450 <_vfiprintf_r+0xe4>
 80044b8:	9b07      	ldr	r3, [sp, #28]
 80044ba:	1d19      	adds	r1, r3, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	9107      	str	r1, [sp, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	db01      	blt.n	80044c8 <_vfiprintf_r+0x15c>
 80044c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80044c6:	e004      	b.n	80044d2 <_vfiprintf_r+0x166>
 80044c8:	425b      	negs	r3, r3
 80044ca:	60eb      	str	r3, [r5, #12]
 80044cc:	2302      	movs	r3, #2
 80044ce:	4313      	orrs	r3, r2
 80044d0:	602b      	str	r3, [r5, #0]
 80044d2:	783b      	ldrb	r3, [r7, #0]
 80044d4:	2b2e      	cmp	r3, #46	; 0x2e
 80044d6:	d10a      	bne.n	80044ee <_vfiprintf_r+0x182>
 80044d8:	787b      	ldrb	r3, [r7, #1]
 80044da:	2b2a      	cmp	r3, #42	; 0x2a
 80044dc:	d137      	bne.n	800454e <_vfiprintf_r+0x1e2>
 80044de:	9b07      	ldr	r3, [sp, #28]
 80044e0:	3702      	adds	r7, #2
 80044e2:	1d1a      	adds	r2, r3, #4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	9207      	str	r2, [sp, #28]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	db2d      	blt.n	8004548 <_vfiprintf_r+0x1dc>
 80044ec:	9309      	str	r3, [sp, #36]	; 0x24
 80044ee:	2203      	movs	r2, #3
 80044f0:	7839      	ldrb	r1, [r7, #0]
 80044f2:	4837      	ldr	r0, [pc, #220]	; (80045d0 <_vfiprintf_r+0x264>)
 80044f4:	f000 fd0a 	bl	8004f0c <memchr>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	d007      	beq.n	800450c <_vfiprintf_r+0x1a0>
 80044fc:	4b34      	ldr	r3, [pc, #208]	; (80045d0 <_vfiprintf_r+0x264>)
 80044fe:	682a      	ldr	r2, [r5, #0]
 8004500:	1ac0      	subs	r0, r0, r3
 8004502:	2340      	movs	r3, #64	; 0x40
 8004504:	4083      	lsls	r3, r0
 8004506:	4313      	orrs	r3, r2
 8004508:	3701      	adds	r7, #1
 800450a:	602b      	str	r3, [r5, #0]
 800450c:	7839      	ldrb	r1, [r7, #0]
 800450e:	1c7b      	adds	r3, r7, #1
 8004510:	2206      	movs	r2, #6
 8004512:	4830      	ldr	r0, [pc, #192]	; (80045d4 <_vfiprintf_r+0x268>)
 8004514:	9303      	str	r3, [sp, #12]
 8004516:	7629      	strb	r1, [r5, #24]
 8004518:	f000 fcf8 	bl	8004f0c <memchr>
 800451c:	2800      	cmp	r0, #0
 800451e:	d045      	beq.n	80045ac <_vfiprintf_r+0x240>
 8004520:	4b2d      	ldr	r3, [pc, #180]	; (80045d8 <_vfiprintf_r+0x26c>)
 8004522:	2b00      	cmp	r3, #0
 8004524:	d127      	bne.n	8004576 <_vfiprintf_r+0x20a>
 8004526:	2207      	movs	r2, #7
 8004528:	9b07      	ldr	r3, [sp, #28]
 800452a:	3307      	adds	r3, #7
 800452c:	4393      	bics	r3, r2
 800452e:	3308      	adds	r3, #8
 8004530:	9307      	str	r3, [sp, #28]
 8004532:	696b      	ldr	r3, [r5, #20]
 8004534:	9a04      	ldr	r2, [sp, #16]
 8004536:	189b      	adds	r3, r3, r2
 8004538:	616b      	str	r3, [r5, #20]
 800453a:	e75d      	b.n	80043f8 <_vfiprintf_r+0x8c>
 800453c:	210a      	movs	r1, #10
 800453e:	434b      	muls	r3, r1
 8004540:	4667      	mov	r7, ip
 8004542:	189b      	adds	r3, r3, r2
 8004544:	3909      	subs	r1, #9
 8004546:	e7a3      	b.n	8004490 <_vfiprintf_r+0x124>
 8004548:	2301      	movs	r3, #1
 800454a:	425b      	negs	r3, r3
 800454c:	e7ce      	b.n	80044ec <_vfiprintf_r+0x180>
 800454e:	2300      	movs	r3, #0
 8004550:	001a      	movs	r2, r3
 8004552:	3701      	adds	r7, #1
 8004554:	606b      	str	r3, [r5, #4]
 8004556:	7839      	ldrb	r1, [r7, #0]
 8004558:	1c78      	adds	r0, r7, #1
 800455a:	3930      	subs	r1, #48	; 0x30
 800455c:	4684      	mov	ip, r0
 800455e:	2909      	cmp	r1, #9
 8004560:	d903      	bls.n	800456a <_vfiprintf_r+0x1fe>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0c3      	beq.n	80044ee <_vfiprintf_r+0x182>
 8004566:	9209      	str	r2, [sp, #36]	; 0x24
 8004568:	e7c1      	b.n	80044ee <_vfiprintf_r+0x182>
 800456a:	230a      	movs	r3, #10
 800456c:	435a      	muls	r2, r3
 800456e:	4667      	mov	r7, ip
 8004570:	1852      	adds	r2, r2, r1
 8004572:	3b09      	subs	r3, #9
 8004574:	e7ef      	b.n	8004556 <_vfiprintf_r+0x1ea>
 8004576:	ab07      	add	r3, sp, #28
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	0022      	movs	r2, r4
 800457c:	0029      	movs	r1, r5
 800457e:	0030      	movs	r0, r6
 8004580:	4b16      	ldr	r3, [pc, #88]	; (80045dc <_vfiprintf_r+0x270>)
 8004582:	e000      	b.n	8004586 <_vfiprintf_r+0x21a>
 8004584:	bf00      	nop
 8004586:	9004      	str	r0, [sp, #16]
 8004588:	9b04      	ldr	r3, [sp, #16]
 800458a:	3301      	adds	r3, #1
 800458c:	d1d1      	bne.n	8004532 <_vfiprintf_r+0x1c6>
 800458e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004590:	07db      	lsls	r3, r3, #31
 8004592:	d405      	bmi.n	80045a0 <_vfiprintf_r+0x234>
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	059b      	lsls	r3, r3, #22
 8004598:	d402      	bmi.n	80045a0 <_vfiprintf_r+0x234>
 800459a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800459c:	f000 fc48 	bl	8004e30 <__retarget_lock_release_recursive>
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	065b      	lsls	r3, r3, #25
 80045a4:	d500      	bpl.n	80045a8 <_vfiprintf_r+0x23c>
 80045a6:	e70a      	b.n	80043be <_vfiprintf_r+0x52>
 80045a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80045aa:	e70a      	b.n	80043c2 <_vfiprintf_r+0x56>
 80045ac:	ab07      	add	r3, sp, #28
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	0022      	movs	r2, r4
 80045b2:	0029      	movs	r1, r5
 80045b4:	0030      	movs	r0, r6
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <_vfiprintf_r+0x270>)
 80045b8:	f000 f882 	bl	80046c0 <_printf_i>
 80045bc:	e7e3      	b.n	8004586 <_vfiprintf_r+0x21a>
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	0800538c 	.word	0x0800538c
 80045c4:	080053ac 	.word	0x080053ac
 80045c8:	0800536c 	.word	0x0800536c
 80045cc:	08005338 	.word	0x08005338
 80045d0:	0800533e 	.word	0x0800533e
 80045d4:	08005342 	.word	0x08005342
 80045d8:	00000000 	.word	0x00000000
 80045dc:	08004347 	.word	0x08004347

080045e0 <_printf_common>:
 80045e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045e2:	0015      	movs	r5, r2
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	688a      	ldr	r2, [r1, #8]
 80045e8:	690b      	ldr	r3, [r1, #16]
 80045ea:	000c      	movs	r4, r1
 80045ec:	9000      	str	r0, [sp, #0]
 80045ee:	4293      	cmp	r3, r2
 80045f0:	da00      	bge.n	80045f4 <_printf_common+0x14>
 80045f2:	0013      	movs	r3, r2
 80045f4:	0022      	movs	r2, r4
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	3243      	adds	r2, #67	; 0x43
 80045fa:	7812      	ldrb	r2, [r2, #0]
 80045fc:	2a00      	cmp	r2, #0
 80045fe:	d001      	beq.n	8004604 <_printf_common+0x24>
 8004600:	3301      	adds	r3, #1
 8004602:	602b      	str	r3, [r5, #0]
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	069b      	lsls	r3, r3, #26
 8004608:	d502      	bpl.n	8004610 <_printf_common+0x30>
 800460a:	682b      	ldr	r3, [r5, #0]
 800460c:	3302      	adds	r3, #2
 800460e:	602b      	str	r3, [r5, #0]
 8004610:	6822      	ldr	r2, [r4, #0]
 8004612:	2306      	movs	r3, #6
 8004614:	0017      	movs	r7, r2
 8004616:	401f      	ands	r7, r3
 8004618:	421a      	tst	r2, r3
 800461a:	d027      	beq.n	800466c <_printf_common+0x8c>
 800461c:	0023      	movs	r3, r4
 800461e:	3343      	adds	r3, #67	; 0x43
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	1e5a      	subs	r2, r3, #1
 8004624:	4193      	sbcs	r3, r2
 8004626:	6822      	ldr	r2, [r4, #0]
 8004628:	0692      	lsls	r2, r2, #26
 800462a:	d430      	bmi.n	800468e <_printf_common+0xae>
 800462c:	0022      	movs	r2, r4
 800462e:	9901      	ldr	r1, [sp, #4]
 8004630:	9800      	ldr	r0, [sp, #0]
 8004632:	9e08      	ldr	r6, [sp, #32]
 8004634:	3243      	adds	r2, #67	; 0x43
 8004636:	47b0      	blx	r6
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d025      	beq.n	8004688 <_printf_common+0xa8>
 800463c:	2306      	movs	r3, #6
 800463e:	6820      	ldr	r0, [r4, #0]
 8004640:	682a      	ldr	r2, [r5, #0]
 8004642:	68e1      	ldr	r1, [r4, #12]
 8004644:	2500      	movs	r5, #0
 8004646:	4003      	ands	r3, r0
 8004648:	2b04      	cmp	r3, #4
 800464a:	d103      	bne.n	8004654 <_printf_common+0x74>
 800464c:	1a8d      	subs	r5, r1, r2
 800464e:	43eb      	mvns	r3, r5
 8004650:	17db      	asrs	r3, r3, #31
 8004652:	401d      	ands	r5, r3
 8004654:	68a3      	ldr	r3, [r4, #8]
 8004656:	6922      	ldr	r2, [r4, #16]
 8004658:	4293      	cmp	r3, r2
 800465a:	dd01      	ble.n	8004660 <_printf_common+0x80>
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	18ed      	adds	r5, r5, r3
 8004660:	2700      	movs	r7, #0
 8004662:	42bd      	cmp	r5, r7
 8004664:	d120      	bne.n	80046a8 <_printf_common+0xc8>
 8004666:	2000      	movs	r0, #0
 8004668:	e010      	b.n	800468c <_printf_common+0xac>
 800466a:	3701      	adds	r7, #1
 800466c:	68e3      	ldr	r3, [r4, #12]
 800466e:	682a      	ldr	r2, [r5, #0]
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	42bb      	cmp	r3, r7
 8004674:	ddd2      	ble.n	800461c <_printf_common+0x3c>
 8004676:	0022      	movs	r2, r4
 8004678:	2301      	movs	r3, #1
 800467a:	9901      	ldr	r1, [sp, #4]
 800467c:	9800      	ldr	r0, [sp, #0]
 800467e:	9e08      	ldr	r6, [sp, #32]
 8004680:	3219      	adds	r2, #25
 8004682:	47b0      	blx	r6
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	d1f0      	bne.n	800466a <_printf_common+0x8a>
 8004688:	2001      	movs	r0, #1
 800468a:	4240      	negs	r0, r0
 800468c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800468e:	2030      	movs	r0, #48	; 0x30
 8004690:	18e1      	adds	r1, r4, r3
 8004692:	3143      	adds	r1, #67	; 0x43
 8004694:	7008      	strb	r0, [r1, #0]
 8004696:	0021      	movs	r1, r4
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	3145      	adds	r1, #69	; 0x45
 800469c:	7809      	ldrb	r1, [r1, #0]
 800469e:	18a2      	adds	r2, r4, r2
 80046a0:	3243      	adds	r2, #67	; 0x43
 80046a2:	3302      	adds	r3, #2
 80046a4:	7011      	strb	r1, [r2, #0]
 80046a6:	e7c1      	b.n	800462c <_printf_common+0x4c>
 80046a8:	0022      	movs	r2, r4
 80046aa:	2301      	movs	r3, #1
 80046ac:	9901      	ldr	r1, [sp, #4]
 80046ae:	9800      	ldr	r0, [sp, #0]
 80046b0:	9e08      	ldr	r6, [sp, #32]
 80046b2:	321a      	adds	r2, #26
 80046b4:	47b0      	blx	r6
 80046b6:	1c43      	adds	r3, r0, #1
 80046b8:	d0e6      	beq.n	8004688 <_printf_common+0xa8>
 80046ba:	3701      	adds	r7, #1
 80046bc:	e7d1      	b.n	8004662 <_printf_common+0x82>
	...

080046c0 <_printf_i>:
 80046c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c2:	b08b      	sub	sp, #44	; 0x2c
 80046c4:	9206      	str	r2, [sp, #24]
 80046c6:	000a      	movs	r2, r1
 80046c8:	3243      	adds	r2, #67	; 0x43
 80046ca:	9307      	str	r3, [sp, #28]
 80046cc:	9005      	str	r0, [sp, #20]
 80046ce:	9204      	str	r2, [sp, #16]
 80046d0:	7e0a      	ldrb	r2, [r1, #24]
 80046d2:	000c      	movs	r4, r1
 80046d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046d6:	2a78      	cmp	r2, #120	; 0x78
 80046d8:	d807      	bhi.n	80046ea <_printf_i+0x2a>
 80046da:	2a62      	cmp	r2, #98	; 0x62
 80046dc:	d809      	bhi.n	80046f2 <_printf_i+0x32>
 80046de:	2a00      	cmp	r2, #0
 80046e0:	d100      	bne.n	80046e4 <_printf_i+0x24>
 80046e2:	e0c1      	b.n	8004868 <_printf_i+0x1a8>
 80046e4:	2a58      	cmp	r2, #88	; 0x58
 80046e6:	d100      	bne.n	80046ea <_printf_i+0x2a>
 80046e8:	e08c      	b.n	8004804 <_printf_i+0x144>
 80046ea:	0026      	movs	r6, r4
 80046ec:	3642      	adds	r6, #66	; 0x42
 80046ee:	7032      	strb	r2, [r6, #0]
 80046f0:	e022      	b.n	8004738 <_printf_i+0x78>
 80046f2:	0010      	movs	r0, r2
 80046f4:	3863      	subs	r0, #99	; 0x63
 80046f6:	2815      	cmp	r0, #21
 80046f8:	d8f7      	bhi.n	80046ea <_printf_i+0x2a>
 80046fa:	f7fb fd0d 	bl	8000118 <__gnu_thumb1_case_shi>
 80046fe:	0016      	.short	0x0016
 8004700:	fff6001f 	.word	0xfff6001f
 8004704:	fff6fff6 	.word	0xfff6fff6
 8004708:	001ffff6 	.word	0x001ffff6
 800470c:	fff6fff6 	.word	0xfff6fff6
 8004710:	fff6fff6 	.word	0xfff6fff6
 8004714:	003600a8 	.word	0x003600a8
 8004718:	fff6009a 	.word	0xfff6009a
 800471c:	00b9fff6 	.word	0x00b9fff6
 8004720:	0036fff6 	.word	0x0036fff6
 8004724:	fff6fff6 	.word	0xfff6fff6
 8004728:	009e      	.short	0x009e
 800472a:	0026      	movs	r6, r4
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	3642      	adds	r6, #66	; 0x42
 8004730:	1d11      	adds	r1, r2, #4
 8004732:	6019      	str	r1, [r3, #0]
 8004734:	6813      	ldr	r3, [r2, #0]
 8004736:	7033      	strb	r3, [r6, #0]
 8004738:	2301      	movs	r3, #1
 800473a:	e0a7      	b.n	800488c <_printf_i+0x1cc>
 800473c:	6808      	ldr	r0, [r1, #0]
 800473e:	6819      	ldr	r1, [r3, #0]
 8004740:	1d0a      	adds	r2, r1, #4
 8004742:	0605      	lsls	r5, r0, #24
 8004744:	d50b      	bpl.n	800475e <_printf_i+0x9e>
 8004746:	680d      	ldr	r5, [r1, #0]
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	2d00      	cmp	r5, #0
 800474c:	da03      	bge.n	8004756 <_printf_i+0x96>
 800474e:	232d      	movs	r3, #45	; 0x2d
 8004750:	9a04      	ldr	r2, [sp, #16]
 8004752:	426d      	negs	r5, r5
 8004754:	7013      	strb	r3, [r2, #0]
 8004756:	4b61      	ldr	r3, [pc, #388]	; (80048dc <_printf_i+0x21c>)
 8004758:	270a      	movs	r7, #10
 800475a:	9303      	str	r3, [sp, #12]
 800475c:	e01b      	b.n	8004796 <_printf_i+0xd6>
 800475e:	680d      	ldr	r5, [r1, #0]
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	0641      	lsls	r1, r0, #25
 8004764:	d5f1      	bpl.n	800474a <_printf_i+0x8a>
 8004766:	b22d      	sxth	r5, r5
 8004768:	e7ef      	b.n	800474a <_printf_i+0x8a>
 800476a:	680d      	ldr	r5, [r1, #0]
 800476c:	6819      	ldr	r1, [r3, #0]
 800476e:	1d08      	adds	r0, r1, #4
 8004770:	6018      	str	r0, [r3, #0]
 8004772:	062e      	lsls	r6, r5, #24
 8004774:	d501      	bpl.n	800477a <_printf_i+0xba>
 8004776:	680d      	ldr	r5, [r1, #0]
 8004778:	e003      	b.n	8004782 <_printf_i+0xc2>
 800477a:	066d      	lsls	r5, r5, #25
 800477c:	d5fb      	bpl.n	8004776 <_printf_i+0xb6>
 800477e:	680d      	ldr	r5, [r1, #0]
 8004780:	b2ad      	uxth	r5, r5
 8004782:	4b56      	ldr	r3, [pc, #344]	; (80048dc <_printf_i+0x21c>)
 8004784:	2708      	movs	r7, #8
 8004786:	9303      	str	r3, [sp, #12]
 8004788:	2a6f      	cmp	r2, #111	; 0x6f
 800478a:	d000      	beq.n	800478e <_printf_i+0xce>
 800478c:	3702      	adds	r7, #2
 800478e:	0023      	movs	r3, r4
 8004790:	2200      	movs	r2, #0
 8004792:	3343      	adds	r3, #67	; 0x43
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	6863      	ldr	r3, [r4, #4]
 8004798:	60a3      	str	r3, [r4, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	db03      	blt.n	80047a6 <_printf_i+0xe6>
 800479e:	2204      	movs	r2, #4
 80047a0:	6821      	ldr	r1, [r4, #0]
 80047a2:	4391      	bics	r1, r2
 80047a4:	6021      	str	r1, [r4, #0]
 80047a6:	2d00      	cmp	r5, #0
 80047a8:	d102      	bne.n	80047b0 <_printf_i+0xf0>
 80047aa:	9e04      	ldr	r6, [sp, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00c      	beq.n	80047ca <_printf_i+0x10a>
 80047b0:	9e04      	ldr	r6, [sp, #16]
 80047b2:	0028      	movs	r0, r5
 80047b4:	0039      	movs	r1, r7
 80047b6:	f7fb fd3f 	bl	8000238 <__aeabi_uidivmod>
 80047ba:	9b03      	ldr	r3, [sp, #12]
 80047bc:	3e01      	subs	r6, #1
 80047be:	5c5b      	ldrb	r3, [r3, r1]
 80047c0:	7033      	strb	r3, [r6, #0]
 80047c2:	002b      	movs	r3, r5
 80047c4:	0005      	movs	r5, r0
 80047c6:	429f      	cmp	r7, r3
 80047c8:	d9f3      	bls.n	80047b2 <_printf_i+0xf2>
 80047ca:	2f08      	cmp	r7, #8
 80047cc:	d109      	bne.n	80047e2 <_printf_i+0x122>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	07db      	lsls	r3, r3, #31
 80047d2:	d506      	bpl.n	80047e2 <_printf_i+0x122>
 80047d4:	6863      	ldr	r3, [r4, #4]
 80047d6:	6922      	ldr	r2, [r4, #16]
 80047d8:	4293      	cmp	r3, r2
 80047da:	dc02      	bgt.n	80047e2 <_printf_i+0x122>
 80047dc:	2330      	movs	r3, #48	; 0x30
 80047de:	3e01      	subs	r6, #1
 80047e0:	7033      	strb	r3, [r6, #0]
 80047e2:	9b04      	ldr	r3, [sp, #16]
 80047e4:	1b9b      	subs	r3, r3, r6
 80047e6:	6123      	str	r3, [r4, #16]
 80047e8:	9b07      	ldr	r3, [sp, #28]
 80047ea:	0021      	movs	r1, r4
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	9805      	ldr	r0, [sp, #20]
 80047f0:	9b06      	ldr	r3, [sp, #24]
 80047f2:	aa09      	add	r2, sp, #36	; 0x24
 80047f4:	f7ff fef4 	bl	80045e0 <_printf_common>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d14c      	bne.n	8004896 <_printf_i+0x1d6>
 80047fc:	2001      	movs	r0, #1
 80047fe:	4240      	negs	r0, r0
 8004800:	b00b      	add	sp, #44	; 0x2c
 8004802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004804:	3145      	adds	r1, #69	; 0x45
 8004806:	700a      	strb	r2, [r1, #0]
 8004808:	4a34      	ldr	r2, [pc, #208]	; (80048dc <_printf_i+0x21c>)
 800480a:	9203      	str	r2, [sp, #12]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	6821      	ldr	r1, [r4, #0]
 8004810:	ca20      	ldmia	r2!, {r5}
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	0608      	lsls	r0, r1, #24
 8004816:	d516      	bpl.n	8004846 <_printf_i+0x186>
 8004818:	07cb      	lsls	r3, r1, #31
 800481a:	d502      	bpl.n	8004822 <_printf_i+0x162>
 800481c:	2320      	movs	r3, #32
 800481e:	4319      	orrs	r1, r3
 8004820:	6021      	str	r1, [r4, #0]
 8004822:	2710      	movs	r7, #16
 8004824:	2d00      	cmp	r5, #0
 8004826:	d1b2      	bne.n	800478e <_printf_i+0xce>
 8004828:	2320      	movs	r3, #32
 800482a:	6822      	ldr	r2, [r4, #0]
 800482c:	439a      	bics	r2, r3
 800482e:	6022      	str	r2, [r4, #0]
 8004830:	e7ad      	b.n	800478e <_printf_i+0xce>
 8004832:	2220      	movs	r2, #32
 8004834:	6809      	ldr	r1, [r1, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	6022      	str	r2, [r4, #0]
 800483a:	0022      	movs	r2, r4
 800483c:	2178      	movs	r1, #120	; 0x78
 800483e:	3245      	adds	r2, #69	; 0x45
 8004840:	7011      	strb	r1, [r2, #0]
 8004842:	4a27      	ldr	r2, [pc, #156]	; (80048e0 <_printf_i+0x220>)
 8004844:	e7e1      	b.n	800480a <_printf_i+0x14a>
 8004846:	0648      	lsls	r0, r1, #25
 8004848:	d5e6      	bpl.n	8004818 <_printf_i+0x158>
 800484a:	b2ad      	uxth	r5, r5
 800484c:	e7e4      	b.n	8004818 <_printf_i+0x158>
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	680d      	ldr	r5, [r1, #0]
 8004852:	1d10      	adds	r0, r2, #4
 8004854:	6949      	ldr	r1, [r1, #20]
 8004856:	6018      	str	r0, [r3, #0]
 8004858:	6813      	ldr	r3, [r2, #0]
 800485a:	062e      	lsls	r6, r5, #24
 800485c:	d501      	bpl.n	8004862 <_printf_i+0x1a2>
 800485e:	6019      	str	r1, [r3, #0]
 8004860:	e002      	b.n	8004868 <_printf_i+0x1a8>
 8004862:	066d      	lsls	r5, r5, #25
 8004864:	d5fb      	bpl.n	800485e <_printf_i+0x19e>
 8004866:	8019      	strh	r1, [r3, #0]
 8004868:	2300      	movs	r3, #0
 800486a:	9e04      	ldr	r6, [sp, #16]
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	e7bb      	b.n	80047e8 <_printf_i+0x128>
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	1d11      	adds	r1, r2, #4
 8004874:	6019      	str	r1, [r3, #0]
 8004876:	6816      	ldr	r6, [r2, #0]
 8004878:	2100      	movs	r1, #0
 800487a:	0030      	movs	r0, r6
 800487c:	6862      	ldr	r2, [r4, #4]
 800487e:	f000 fb45 	bl	8004f0c <memchr>
 8004882:	2800      	cmp	r0, #0
 8004884:	d001      	beq.n	800488a <_printf_i+0x1ca>
 8004886:	1b80      	subs	r0, r0, r6
 8004888:	6060      	str	r0, [r4, #4]
 800488a:	6863      	ldr	r3, [r4, #4]
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	2300      	movs	r3, #0
 8004890:	9a04      	ldr	r2, [sp, #16]
 8004892:	7013      	strb	r3, [r2, #0]
 8004894:	e7a8      	b.n	80047e8 <_printf_i+0x128>
 8004896:	6923      	ldr	r3, [r4, #16]
 8004898:	0032      	movs	r2, r6
 800489a:	9906      	ldr	r1, [sp, #24]
 800489c:	9805      	ldr	r0, [sp, #20]
 800489e:	9d07      	ldr	r5, [sp, #28]
 80048a0:	47a8      	blx	r5
 80048a2:	1c43      	adds	r3, r0, #1
 80048a4:	d0aa      	beq.n	80047fc <_printf_i+0x13c>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	079b      	lsls	r3, r3, #30
 80048aa:	d415      	bmi.n	80048d8 <_printf_i+0x218>
 80048ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ae:	68e0      	ldr	r0, [r4, #12]
 80048b0:	4298      	cmp	r0, r3
 80048b2:	daa5      	bge.n	8004800 <_printf_i+0x140>
 80048b4:	0018      	movs	r0, r3
 80048b6:	e7a3      	b.n	8004800 <_printf_i+0x140>
 80048b8:	0022      	movs	r2, r4
 80048ba:	2301      	movs	r3, #1
 80048bc:	9906      	ldr	r1, [sp, #24]
 80048be:	9805      	ldr	r0, [sp, #20]
 80048c0:	9e07      	ldr	r6, [sp, #28]
 80048c2:	3219      	adds	r2, #25
 80048c4:	47b0      	blx	r6
 80048c6:	1c43      	adds	r3, r0, #1
 80048c8:	d098      	beq.n	80047fc <_printf_i+0x13c>
 80048ca:	3501      	adds	r5, #1
 80048cc:	68e3      	ldr	r3, [r4, #12]
 80048ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	42ab      	cmp	r3, r5
 80048d4:	dcf0      	bgt.n	80048b8 <_printf_i+0x1f8>
 80048d6:	e7e9      	b.n	80048ac <_printf_i+0x1ec>
 80048d8:	2500      	movs	r5, #0
 80048da:	e7f7      	b.n	80048cc <_printf_i+0x20c>
 80048dc:	08005349 	.word	0x08005349
 80048e0:	0800535a 	.word	0x0800535a

080048e4 <__swbuf_r>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	0005      	movs	r5, r0
 80048e8:	000e      	movs	r6, r1
 80048ea:	0014      	movs	r4, r2
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d004      	beq.n	80048fa <__swbuf_r+0x16>
 80048f0:	6983      	ldr	r3, [r0, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <__swbuf_r+0x16>
 80048f6:	f000 f9f9 	bl	8004cec <__sinit>
 80048fa:	4b22      	ldr	r3, [pc, #136]	; (8004984 <__swbuf_r+0xa0>)
 80048fc:	429c      	cmp	r4, r3
 80048fe:	d12e      	bne.n	800495e <__swbuf_r+0x7a>
 8004900:	686c      	ldr	r4, [r5, #4]
 8004902:	69a3      	ldr	r3, [r4, #24]
 8004904:	60a3      	str	r3, [r4, #8]
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	d532      	bpl.n	8004972 <__swbuf_r+0x8e>
 800490c:	6923      	ldr	r3, [r4, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d02f      	beq.n	8004972 <__swbuf_r+0x8e>
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	6922      	ldr	r2, [r4, #16]
 8004916:	b2f7      	uxtb	r7, r6
 8004918:	1a98      	subs	r0, r3, r2
 800491a:	6963      	ldr	r3, [r4, #20]
 800491c:	b2f6      	uxtb	r6, r6
 800491e:	4283      	cmp	r3, r0
 8004920:	dc05      	bgt.n	800492e <__swbuf_r+0x4a>
 8004922:	0021      	movs	r1, r4
 8004924:	0028      	movs	r0, r5
 8004926:	f000 f93f 	bl	8004ba8 <_fflush_r>
 800492a:	2800      	cmp	r0, #0
 800492c:	d127      	bne.n	800497e <__swbuf_r+0x9a>
 800492e:	68a3      	ldr	r3, [r4, #8]
 8004930:	3001      	adds	r0, #1
 8004932:	3b01      	subs	r3, #1
 8004934:	60a3      	str	r3, [r4, #8]
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	6022      	str	r2, [r4, #0]
 800493c:	701f      	strb	r7, [r3, #0]
 800493e:	6963      	ldr	r3, [r4, #20]
 8004940:	4283      	cmp	r3, r0
 8004942:	d004      	beq.n	800494e <__swbuf_r+0x6a>
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	07db      	lsls	r3, r3, #31
 8004948:	d507      	bpl.n	800495a <__swbuf_r+0x76>
 800494a:	2e0a      	cmp	r6, #10
 800494c:	d105      	bne.n	800495a <__swbuf_r+0x76>
 800494e:	0021      	movs	r1, r4
 8004950:	0028      	movs	r0, r5
 8004952:	f000 f929 	bl	8004ba8 <_fflush_r>
 8004956:	2800      	cmp	r0, #0
 8004958:	d111      	bne.n	800497e <__swbuf_r+0x9a>
 800495a:	0030      	movs	r0, r6
 800495c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <__swbuf_r+0xa4>)
 8004960:	429c      	cmp	r4, r3
 8004962:	d101      	bne.n	8004968 <__swbuf_r+0x84>
 8004964:	68ac      	ldr	r4, [r5, #8]
 8004966:	e7cc      	b.n	8004902 <__swbuf_r+0x1e>
 8004968:	4b08      	ldr	r3, [pc, #32]	; (800498c <__swbuf_r+0xa8>)
 800496a:	429c      	cmp	r4, r3
 800496c:	d1c9      	bne.n	8004902 <__swbuf_r+0x1e>
 800496e:	68ec      	ldr	r4, [r5, #12]
 8004970:	e7c7      	b.n	8004902 <__swbuf_r+0x1e>
 8004972:	0021      	movs	r1, r4
 8004974:	0028      	movs	r0, r5
 8004976:	f000 f80b 	bl	8004990 <__swsetup_r>
 800497a:	2800      	cmp	r0, #0
 800497c:	d0c9      	beq.n	8004912 <__swbuf_r+0x2e>
 800497e:	2601      	movs	r6, #1
 8004980:	4276      	negs	r6, r6
 8004982:	e7ea      	b.n	800495a <__swbuf_r+0x76>
 8004984:	0800538c 	.word	0x0800538c
 8004988:	080053ac 	.word	0x080053ac
 800498c:	0800536c 	.word	0x0800536c

08004990 <__swsetup_r>:
 8004990:	4b37      	ldr	r3, [pc, #220]	; (8004a70 <__swsetup_r+0xe0>)
 8004992:	b570      	push	{r4, r5, r6, lr}
 8004994:	681d      	ldr	r5, [r3, #0]
 8004996:	0006      	movs	r6, r0
 8004998:	000c      	movs	r4, r1
 800499a:	2d00      	cmp	r5, #0
 800499c:	d005      	beq.n	80049aa <__swsetup_r+0x1a>
 800499e:	69ab      	ldr	r3, [r5, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d102      	bne.n	80049aa <__swsetup_r+0x1a>
 80049a4:	0028      	movs	r0, r5
 80049a6:	f000 f9a1 	bl	8004cec <__sinit>
 80049aa:	4b32      	ldr	r3, [pc, #200]	; (8004a74 <__swsetup_r+0xe4>)
 80049ac:	429c      	cmp	r4, r3
 80049ae:	d10f      	bne.n	80049d0 <__swsetup_r+0x40>
 80049b0:	686c      	ldr	r4, [r5, #4]
 80049b2:	230c      	movs	r3, #12
 80049b4:	5ee2      	ldrsh	r2, [r4, r3]
 80049b6:	b293      	uxth	r3, r2
 80049b8:	0711      	lsls	r1, r2, #28
 80049ba:	d42d      	bmi.n	8004a18 <__swsetup_r+0x88>
 80049bc:	06d9      	lsls	r1, r3, #27
 80049be:	d411      	bmi.n	80049e4 <__swsetup_r+0x54>
 80049c0:	2309      	movs	r3, #9
 80049c2:	2001      	movs	r0, #1
 80049c4:	6033      	str	r3, [r6, #0]
 80049c6:	3337      	adds	r3, #55	; 0x37
 80049c8:	4313      	orrs	r3, r2
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	4240      	negs	r0, r0
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <__swsetup_r+0xe8>)
 80049d2:	429c      	cmp	r4, r3
 80049d4:	d101      	bne.n	80049da <__swsetup_r+0x4a>
 80049d6:	68ac      	ldr	r4, [r5, #8]
 80049d8:	e7eb      	b.n	80049b2 <__swsetup_r+0x22>
 80049da:	4b28      	ldr	r3, [pc, #160]	; (8004a7c <__swsetup_r+0xec>)
 80049dc:	429c      	cmp	r4, r3
 80049de:	d1e8      	bne.n	80049b2 <__swsetup_r+0x22>
 80049e0:	68ec      	ldr	r4, [r5, #12]
 80049e2:	e7e6      	b.n	80049b2 <__swsetup_r+0x22>
 80049e4:	075b      	lsls	r3, r3, #29
 80049e6:	d513      	bpl.n	8004a10 <__swsetup_r+0x80>
 80049e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049ea:	2900      	cmp	r1, #0
 80049ec:	d008      	beq.n	8004a00 <__swsetup_r+0x70>
 80049ee:	0023      	movs	r3, r4
 80049f0:	3344      	adds	r3, #68	; 0x44
 80049f2:	4299      	cmp	r1, r3
 80049f4:	d002      	beq.n	80049fc <__swsetup_r+0x6c>
 80049f6:	0030      	movs	r0, r6
 80049f8:	f7ff f964 	bl	8003cc4 <_free_r>
 80049fc:	2300      	movs	r3, #0
 80049fe:	6363      	str	r3, [r4, #52]	; 0x34
 8004a00:	2224      	movs	r2, #36	; 0x24
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	4393      	bics	r3, r2
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	6063      	str	r3, [r4, #4]
 8004a0c:	6923      	ldr	r3, [r4, #16]
 8004a0e:	6023      	str	r3, [r4, #0]
 8004a10:	2308      	movs	r3, #8
 8004a12:	89a2      	ldrh	r2, [r4, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	81a3      	strh	r3, [r4, #12]
 8004a18:	6923      	ldr	r3, [r4, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10b      	bne.n	8004a36 <__swsetup_r+0xa6>
 8004a1e:	21a0      	movs	r1, #160	; 0xa0
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	0089      	lsls	r1, r1, #2
 8004a26:	0092      	lsls	r2, r2, #2
 8004a28:	400b      	ands	r3, r1
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <__swsetup_r+0xa6>
 8004a2e:	0021      	movs	r1, r4
 8004a30:	0030      	movs	r0, r6
 8004a32:	f000 fa27 	bl	8004e84 <__smakebuf_r>
 8004a36:	220c      	movs	r2, #12
 8004a38:	5ea3      	ldrsh	r3, [r4, r2]
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	001a      	movs	r2, r3
 8004a3e:	b299      	uxth	r1, r3
 8004a40:	4002      	ands	r2, r0
 8004a42:	4203      	tst	r3, r0
 8004a44:	d00f      	beq.n	8004a66 <__swsetup_r+0xd6>
 8004a46:	2200      	movs	r2, #0
 8004a48:	60a2      	str	r2, [r4, #8]
 8004a4a:	6962      	ldr	r2, [r4, #20]
 8004a4c:	4252      	negs	r2, r2
 8004a4e:	61a2      	str	r2, [r4, #24]
 8004a50:	2000      	movs	r0, #0
 8004a52:	6922      	ldr	r2, [r4, #16]
 8004a54:	4282      	cmp	r2, r0
 8004a56:	d1ba      	bne.n	80049ce <__swsetup_r+0x3e>
 8004a58:	060a      	lsls	r2, r1, #24
 8004a5a:	d5b8      	bpl.n	80049ce <__swsetup_r+0x3e>
 8004a5c:	2240      	movs	r2, #64	; 0x40
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	81a3      	strh	r3, [r4, #12]
 8004a62:	3801      	subs	r0, #1
 8004a64:	e7b3      	b.n	80049ce <__swsetup_r+0x3e>
 8004a66:	0788      	lsls	r0, r1, #30
 8004a68:	d400      	bmi.n	8004a6c <__swsetup_r+0xdc>
 8004a6a:	6962      	ldr	r2, [r4, #20]
 8004a6c:	60a2      	str	r2, [r4, #8]
 8004a6e:	e7ef      	b.n	8004a50 <__swsetup_r+0xc0>
 8004a70:	20000078 	.word	0x20000078
 8004a74:	0800538c 	.word	0x0800538c
 8004a78:	080053ac 	.word	0x080053ac
 8004a7c:	0800536c 	.word	0x0800536c

08004a80 <abort>:
 8004a80:	2006      	movs	r0, #6
 8004a82:	b510      	push	{r4, lr}
 8004a84:	f000 faba 	bl	8004ffc <raise>
 8004a88:	2001      	movs	r0, #1
 8004a8a:	f7fc fb67 	bl	800115c <_exit>
	...

08004a90 <__sflush_r>:
 8004a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a92:	898b      	ldrh	r3, [r1, #12]
 8004a94:	0005      	movs	r5, r0
 8004a96:	000c      	movs	r4, r1
 8004a98:	071a      	lsls	r2, r3, #28
 8004a9a:	d45f      	bmi.n	8004b5c <__sflush_r+0xcc>
 8004a9c:	684a      	ldr	r2, [r1, #4]
 8004a9e:	2a00      	cmp	r2, #0
 8004aa0:	dc04      	bgt.n	8004aac <__sflush_r+0x1c>
 8004aa2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004aa4:	2a00      	cmp	r2, #0
 8004aa6:	dc01      	bgt.n	8004aac <__sflush_r+0x1c>
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004aac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004aae:	2f00      	cmp	r7, #0
 8004ab0:	d0fa      	beq.n	8004aa8 <__sflush_r+0x18>
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2180      	movs	r1, #128	; 0x80
 8004ab6:	682e      	ldr	r6, [r5, #0]
 8004ab8:	602a      	str	r2, [r5, #0]
 8004aba:	001a      	movs	r2, r3
 8004abc:	0149      	lsls	r1, r1, #5
 8004abe:	400a      	ands	r2, r1
 8004ac0:	420b      	tst	r3, r1
 8004ac2:	d034      	beq.n	8004b2e <__sflush_r+0x9e>
 8004ac4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	075b      	lsls	r3, r3, #29
 8004aca:	d506      	bpl.n	8004ada <__sflush_r+0x4a>
 8004acc:	6863      	ldr	r3, [r4, #4]
 8004ace:	1ac0      	subs	r0, r0, r3
 8004ad0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <__sflush_r+0x4a>
 8004ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ad8:	1ac0      	subs	r0, r0, r3
 8004ada:	0002      	movs	r2, r0
 8004adc:	6a21      	ldr	r1, [r4, #32]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004ae4:	47b8      	blx	r7
 8004ae6:	89a1      	ldrh	r1, [r4, #12]
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d106      	bne.n	8004afa <__sflush_r+0x6a>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	2b1d      	cmp	r3, #29
 8004af0:	d831      	bhi.n	8004b56 <__sflush_r+0xc6>
 8004af2:	4a2c      	ldr	r2, [pc, #176]	; (8004ba4 <__sflush_r+0x114>)
 8004af4:	40da      	lsrs	r2, r3
 8004af6:	07d3      	lsls	r3, r2, #31
 8004af8:	d52d      	bpl.n	8004b56 <__sflush_r+0xc6>
 8004afa:	2300      	movs	r3, #0
 8004afc:	6063      	str	r3, [r4, #4]
 8004afe:	6923      	ldr	r3, [r4, #16]
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	04cb      	lsls	r3, r1, #19
 8004b04:	d505      	bpl.n	8004b12 <__sflush_r+0x82>
 8004b06:	1c43      	adds	r3, r0, #1
 8004b08:	d102      	bne.n	8004b10 <__sflush_r+0x80>
 8004b0a:	682b      	ldr	r3, [r5, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d100      	bne.n	8004b12 <__sflush_r+0x82>
 8004b10:	6560      	str	r0, [r4, #84]	; 0x54
 8004b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b14:	602e      	str	r6, [r5, #0]
 8004b16:	2900      	cmp	r1, #0
 8004b18:	d0c6      	beq.n	8004aa8 <__sflush_r+0x18>
 8004b1a:	0023      	movs	r3, r4
 8004b1c:	3344      	adds	r3, #68	; 0x44
 8004b1e:	4299      	cmp	r1, r3
 8004b20:	d002      	beq.n	8004b28 <__sflush_r+0x98>
 8004b22:	0028      	movs	r0, r5
 8004b24:	f7ff f8ce 	bl	8003cc4 <_free_r>
 8004b28:	2000      	movs	r0, #0
 8004b2a:	6360      	str	r0, [r4, #52]	; 0x34
 8004b2c:	e7bd      	b.n	8004aaa <__sflush_r+0x1a>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	0028      	movs	r0, r5
 8004b32:	6a21      	ldr	r1, [r4, #32]
 8004b34:	47b8      	blx	r7
 8004b36:	1c43      	adds	r3, r0, #1
 8004b38:	d1c5      	bne.n	8004ac6 <__sflush_r+0x36>
 8004b3a:	682b      	ldr	r3, [r5, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0c2      	beq.n	8004ac6 <__sflush_r+0x36>
 8004b40:	2b1d      	cmp	r3, #29
 8004b42:	d001      	beq.n	8004b48 <__sflush_r+0xb8>
 8004b44:	2b16      	cmp	r3, #22
 8004b46:	d101      	bne.n	8004b4c <__sflush_r+0xbc>
 8004b48:	602e      	str	r6, [r5, #0]
 8004b4a:	e7ad      	b.n	8004aa8 <__sflush_r+0x18>
 8004b4c:	2340      	movs	r3, #64	; 0x40
 8004b4e:	89a2      	ldrh	r2, [r4, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	81a3      	strh	r3, [r4, #12]
 8004b54:	e7a9      	b.n	8004aaa <__sflush_r+0x1a>
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	e7fa      	b.n	8004b52 <__sflush_r+0xc2>
 8004b5c:	690f      	ldr	r7, [r1, #16]
 8004b5e:	2f00      	cmp	r7, #0
 8004b60:	d0a2      	beq.n	8004aa8 <__sflush_r+0x18>
 8004b62:	680a      	ldr	r2, [r1, #0]
 8004b64:	600f      	str	r7, [r1, #0]
 8004b66:	1bd2      	subs	r2, r2, r7
 8004b68:	9201      	str	r2, [sp, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	079b      	lsls	r3, r3, #30
 8004b6e:	d100      	bne.n	8004b72 <__sflush_r+0xe2>
 8004b70:	694a      	ldr	r2, [r1, #20]
 8004b72:	60a2      	str	r2, [r4, #8]
 8004b74:	9b01      	ldr	r3, [sp, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	dc00      	bgt.n	8004b7c <__sflush_r+0xec>
 8004b7a:	e795      	b.n	8004aa8 <__sflush_r+0x18>
 8004b7c:	003a      	movs	r2, r7
 8004b7e:	0028      	movs	r0, r5
 8004b80:	9b01      	ldr	r3, [sp, #4]
 8004b82:	6a21      	ldr	r1, [r4, #32]
 8004b84:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b86:	47b0      	blx	r6
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	dc06      	bgt.n	8004b9a <__sflush_r+0x10a>
 8004b8c:	2340      	movs	r3, #64	; 0x40
 8004b8e:	2001      	movs	r0, #1
 8004b90:	89a2      	ldrh	r2, [r4, #12]
 8004b92:	4240      	negs	r0, r0
 8004b94:	4313      	orrs	r3, r2
 8004b96:	81a3      	strh	r3, [r4, #12]
 8004b98:	e787      	b.n	8004aaa <__sflush_r+0x1a>
 8004b9a:	9b01      	ldr	r3, [sp, #4]
 8004b9c:	183f      	adds	r7, r7, r0
 8004b9e:	1a1b      	subs	r3, r3, r0
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	e7e7      	b.n	8004b74 <__sflush_r+0xe4>
 8004ba4:	20400001 	.word	0x20400001

08004ba8 <_fflush_r>:
 8004ba8:	690b      	ldr	r3, [r1, #16]
 8004baa:	b570      	push	{r4, r5, r6, lr}
 8004bac:	0005      	movs	r5, r0
 8004bae:	000c      	movs	r4, r1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <_fflush_r+0x12>
 8004bb4:	2500      	movs	r5, #0
 8004bb6:	0028      	movs	r0, r5
 8004bb8:	bd70      	pop	{r4, r5, r6, pc}
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	d004      	beq.n	8004bc8 <_fflush_r+0x20>
 8004bbe:	6983      	ldr	r3, [r0, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <_fflush_r+0x20>
 8004bc4:	f000 f892 	bl	8004cec <__sinit>
 8004bc8:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <_fflush_r+0x74>)
 8004bca:	429c      	cmp	r4, r3
 8004bcc:	d11b      	bne.n	8004c06 <_fflush_r+0x5e>
 8004bce:	686c      	ldr	r4, [r5, #4]
 8004bd0:	220c      	movs	r2, #12
 8004bd2:	5ea3      	ldrsh	r3, [r4, r2]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ed      	beq.n	8004bb4 <_fflush_r+0xc>
 8004bd8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bda:	07d2      	lsls	r2, r2, #31
 8004bdc:	d404      	bmi.n	8004be8 <_fflush_r+0x40>
 8004bde:	059b      	lsls	r3, r3, #22
 8004be0:	d402      	bmi.n	8004be8 <_fflush_r+0x40>
 8004be2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004be4:	f000 f923 	bl	8004e2e <__retarget_lock_acquire_recursive>
 8004be8:	0028      	movs	r0, r5
 8004bea:	0021      	movs	r1, r4
 8004bec:	f7ff ff50 	bl	8004a90 <__sflush_r>
 8004bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bf2:	0005      	movs	r5, r0
 8004bf4:	07db      	lsls	r3, r3, #31
 8004bf6:	d4de      	bmi.n	8004bb6 <_fflush_r+0xe>
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	059b      	lsls	r3, r3, #22
 8004bfc:	d4db      	bmi.n	8004bb6 <_fflush_r+0xe>
 8004bfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c00:	f000 f916 	bl	8004e30 <__retarget_lock_release_recursive>
 8004c04:	e7d7      	b.n	8004bb6 <_fflush_r+0xe>
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <_fflush_r+0x78>)
 8004c08:	429c      	cmp	r4, r3
 8004c0a:	d101      	bne.n	8004c10 <_fflush_r+0x68>
 8004c0c:	68ac      	ldr	r4, [r5, #8]
 8004c0e:	e7df      	b.n	8004bd0 <_fflush_r+0x28>
 8004c10:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <_fflush_r+0x7c>)
 8004c12:	429c      	cmp	r4, r3
 8004c14:	d1dc      	bne.n	8004bd0 <_fflush_r+0x28>
 8004c16:	68ec      	ldr	r4, [r5, #12]
 8004c18:	e7da      	b.n	8004bd0 <_fflush_r+0x28>
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	0800538c 	.word	0x0800538c
 8004c20:	080053ac 	.word	0x080053ac
 8004c24:	0800536c 	.word	0x0800536c

08004c28 <std>:
 8004c28:	2300      	movs	r3, #0
 8004c2a:	b510      	push	{r4, lr}
 8004c2c:	0004      	movs	r4, r0
 8004c2e:	6003      	str	r3, [r0, #0]
 8004c30:	6043      	str	r3, [r0, #4]
 8004c32:	6083      	str	r3, [r0, #8]
 8004c34:	8181      	strh	r1, [r0, #12]
 8004c36:	6643      	str	r3, [r0, #100]	; 0x64
 8004c38:	0019      	movs	r1, r3
 8004c3a:	81c2      	strh	r2, [r0, #14]
 8004c3c:	6103      	str	r3, [r0, #16]
 8004c3e:	6143      	str	r3, [r0, #20]
 8004c40:	6183      	str	r3, [r0, #24]
 8004c42:	2208      	movs	r2, #8
 8004c44:	305c      	adds	r0, #92	; 0x5c
 8004c46:	f7ff f834 	bl	8003cb2 <memset>
 8004c4a:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <std+0x38>)
 8004c4c:	6224      	str	r4, [r4, #32]
 8004c4e:	6263      	str	r3, [r4, #36]	; 0x24
 8004c50:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <std+0x3c>)
 8004c52:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c54:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <std+0x40>)
 8004c56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <std+0x44>)
 8004c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c5c:	bd10      	pop	{r4, pc}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	0800503d 	.word	0x0800503d
 8004c64:	08005065 	.word	0x08005065
 8004c68:	0800509d 	.word	0x0800509d
 8004c6c:	080050c9 	.word	0x080050c9

08004c70 <_cleanup_r>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	4902      	ldr	r1, [pc, #8]	; (8004c7c <_cleanup_r+0xc>)
 8004c74:	f000 f8ba 	bl	8004dec <_fwalk_reent>
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	08004ba9 	.word	0x08004ba9

08004c80 <__sfmoreglue>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	2568      	movs	r5, #104	; 0x68
 8004c84:	1e4a      	subs	r2, r1, #1
 8004c86:	4355      	muls	r5, r2
 8004c88:	000e      	movs	r6, r1
 8004c8a:	0029      	movs	r1, r5
 8004c8c:	3174      	adds	r1, #116	; 0x74
 8004c8e:	f7ff f885 	bl	8003d9c <_malloc_r>
 8004c92:	1e04      	subs	r4, r0, #0
 8004c94:	d008      	beq.n	8004ca8 <__sfmoreglue+0x28>
 8004c96:	2100      	movs	r1, #0
 8004c98:	002a      	movs	r2, r5
 8004c9a:	6001      	str	r1, [r0, #0]
 8004c9c:	6046      	str	r6, [r0, #4]
 8004c9e:	300c      	adds	r0, #12
 8004ca0:	60a0      	str	r0, [r4, #8]
 8004ca2:	3268      	adds	r2, #104	; 0x68
 8004ca4:	f7ff f805 	bl	8003cb2 <memset>
 8004ca8:	0020      	movs	r0, r4
 8004caa:	bd70      	pop	{r4, r5, r6, pc}

08004cac <__sfp_lock_acquire>:
 8004cac:	b510      	push	{r4, lr}
 8004cae:	4802      	ldr	r0, [pc, #8]	; (8004cb8 <__sfp_lock_acquire+0xc>)
 8004cb0:	f000 f8bd 	bl	8004e2e <__retarget_lock_acquire_recursive>
 8004cb4:	bd10      	pop	{r4, pc}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	20000109 	.word	0x20000109

08004cbc <__sfp_lock_release>:
 8004cbc:	b510      	push	{r4, lr}
 8004cbe:	4802      	ldr	r0, [pc, #8]	; (8004cc8 <__sfp_lock_release+0xc>)
 8004cc0:	f000 f8b6 	bl	8004e30 <__retarget_lock_release_recursive>
 8004cc4:	bd10      	pop	{r4, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	20000109 	.word	0x20000109

08004ccc <__sinit_lock_acquire>:
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	4802      	ldr	r0, [pc, #8]	; (8004cd8 <__sinit_lock_acquire+0xc>)
 8004cd0:	f000 f8ad 	bl	8004e2e <__retarget_lock_acquire_recursive>
 8004cd4:	bd10      	pop	{r4, pc}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	2000010a 	.word	0x2000010a

08004cdc <__sinit_lock_release>:
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	4802      	ldr	r0, [pc, #8]	; (8004ce8 <__sinit_lock_release+0xc>)
 8004ce0:	f000 f8a6 	bl	8004e30 <__retarget_lock_release_recursive>
 8004ce4:	bd10      	pop	{r4, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	2000010a 	.word	0x2000010a

08004cec <__sinit>:
 8004cec:	b513      	push	{r0, r1, r4, lr}
 8004cee:	0004      	movs	r4, r0
 8004cf0:	f7ff ffec 	bl	8004ccc <__sinit_lock_acquire>
 8004cf4:	69a3      	ldr	r3, [r4, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <__sinit+0x14>
 8004cfa:	f7ff ffef 	bl	8004cdc <__sinit_lock_release>
 8004cfe:	bd13      	pop	{r0, r1, r4, pc}
 8004d00:	64a3      	str	r3, [r4, #72]	; 0x48
 8004d02:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004d04:	6523      	str	r3, [r4, #80]	; 0x50
 8004d06:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <__sinit+0x68>)
 8004d08:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <__sinit+0x6c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	d101      	bne.n	8004d18 <__sinit+0x2c>
 8004d14:	2301      	movs	r3, #1
 8004d16:	61a3      	str	r3, [r4, #24]
 8004d18:	0020      	movs	r0, r4
 8004d1a:	f000 f81f 	bl	8004d5c <__sfp>
 8004d1e:	6060      	str	r0, [r4, #4]
 8004d20:	0020      	movs	r0, r4
 8004d22:	f000 f81b 	bl	8004d5c <__sfp>
 8004d26:	60a0      	str	r0, [r4, #8]
 8004d28:	0020      	movs	r0, r4
 8004d2a:	f000 f817 	bl	8004d5c <__sfp>
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2104      	movs	r1, #4
 8004d32:	60e0      	str	r0, [r4, #12]
 8004d34:	6860      	ldr	r0, [r4, #4]
 8004d36:	f7ff ff77 	bl	8004c28 <std>
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	2109      	movs	r1, #9
 8004d3e:	68a0      	ldr	r0, [r4, #8]
 8004d40:	f7ff ff72 	bl	8004c28 <std>
 8004d44:	2202      	movs	r2, #2
 8004d46:	2112      	movs	r1, #18
 8004d48:	68e0      	ldr	r0, [r4, #12]
 8004d4a:	f7ff ff6d 	bl	8004c28 <std>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	61a3      	str	r3, [r4, #24]
 8004d52:	e7d2      	b.n	8004cfa <__sinit+0xe>
 8004d54:	08005284 	.word	0x08005284
 8004d58:	08004c71 	.word	0x08004c71

08004d5c <__sfp>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	0007      	movs	r7, r0
 8004d60:	f7ff ffa4 	bl	8004cac <__sfp_lock_acquire>
 8004d64:	4b1f      	ldr	r3, [pc, #124]	; (8004de4 <__sfp+0x88>)
 8004d66:	681e      	ldr	r6, [r3, #0]
 8004d68:	69b3      	ldr	r3, [r6, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <__sfp+0x18>
 8004d6e:	0030      	movs	r0, r6
 8004d70:	f7ff ffbc 	bl	8004cec <__sinit>
 8004d74:	3648      	adds	r6, #72	; 0x48
 8004d76:	68b4      	ldr	r4, [r6, #8]
 8004d78:	6873      	ldr	r3, [r6, #4]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	d504      	bpl.n	8004d88 <__sfp+0x2c>
 8004d7e:	6833      	ldr	r3, [r6, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d022      	beq.n	8004dca <__sfp+0x6e>
 8004d84:	6836      	ldr	r6, [r6, #0]
 8004d86:	e7f6      	b.n	8004d76 <__sfp+0x1a>
 8004d88:	220c      	movs	r2, #12
 8004d8a:	5ea5      	ldrsh	r5, [r4, r2]
 8004d8c:	2d00      	cmp	r5, #0
 8004d8e:	d11a      	bne.n	8004dc6 <__sfp+0x6a>
 8004d90:	0020      	movs	r0, r4
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <__sfp+0x8c>)
 8004d94:	3058      	adds	r0, #88	; 0x58
 8004d96:	60e3      	str	r3, [r4, #12]
 8004d98:	6665      	str	r5, [r4, #100]	; 0x64
 8004d9a:	f000 f847 	bl	8004e2c <__retarget_lock_init_recursive>
 8004d9e:	f7ff ff8d 	bl	8004cbc <__sfp_lock_release>
 8004da2:	0020      	movs	r0, r4
 8004da4:	2208      	movs	r2, #8
 8004da6:	0029      	movs	r1, r5
 8004da8:	6025      	str	r5, [r4, #0]
 8004daa:	60a5      	str	r5, [r4, #8]
 8004dac:	6065      	str	r5, [r4, #4]
 8004dae:	6125      	str	r5, [r4, #16]
 8004db0:	6165      	str	r5, [r4, #20]
 8004db2:	61a5      	str	r5, [r4, #24]
 8004db4:	305c      	adds	r0, #92	; 0x5c
 8004db6:	f7fe ff7c 	bl	8003cb2 <memset>
 8004dba:	6365      	str	r5, [r4, #52]	; 0x34
 8004dbc:	63a5      	str	r5, [r4, #56]	; 0x38
 8004dbe:	64a5      	str	r5, [r4, #72]	; 0x48
 8004dc0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004dc2:	0020      	movs	r0, r4
 8004dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dc6:	3468      	adds	r4, #104	; 0x68
 8004dc8:	e7d7      	b.n	8004d7a <__sfp+0x1e>
 8004dca:	2104      	movs	r1, #4
 8004dcc:	0038      	movs	r0, r7
 8004dce:	f7ff ff57 	bl	8004c80 <__sfmoreglue>
 8004dd2:	1e04      	subs	r4, r0, #0
 8004dd4:	6030      	str	r0, [r6, #0]
 8004dd6:	d1d5      	bne.n	8004d84 <__sfp+0x28>
 8004dd8:	f7ff ff70 	bl	8004cbc <__sfp_lock_release>
 8004ddc:	230c      	movs	r3, #12
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	e7ef      	b.n	8004dc2 <__sfp+0x66>
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	08005284 	.word	0x08005284
 8004de8:	ffff0001 	.word	0xffff0001

08004dec <_fwalk_reent>:
 8004dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dee:	0004      	movs	r4, r0
 8004df0:	0006      	movs	r6, r0
 8004df2:	2700      	movs	r7, #0
 8004df4:	9101      	str	r1, [sp, #4]
 8004df6:	3448      	adds	r4, #72	; 0x48
 8004df8:	6863      	ldr	r3, [r4, #4]
 8004dfa:	68a5      	ldr	r5, [r4, #8]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	9b00      	ldr	r3, [sp, #0]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	d504      	bpl.n	8004e10 <_fwalk_reent+0x24>
 8004e06:	6824      	ldr	r4, [r4, #0]
 8004e08:	2c00      	cmp	r4, #0
 8004e0a:	d1f5      	bne.n	8004df8 <_fwalk_reent+0xc>
 8004e0c:	0038      	movs	r0, r7
 8004e0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e10:	89ab      	ldrh	r3, [r5, #12]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d908      	bls.n	8004e28 <_fwalk_reent+0x3c>
 8004e16:	220e      	movs	r2, #14
 8004e18:	5eab      	ldrsh	r3, [r5, r2]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	d004      	beq.n	8004e28 <_fwalk_reent+0x3c>
 8004e1e:	0029      	movs	r1, r5
 8004e20:	0030      	movs	r0, r6
 8004e22:	9b01      	ldr	r3, [sp, #4]
 8004e24:	4798      	blx	r3
 8004e26:	4307      	orrs	r7, r0
 8004e28:	3568      	adds	r5, #104	; 0x68
 8004e2a:	e7e8      	b.n	8004dfe <_fwalk_reent+0x12>

08004e2c <__retarget_lock_init_recursive>:
 8004e2c:	4770      	bx	lr

08004e2e <__retarget_lock_acquire_recursive>:
 8004e2e:	4770      	bx	lr

08004e30 <__retarget_lock_release_recursive>:
 8004e30:	4770      	bx	lr
	...

08004e34 <__swhatbuf_r>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	000e      	movs	r6, r1
 8004e38:	001d      	movs	r5, r3
 8004e3a:	230e      	movs	r3, #14
 8004e3c:	5ec9      	ldrsh	r1, [r1, r3]
 8004e3e:	0014      	movs	r4, r2
 8004e40:	b096      	sub	sp, #88	; 0x58
 8004e42:	2900      	cmp	r1, #0
 8004e44:	da08      	bge.n	8004e58 <__swhatbuf_r+0x24>
 8004e46:	220c      	movs	r2, #12
 8004e48:	5eb3      	ldrsh	r3, [r6, r2]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	602a      	str	r2, [r5, #0]
 8004e4e:	061b      	lsls	r3, r3, #24
 8004e50:	d411      	bmi.n	8004e76 <__swhatbuf_r+0x42>
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	e00f      	b.n	8004e78 <__swhatbuf_r+0x44>
 8004e58:	466a      	mov	r2, sp
 8004e5a:	f000 f961 	bl	8005120 <_fstat_r>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	dbf1      	blt.n	8004e46 <__swhatbuf_r+0x12>
 8004e62:	23f0      	movs	r3, #240	; 0xf0
 8004e64:	9901      	ldr	r1, [sp, #4]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	4019      	ands	r1, r3
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <__swhatbuf_r+0x4c>)
 8004e6c:	18c9      	adds	r1, r1, r3
 8004e6e:	424b      	negs	r3, r1
 8004e70:	4159      	adcs	r1, r3
 8004e72:	6029      	str	r1, [r5, #0]
 8004e74:	e7ed      	b.n	8004e52 <__swhatbuf_r+0x1e>
 8004e76:	2340      	movs	r3, #64	; 0x40
 8004e78:	2000      	movs	r0, #0
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	b016      	add	sp, #88	; 0x58
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	ffffe000 	.word	0xffffe000

08004e84 <__smakebuf_r>:
 8004e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e86:	2602      	movs	r6, #2
 8004e88:	898b      	ldrh	r3, [r1, #12]
 8004e8a:	0005      	movs	r5, r0
 8004e8c:	000c      	movs	r4, r1
 8004e8e:	4233      	tst	r3, r6
 8004e90:	d006      	beq.n	8004ea0 <__smakebuf_r+0x1c>
 8004e92:	0023      	movs	r3, r4
 8004e94:	3347      	adds	r3, #71	; 0x47
 8004e96:	6023      	str	r3, [r4, #0]
 8004e98:	6123      	str	r3, [r4, #16]
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	6163      	str	r3, [r4, #20]
 8004e9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004ea0:	466a      	mov	r2, sp
 8004ea2:	ab01      	add	r3, sp, #4
 8004ea4:	f7ff ffc6 	bl	8004e34 <__swhatbuf_r>
 8004ea8:	9900      	ldr	r1, [sp, #0]
 8004eaa:	0007      	movs	r7, r0
 8004eac:	0028      	movs	r0, r5
 8004eae:	f7fe ff75 	bl	8003d9c <_malloc_r>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d108      	bne.n	8004ec8 <__smakebuf_r+0x44>
 8004eb6:	220c      	movs	r2, #12
 8004eb8:	5ea3      	ldrsh	r3, [r4, r2]
 8004eba:	059a      	lsls	r2, r3, #22
 8004ebc:	d4ef      	bmi.n	8004e9e <__smakebuf_r+0x1a>
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	4393      	bics	r3, r2
 8004ec2:	431e      	orrs	r6, r3
 8004ec4:	81a6      	strh	r6, [r4, #12]
 8004ec6:	e7e4      	b.n	8004e92 <__smakebuf_r+0xe>
 8004ec8:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <__smakebuf_r+0x84>)
 8004eca:	62ab      	str	r3, [r5, #40]	; 0x28
 8004ecc:	2380      	movs	r3, #128	; 0x80
 8004ece:	89a2      	ldrh	r2, [r4, #12]
 8004ed0:	6020      	str	r0, [r4, #0]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	81a3      	strh	r3, [r4, #12]
 8004ed6:	9b00      	ldr	r3, [sp, #0]
 8004ed8:	6120      	str	r0, [r4, #16]
 8004eda:	6163      	str	r3, [r4, #20]
 8004edc:	9b01      	ldr	r3, [sp, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <__smakebuf_r+0x7a>
 8004ee2:	0028      	movs	r0, r5
 8004ee4:	230e      	movs	r3, #14
 8004ee6:	5ee1      	ldrsh	r1, [r4, r3]
 8004ee8:	f000 f92c 	bl	8005144 <_isatty_r>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d006      	beq.n	8004efe <__smakebuf_r+0x7a>
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	4393      	bics	r3, r2
 8004ef6:	001a      	movs	r2, r3
 8004ef8:	2301      	movs	r3, #1
 8004efa:	4313      	orrs	r3, r2
 8004efc:	81a3      	strh	r3, [r4, #12]
 8004efe:	89a0      	ldrh	r0, [r4, #12]
 8004f00:	4307      	orrs	r7, r0
 8004f02:	81a7      	strh	r7, [r4, #12]
 8004f04:	e7cb      	b.n	8004e9e <__smakebuf_r+0x1a>
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	08004c71 	.word	0x08004c71

08004f0c <memchr>:
 8004f0c:	b2c9      	uxtb	r1, r1
 8004f0e:	1882      	adds	r2, r0, r2
 8004f10:	4290      	cmp	r0, r2
 8004f12:	d101      	bne.n	8004f18 <memchr+0xc>
 8004f14:	2000      	movs	r0, #0
 8004f16:	4770      	bx	lr
 8004f18:	7803      	ldrb	r3, [r0, #0]
 8004f1a:	428b      	cmp	r3, r1
 8004f1c:	d0fb      	beq.n	8004f16 <memchr+0xa>
 8004f1e:	3001      	adds	r0, #1
 8004f20:	e7f6      	b.n	8004f10 <memchr+0x4>

08004f22 <memmove>:
 8004f22:	b510      	push	{r4, lr}
 8004f24:	4288      	cmp	r0, r1
 8004f26:	d902      	bls.n	8004f2e <memmove+0xc>
 8004f28:	188b      	adds	r3, r1, r2
 8004f2a:	4298      	cmp	r0, r3
 8004f2c:	d303      	bcc.n	8004f36 <memmove+0x14>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e007      	b.n	8004f42 <memmove+0x20>
 8004f32:	5c8b      	ldrb	r3, [r1, r2]
 8004f34:	5483      	strb	r3, [r0, r2]
 8004f36:	3a01      	subs	r2, #1
 8004f38:	d2fb      	bcs.n	8004f32 <memmove+0x10>
 8004f3a:	bd10      	pop	{r4, pc}
 8004f3c:	5ccc      	ldrb	r4, [r1, r3]
 8004f3e:	54c4      	strb	r4, [r0, r3]
 8004f40:	3301      	adds	r3, #1
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d1fa      	bne.n	8004f3c <memmove+0x1a>
 8004f46:	e7f8      	b.n	8004f3a <memmove+0x18>

08004f48 <_realloc_r>:
 8004f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f4a:	0007      	movs	r7, r0
 8004f4c:	000e      	movs	r6, r1
 8004f4e:	0014      	movs	r4, r2
 8004f50:	2900      	cmp	r1, #0
 8004f52:	d105      	bne.n	8004f60 <_realloc_r+0x18>
 8004f54:	0011      	movs	r1, r2
 8004f56:	f7fe ff21 	bl	8003d9c <_malloc_r>
 8004f5a:	0005      	movs	r5, r0
 8004f5c:	0028      	movs	r0, r5
 8004f5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f60:	2a00      	cmp	r2, #0
 8004f62:	d103      	bne.n	8004f6c <_realloc_r+0x24>
 8004f64:	f7fe feae 	bl	8003cc4 <_free_r>
 8004f68:	0025      	movs	r5, r4
 8004f6a:	e7f7      	b.n	8004f5c <_realloc_r+0x14>
 8004f6c:	f000 f910 	bl	8005190 <_malloc_usable_size_r>
 8004f70:	9001      	str	r0, [sp, #4]
 8004f72:	4284      	cmp	r4, r0
 8004f74:	d803      	bhi.n	8004f7e <_realloc_r+0x36>
 8004f76:	0035      	movs	r5, r6
 8004f78:	0843      	lsrs	r3, r0, #1
 8004f7a:	42a3      	cmp	r3, r4
 8004f7c:	d3ee      	bcc.n	8004f5c <_realloc_r+0x14>
 8004f7e:	0021      	movs	r1, r4
 8004f80:	0038      	movs	r0, r7
 8004f82:	f7fe ff0b 	bl	8003d9c <_malloc_r>
 8004f86:	1e05      	subs	r5, r0, #0
 8004f88:	d0e8      	beq.n	8004f5c <_realloc_r+0x14>
 8004f8a:	9b01      	ldr	r3, [sp, #4]
 8004f8c:	0022      	movs	r2, r4
 8004f8e:	429c      	cmp	r4, r3
 8004f90:	d900      	bls.n	8004f94 <_realloc_r+0x4c>
 8004f92:	001a      	movs	r2, r3
 8004f94:	0031      	movs	r1, r6
 8004f96:	0028      	movs	r0, r5
 8004f98:	f7fe fe82 	bl	8003ca0 <memcpy>
 8004f9c:	0031      	movs	r1, r6
 8004f9e:	0038      	movs	r0, r7
 8004fa0:	f7fe fe90 	bl	8003cc4 <_free_r>
 8004fa4:	e7da      	b.n	8004f5c <_realloc_r+0x14>

08004fa6 <_raise_r>:
 8004fa6:	b570      	push	{r4, r5, r6, lr}
 8004fa8:	0004      	movs	r4, r0
 8004faa:	000d      	movs	r5, r1
 8004fac:	291f      	cmp	r1, #31
 8004fae:	d904      	bls.n	8004fba <_raise_r+0x14>
 8004fb0:	2316      	movs	r3, #22
 8004fb2:	6003      	str	r3, [r0, #0]
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	4240      	negs	r0, r0
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
 8004fba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <_raise_r+0x24>
 8004fc0:	008a      	lsls	r2, r1, #2
 8004fc2:	189b      	adds	r3, r3, r2
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	2a00      	cmp	r2, #0
 8004fc8:	d108      	bne.n	8004fdc <_raise_r+0x36>
 8004fca:	0020      	movs	r0, r4
 8004fcc:	f000 f832 	bl	8005034 <_getpid_r>
 8004fd0:	002a      	movs	r2, r5
 8004fd2:	0001      	movs	r1, r0
 8004fd4:	0020      	movs	r0, r4
 8004fd6:	f000 f81b 	bl	8005010 <_kill_r>
 8004fda:	e7ed      	b.n	8004fb8 <_raise_r+0x12>
 8004fdc:	2000      	movs	r0, #0
 8004fde:	2a01      	cmp	r2, #1
 8004fe0:	d0ea      	beq.n	8004fb8 <_raise_r+0x12>
 8004fe2:	1c51      	adds	r1, r2, #1
 8004fe4:	d103      	bne.n	8004fee <_raise_r+0x48>
 8004fe6:	2316      	movs	r3, #22
 8004fe8:	3001      	adds	r0, #1
 8004fea:	6023      	str	r3, [r4, #0]
 8004fec:	e7e4      	b.n	8004fb8 <_raise_r+0x12>
 8004fee:	2400      	movs	r4, #0
 8004ff0:	0028      	movs	r0, r5
 8004ff2:	601c      	str	r4, [r3, #0]
 8004ff4:	4790      	blx	r2
 8004ff6:	0020      	movs	r0, r4
 8004ff8:	e7de      	b.n	8004fb8 <_raise_r+0x12>
	...

08004ffc <raise>:
 8004ffc:	b510      	push	{r4, lr}
 8004ffe:	4b03      	ldr	r3, [pc, #12]	; (800500c <raise+0x10>)
 8005000:	0001      	movs	r1, r0
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	f7ff ffcf 	bl	8004fa6 <_raise_r>
 8005008:	bd10      	pop	{r4, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	20000078 	.word	0x20000078

08005010 <_kill_r>:
 8005010:	2300      	movs	r3, #0
 8005012:	b570      	push	{r4, r5, r6, lr}
 8005014:	4d06      	ldr	r5, [pc, #24]	; (8005030 <_kill_r+0x20>)
 8005016:	0004      	movs	r4, r0
 8005018:	0008      	movs	r0, r1
 800501a:	0011      	movs	r1, r2
 800501c:	602b      	str	r3, [r5, #0]
 800501e:	f7fc f88d 	bl	800113c <_kill>
 8005022:	1c43      	adds	r3, r0, #1
 8005024:	d103      	bne.n	800502e <_kill_r+0x1e>
 8005026:	682b      	ldr	r3, [r5, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d000      	beq.n	800502e <_kill_r+0x1e>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	20000104 	.word	0x20000104

08005034 <_getpid_r>:
 8005034:	b510      	push	{r4, lr}
 8005036:	f7fc f87b 	bl	8001130 <_getpid>
 800503a:	bd10      	pop	{r4, pc}

0800503c <__sread>:
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	000c      	movs	r4, r1
 8005040:	250e      	movs	r5, #14
 8005042:	5f49      	ldrsh	r1, [r1, r5]
 8005044:	f000 f8ac 	bl	80051a0 <_read_r>
 8005048:	2800      	cmp	r0, #0
 800504a:	db03      	blt.n	8005054 <__sread+0x18>
 800504c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800504e:	181b      	adds	r3, r3, r0
 8005050:	6563      	str	r3, [r4, #84]	; 0x54
 8005052:	bd70      	pop	{r4, r5, r6, pc}
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	4a02      	ldr	r2, [pc, #8]	; (8005060 <__sread+0x24>)
 8005058:	4013      	ands	r3, r2
 800505a:	81a3      	strh	r3, [r4, #12]
 800505c:	e7f9      	b.n	8005052 <__sread+0x16>
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	ffffefff 	.word	0xffffefff

08005064 <__swrite>:
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005066:	001f      	movs	r7, r3
 8005068:	898b      	ldrh	r3, [r1, #12]
 800506a:	0005      	movs	r5, r0
 800506c:	000c      	movs	r4, r1
 800506e:	0016      	movs	r6, r2
 8005070:	05db      	lsls	r3, r3, #23
 8005072:	d505      	bpl.n	8005080 <__swrite+0x1c>
 8005074:	230e      	movs	r3, #14
 8005076:	5ec9      	ldrsh	r1, [r1, r3]
 8005078:	2200      	movs	r2, #0
 800507a:	2302      	movs	r3, #2
 800507c:	f000 f874 	bl	8005168 <_lseek_r>
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	4a05      	ldr	r2, [pc, #20]	; (8005098 <__swrite+0x34>)
 8005084:	0028      	movs	r0, r5
 8005086:	4013      	ands	r3, r2
 8005088:	81a3      	strh	r3, [r4, #12]
 800508a:	0032      	movs	r2, r6
 800508c:	230e      	movs	r3, #14
 800508e:	5ee1      	ldrsh	r1, [r4, r3]
 8005090:	003b      	movs	r3, r7
 8005092:	f000 f81f 	bl	80050d4 <_write_r>
 8005096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005098:	ffffefff 	.word	0xffffefff

0800509c <__sseek>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	000c      	movs	r4, r1
 80050a0:	250e      	movs	r5, #14
 80050a2:	5f49      	ldrsh	r1, [r1, r5]
 80050a4:	f000 f860 	bl	8005168 <_lseek_r>
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	1c42      	adds	r2, r0, #1
 80050ac:	d103      	bne.n	80050b6 <__sseek+0x1a>
 80050ae:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <__sseek+0x28>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	bd70      	pop	{r4, r5, r6, pc}
 80050b6:	2280      	movs	r2, #128	; 0x80
 80050b8:	0152      	lsls	r2, r2, #5
 80050ba:	4313      	orrs	r3, r2
 80050bc:	81a3      	strh	r3, [r4, #12]
 80050be:	6560      	str	r0, [r4, #84]	; 0x54
 80050c0:	e7f8      	b.n	80050b4 <__sseek+0x18>
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	ffffefff 	.word	0xffffefff

080050c8 <__sclose>:
 80050c8:	b510      	push	{r4, lr}
 80050ca:	230e      	movs	r3, #14
 80050cc:	5ec9      	ldrsh	r1, [r1, r3]
 80050ce:	f000 f815 	bl	80050fc <_close_r>
 80050d2:	bd10      	pop	{r4, pc}

080050d4 <_write_r>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	0004      	movs	r4, r0
 80050d8:	0008      	movs	r0, r1
 80050da:	0011      	movs	r1, r2
 80050dc:	001a      	movs	r2, r3
 80050de:	2300      	movs	r3, #0
 80050e0:	4d05      	ldr	r5, [pc, #20]	; (80050f8 <_write_r+0x24>)
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	f7fc f863 	bl	80011ae <_write>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d103      	bne.n	80050f4 <_write_r+0x20>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d000      	beq.n	80050f4 <_write_r+0x20>
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	bd70      	pop	{r4, r5, r6, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	20000104 	.word	0x20000104

080050fc <_close_r>:
 80050fc:	2300      	movs	r3, #0
 80050fe:	b570      	push	{r4, r5, r6, lr}
 8005100:	4d06      	ldr	r5, [pc, #24]	; (800511c <_close_r+0x20>)
 8005102:	0004      	movs	r4, r0
 8005104:	0008      	movs	r0, r1
 8005106:	602b      	str	r3, [r5, #0]
 8005108:	f7fc f86d 	bl	80011e6 <_close>
 800510c:	1c43      	adds	r3, r0, #1
 800510e:	d103      	bne.n	8005118 <_close_r+0x1c>
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d000      	beq.n	8005118 <_close_r+0x1c>
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	bd70      	pop	{r4, r5, r6, pc}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	20000104 	.word	0x20000104

08005120 <_fstat_r>:
 8005120:	2300      	movs	r3, #0
 8005122:	b570      	push	{r4, r5, r6, lr}
 8005124:	4d06      	ldr	r5, [pc, #24]	; (8005140 <_fstat_r+0x20>)
 8005126:	0004      	movs	r4, r0
 8005128:	0008      	movs	r0, r1
 800512a:	0011      	movs	r1, r2
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	f7fc f864 	bl	80011fa <_fstat>
 8005132:	1c43      	adds	r3, r0, #1
 8005134:	d103      	bne.n	800513e <_fstat_r+0x1e>
 8005136:	682b      	ldr	r3, [r5, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d000      	beq.n	800513e <_fstat_r+0x1e>
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	20000104 	.word	0x20000104

08005144 <_isatty_r>:
 8005144:	2300      	movs	r3, #0
 8005146:	b570      	push	{r4, r5, r6, lr}
 8005148:	4d06      	ldr	r5, [pc, #24]	; (8005164 <_isatty_r+0x20>)
 800514a:	0004      	movs	r4, r0
 800514c:	0008      	movs	r0, r1
 800514e:	602b      	str	r3, [r5, #0]
 8005150:	f7fc f861 	bl	8001216 <_isatty>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	d103      	bne.n	8005160 <_isatty_r+0x1c>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d000      	beq.n	8005160 <_isatty_r+0x1c>
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	bd70      	pop	{r4, r5, r6, pc}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	20000104 	.word	0x20000104

08005168 <_lseek_r>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	0004      	movs	r4, r0
 800516c:	0008      	movs	r0, r1
 800516e:	0011      	movs	r1, r2
 8005170:	001a      	movs	r2, r3
 8005172:	2300      	movs	r3, #0
 8005174:	4d05      	ldr	r5, [pc, #20]	; (800518c <_lseek_r+0x24>)
 8005176:	602b      	str	r3, [r5, #0]
 8005178:	f7fc f856 	bl	8001228 <_lseek>
 800517c:	1c43      	adds	r3, r0, #1
 800517e:	d103      	bne.n	8005188 <_lseek_r+0x20>
 8005180:	682b      	ldr	r3, [r5, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d000      	beq.n	8005188 <_lseek_r+0x20>
 8005186:	6023      	str	r3, [r4, #0]
 8005188:	bd70      	pop	{r4, r5, r6, pc}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	20000104 	.word	0x20000104

08005190 <_malloc_usable_size_r>:
 8005190:	1f0b      	subs	r3, r1, #4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	1f18      	subs	r0, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	da01      	bge.n	800519e <_malloc_usable_size_r+0xe>
 800519a:	580b      	ldr	r3, [r1, r0]
 800519c:	18c0      	adds	r0, r0, r3
 800519e:	4770      	bx	lr

080051a0 <_read_r>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	0004      	movs	r4, r0
 80051a4:	0008      	movs	r0, r1
 80051a6:	0011      	movs	r1, r2
 80051a8:	001a      	movs	r2, r3
 80051aa:	2300      	movs	r3, #0
 80051ac:	4d05      	ldr	r5, [pc, #20]	; (80051c4 <_read_r+0x24>)
 80051ae:	602b      	str	r3, [r5, #0]
 80051b0:	f7fb ffe0 	bl	8001174 <_read>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d103      	bne.n	80051c0 <_read_r+0x20>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d000      	beq.n	80051c0 <_read_r+0x20>
 80051be:	6023      	str	r3, [r4, #0]
 80051c0:	bd70      	pop	{r4, r5, r6, pc}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	20000104 	.word	0x20000104

080051c8 <_init>:
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ce:	bc08      	pop	{r3}
 80051d0:	469e      	mov	lr, r3
 80051d2:	4770      	bx	lr

080051d4 <_fini>:
 80051d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051da:	bc08      	pop	{r3}
 80051dc:	469e      	mov	lr, r3
 80051de:	4770      	bx	lr
